# coding: utf-8

"""
    LEIA RESTful API for AI

    Leia API  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: contact@leia.io
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, StrictBool, StrictStr
from leiaapi.generated.models.format_types import FormatTypes

class ApplyBody(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    block_processing: Optional[StrictBool] = None
    callback_headers: Optional[Dict[str, Any]] = None
    callback_url: Optional[StrictStr] = None
    execute_after_id: Optional[StrictStr] = None
    format_type: Optional[FormatTypes] = None
    model_params: Optional[Dict[str, Any]] = None
    page_range: Optional[StrictStr] = None
    tag: Optional[StrictStr] = None
    __properties = ["block_processing", "callback_headers", "callback_url", "execute_after_id", "format_type", "model_params", "page_range", "tag"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApplyBody:
        """Create an instance of ApplyBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApplyBody:
        """Create an instance of ApplyBody from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return ApplyBody.parse_obj(obj)

        _obj = ApplyBody.parse_obj({
            "block_processing": obj.get("block_processing"),
            "callback_headers": obj.get("callback_headers"),
            "callback_url": obj.get("callback_url"),
            "execute_after_id": obj.get("execute_after_id"),
            "format_type": obj.get("format_type"),
            "model_params": obj.get("model_params"),
            "page_range": obj.get("page_range"),
            "tag": obj.get("tag")
        })
        return _obj

