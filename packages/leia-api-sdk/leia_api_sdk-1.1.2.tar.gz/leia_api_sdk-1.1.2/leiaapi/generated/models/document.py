# coding: utf-8

"""
    LEIA RESTful API for AI

    Leia API  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: contact@leia.io
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conint

class Document(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    application_id: StrictStr = ...
    creation_time: datetime = ...
    expiration_time: Optional[datetime] = None
    extension: Optional[StrictStr] = None
    filename: StrictStr = ...
    id: StrictStr = ...
    md5sum: Optional[StrictStr] = Field(None, description="The MD5 sum of the document")
    mime_type: Optional[StrictStr] = None
    original_id: Optional[StrictStr] = Field(None, description="If this document is the result of a conversion, will contain the id of the original document")
    page: Optional[StrictInt] = Field(None, description="The page represented by this document (only if it is a sub document of a multi page document such as a PDF)")
    rotation_angle: Optional[conint(strict=True, le=359, ge=0)] = Field(None, description="The rotation angle in degrees to apply to the document to present it in a human readable orientation")
    size: Optional[StrictInt] = Field(None, description="The size of the document in bytes")
    tags: Optional[List[StrictStr]] = None
    __properties = ["application_id", "creation_time", "expiration_time", "extension", "filename", "id", "md5sum", "mime_type", "original_id", "page", "rotation_angle", "size", "tags"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Document:
        """Create an instance of Document from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Document:
        """Create an instance of Document from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return Document.parse_obj(obj)

        _obj = Document.parse_obj({
            "application_id": obj.get("application_id"),
            "creation_time": obj.get("creation_time"),
            "expiration_time": obj.get("expiration_time"),
            "extension": obj.get("extension"),
            "filename": obj.get("filename"),
            "id": obj.get("id"),
            "md5sum": obj.get("md5sum"),
            "mime_type": obj.get("mime_type"),
            "original_id": obj.get("original_id"),
            "page": obj.get("page"),
            "rotation_angle": obj.get("rotation_angle"),
            "size": obj.get("size"),
            "tags": obj.get("tags")
        })
        return _obj

