# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/09_bcls.ipynb.

# %% auto 0
__all__ = ['bindermeta', 'binder']

# %% ../nbs/09_bcls.ipynb 6
from inspect import (currentframe, getargvalues)
from functools import wraps
# from deprecated import deprecated

# %% ../nbs/09_bcls.ipynb 8
from typing import (Any, Callable, Sequence, TypeGuard)
from typing import Self, Type, Callable, TypeVar, ParamSpec, TypeGuard, TypedDict

# %% ../nbs/09_bcls.ipynb 10
#| export


# %% ../nbs/09_bcls.ipynb 12
#| export


# %% ../nbs/09_bcls.ipynb 14
from .type import (P, T)
from .bnds import bind
from .enum import BoundFormat
from .util import passthrough, getname, private, mangled, unmangle

# %% ../nbs/09_bcls.ipynb 16
class bindermeta(type):
    def __new__(cls, name, bases, namespace, **kwargs):
        
        new = super().__new__(cls, name, bases, namespace)
        new.setvars(**{**namespace, **kwargs})
        return new
        
    def setvars(cls, **defs: T):
        sub = defs.pop('__subclass', getattr(cls, mangled(cls, '__subclass'), False))
        try:
            cls.__func = defs.pop('__func', getattr(cls, mangled(cls, '__func'), passthrough))
            cls.__opts = defs.pop('__opts', getattr(cls, mangled(cls, '__opts'), {}))
        except KeyError as err:
            ...
            
        return cls
        
    def __call__(cls, *args, **kwargs) -> BoundFormat:
        return bind(cls.__func, *args, __opts=cls.__opts, **kwargs)
    
class binder(metaclass=bindermeta):
    def __init_subclass__(cls: Type[Self], *args, **defs: T) -> None:
        super().__init_subclass__(*args, **defs)
        cls.setvars(**defs)
        
