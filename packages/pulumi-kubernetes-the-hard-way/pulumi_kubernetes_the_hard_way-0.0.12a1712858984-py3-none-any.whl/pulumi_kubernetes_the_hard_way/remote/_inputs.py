# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'SystemdInstallSectionArgs',
    'SystemdServiceSectionArgs',
    'SystemdUnitSectionArgs',
]

@pulumi.input_type
class SystemdInstallSectionArgs:
    def __init__(__self__, *,
                 wanted_by: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        https://www.freedesktop.org/software/systemd/man/latest/systemd.unit.html#%5BInstall%5D%20Section%20Options
        :param pulumi.Input[Sequence[pulumi.Input[str]]] wanted_by: A symbolic link is created in the .wants/, .requires/, or .upholds/ directory of each of the listed units when this unit is installed by systemctl enable.
        """
        if wanted_by is not None:
            pulumi.set(__self__, "wanted_by", wanted_by)

    @property
    @pulumi.getter(name="wantedBy")
    def wanted_by(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A symbolic link is created in the .wants/, .requires/, or .upholds/ directory of each of the listed units when this unit is installed by systemctl enable.
        """
        return pulumi.get(self, "wanted_by")

    @wanted_by.setter
    def wanted_by(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "wanted_by", value)


@pulumi.input_type
class SystemdServiceSectionArgs:
    def __init__(__self__, *,
                 exec_start: Optional[pulumi.Input[str]] = None,
                 exit_type: Optional[pulumi.Input['SystemdServiceExitType']] = None,
                 restart: Optional[pulumi.Input['SystemdServiceRestart']] = None,
                 restart_sec: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input['SystemdServiceType']] = None):
        """
        https://www.freedesktop.org/software/systemd/man/latest/systemd.service.html#
        :param pulumi.Input[str] exec_start: Commands that are executed when this service is started.
        :param pulumi.Input['SystemdServiceExitType'] exit_type: Specifies when the manager should consider the service to be finished.
        :param pulumi.Input['SystemdServiceRestart'] restart: Configures whether the service shall be restarted when the service process exits, is killed, or a timeout is reached.
        :param pulumi.Input[str] restart_sec: Configures the time to sleep before restarting a service (as configured with Restart=).
        :param pulumi.Input['SystemdServiceType'] type: Configures the mechanism via which the service notifies the manager that the service start-up has finished.
        """
        if exec_start is not None:
            pulumi.set(__self__, "exec_start", exec_start)
        if exit_type is not None:
            pulumi.set(__self__, "exit_type", exit_type)
        if restart is not None:
            pulumi.set(__self__, "restart", restart)
        if restart_sec is not None:
            pulumi.set(__self__, "restart_sec", restart_sec)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="execStart")
    def exec_start(self) -> Optional[pulumi.Input[str]]:
        """
        Commands that are executed when this service is started.
        """
        return pulumi.get(self, "exec_start")

    @exec_start.setter
    def exec_start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exec_start", value)

    @property
    @pulumi.getter(name="exitType")
    def exit_type(self) -> Optional[pulumi.Input['SystemdServiceExitType']]:
        """
        Specifies when the manager should consider the service to be finished.
        """
        return pulumi.get(self, "exit_type")

    @exit_type.setter
    def exit_type(self, value: Optional[pulumi.Input['SystemdServiceExitType']]):
        pulumi.set(self, "exit_type", value)

    @property
    @pulumi.getter
    def restart(self) -> Optional[pulumi.Input['SystemdServiceRestart']]:
        """
        Configures whether the service shall be restarted when the service process exits, is killed, or a timeout is reached.
        """
        return pulumi.get(self, "restart")

    @restart.setter
    def restart(self, value: Optional[pulumi.Input['SystemdServiceRestart']]):
        pulumi.set(self, "restart", value)

    @property
    @pulumi.getter(name="restartSec")
    def restart_sec(self) -> Optional[pulumi.Input[str]]:
        """
        Configures the time to sleep before restarting a service (as configured with Restart=).
        """
        return pulumi.get(self, "restart_sec")

    @restart_sec.setter
    def restart_sec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "restart_sec", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['SystemdServiceType']]:
        """
        Configures the mechanism via which the service notifies the manager that the service start-up has finished.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['SystemdServiceType']]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class SystemdUnitSectionArgs:
    def __init__(__self__, *,
                 binds_to: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 documentation: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 requires: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 requisite: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 wants: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        https://www.freedesktop.org/software/systemd/man/latest/systemd.unit.html#
        :param pulumi.Input[Sequence[pulumi.Input[str]]] binds_to: Configures requirement dependencies, very similar in style to Requires=.
        :param pulumi.Input[str] description: A short human readable title of the unit.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] documentation: A space-separated list of URIs referencing documentation for this unit or its configuration.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] requires: Similar to Wants=, but declares a stronger requirement dependency.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] requisite: Similar to Requires=. However, if the units listed here are not started already, they will not be started and the starting of this unit will fail immediately.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] wants: Configures (weak) requirement dependencies on other units.
        """
        if binds_to is not None:
            pulumi.set(__self__, "binds_to", binds_to)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if documentation is not None:
            pulumi.set(__self__, "documentation", documentation)
        if requires is not None:
            pulumi.set(__self__, "requires", requires)
        if requisite is not None:
            pulumi.set(__self__, "requisite", requisite)
        if wants is not None:
            pulumi.set(__self__, "wants", wants)

    @property
    @pulumi.getter(name="bindsTo")
    def binds_to(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Configures requirement dependencies, very similar in style to Requires=.
        """
        return pulumi.get(self, "binds_to")

    @binds_to.setter
    def binds_to(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "binds_to", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A short human readable title of the unit.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def documentation(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A space-separated list of URIs referencing documentation for this unit or its configuration.
        """
        return pulumi.get(self, "documentation")

    @documentation.setter
    def documentation(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "documentation", value)

    @property
    @pulumi.getter
    def requires(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Similar to Wants=, but declares a stronger requirement dependency.
        """
        return pulumi.get(self, "requires")

    @requires.setter
    def requires(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "requires", value)

    @property
    @pulumi.getter
    def requisite(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Similar to Requires=. However, if the units listed here are not started already, they will not be started and the starting of this unit will fail immediately.
        """
        return pulumi.get(self, "requisite")

    @requisite.setter
    def requisite(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "requisite", value)

    @property
    @pulumi.getter
    def wants(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Configures (weak) requirement dependencies on other units.
        """
        return pulumi.get(self, "wants")

    @wants.setter
    def wants(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "wants", value)


