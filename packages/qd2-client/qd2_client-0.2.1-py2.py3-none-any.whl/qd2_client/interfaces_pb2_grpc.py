# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from qd2_client import interfaces_pb2 as interfaces__pb2


class ApplicationInterfaceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.open_connect = channel.unary_unary(
                '/QDK.ApplicationInterface/open_connect',
                request_serializer=interfaces__pb2.OpenConnectRequest.SerializeToString,
                response_deserializer=interfaces__pb2.OpenConnectResponse.FromString,
                )
        self.close = channel.unary_unary(
                '/QDK.ApplicationInterface/close',
                request_serializer=interfaces__pb2.CloseRequest.SerializeToString,
                response_deserializer=interfaces__pb2.CloseResponse.FromString,
                )
        self.get_key = channel.unary_unary(
                '/QDK.ApplicationInterface/get_key',
                request_serializer=interfaces__pb2.GetKeyRequest.SerializeToString,
                response_deserializer=interfaces__pb2.GetKeyResponse.FromString,
                )


class ApplicationInterfaceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def open_connect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def close(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_key(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ApplicationInterfaceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'open_connect': grpc.unary_unary_rpc_method_handler(
                    servicer.open_connect,
                    request_deserializer=interfaces__pb2.OpenConnectRequest.FromString,
                    response_serializer=interfaces__pb2.OpenConnectResponse.SerializeToString,
            ),
            'close': grpc.unary_unary_rpc_method_handler(
                    servicer.close,
                    request_deserializer=interfaces__pb2.CloseRequest.FromString,
                    response_serializer=interfaces__pb2.CloseResponse.SerializeToString,
            ),
            'get_key': grpc.unary_unary_rpc_method_handler(
                    servicer.get_key,
                    request_deserializer=interfaces__pb2.GetKeyRequest.FromString,
                    response_serializer=interfaces__pb2.GetKeyResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'QDK.ApplicationInterface', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ApplicationInterface(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def open_connect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QDK.ApplicationInterface/open_connect',
            interfaces__pb2.OpenConnectRequest.SerializeToString,
            interfaces__pb2.OpenConnectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def close(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QDK.ApplicationInterface/close',
            interfaces__pb2.CloseRequest.SerializeToString,
            interfaces__pb2.CloseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_key(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QDK.ApplicationInterface/get_key',
            interfaces__pb2.GetKeyRequest.SerializeToString,
            interfaces__pb2.GetKeyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class InterKMEInterfaceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.new_app = channel.unary_unary(
                '/QDK.InterKMEInterface/new_app',
                request_serializer=interfaces__pb2.NewAppRequest.SerializeToString,
                response_deserializer=interfaces__pb2.NewAppResponse.FromString,
                )
        self.app_open = channel.unary_unary(
                '/QDK.InterKMEInterface/app_open',
                request_serializer=interfaces__pb2.AppOpenRequest.SerializeToString,
                response_deserializer=interfaces__pb2.AppOpenResponse.FromString,
                )


class InterKMEInterfaceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def new_app(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def app_open(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_InterKMEInterfaceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'new_app': grpc.unary_unary_rpc_method_handler(
                    servicer.new_app,
                    request_deserializer=interfaces__pb2.NewAppRequest.FromString,
                    response_serializer=interfaces__pb2.NewAppResponse.SerializeToString,
            ),
            'app_open': grpc.unary_unary_rpc_method_handler(
                    servicer.app_open,
                    request_deserializer=interfaces__pb2.AppOpenRequest.FromString,
                    response_serializer=interfaces__pb2.AppOpenResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'QDK.InterKMEInterface', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class InterKMEInterface(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def new_app(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QDK.InterKMEInterface/new_app',
            interfaces__pb2.NewAppRequest.SerializeToString,
            interfaces__pb2.NewAppResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def app_open(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QDK.InterKMEInterface/app_open',
            interfaces__pb2.AppOpenRequest.SerializeToString,
            interfaces__pb2.AppOpenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
