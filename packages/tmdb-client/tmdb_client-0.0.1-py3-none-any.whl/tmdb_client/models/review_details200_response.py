# coding: utf-8

"""
    TMDB API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from tmdb_client.models.review_details200_response_author_details import ReviewDetails200ResponseAuthorDetails
from typing import Optional, Set
from typing_extensions import Self

class ReviewDetails200Response(BaseModel):
    """
    ReviewDetails200Response
    """ # noqa: E501
    id: Optional[StrictStr] = None
    author: Optional[StrictStr] = None
    author_details: Optional[ReviewDetails200ResponseAuthorDetails] = None
    content: Optional[StrictStr] = None
    created_at: Optional[StrictStr] = None
    iso_639_1: Optional[StrictStr] = None
    media_id: Optional[StrictInt] = 0
    media_title: Optional[StrictStr] = None
    media_type: Optional[StrictStr] = None
    updated_at: Optional[StrictStr] = None
    url: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["id", "author", "author_details", "content", "created_at", "iso_639_1", "media_id", "media_title", "media_type", "updated_at", "url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReviewDetails200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of author_details
        if self.author_details:
            _dict['author_details'] = self.author_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReviewDetails200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "author": obj.get("author"),
            "author_details": ReviewDetails200ResponseAuthorDetails.from_dict(obj["author_details"]) if obj.get("author_details") is not None else None,
            "content": obj.get("content"),
            "created_at": obj.get("created_at"),
            "iso_639_1": obj.get("iso_639_1"),
            "media_id": obj.get("media_id") if obj.get("media_id") is not None else 0,
            "media_title": obj.get("media_title"),
            "media_type": obj.get("media_type"),
            "updated_at": obj.get("updated_at"),
            "url": obj.get("url")
        })
        return _obj


