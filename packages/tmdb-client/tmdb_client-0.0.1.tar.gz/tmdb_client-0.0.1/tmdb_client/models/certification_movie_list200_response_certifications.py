# coding: utf-8

"""
    TMDB API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from tmdb_client.models.certification_movie_list200_response_certifications_ar_inner import CertificationMovieList200ResponseCertificationsARInner
from tmdb_client.models.certification_movie_list200_response_certifications_au_inner import CertificationMovieList200ResponseCertificationsAUInner
from tmdb_client.models.certification_movie_list200_response_certifications_bg_inner import CertificationMovieList200ResponseCertificationsBGInner
from tmdb_client.models.certification_movie_list200_response_certifications_br_inner import CertificationMovieList200ResponseCertificationsBRInner
from tmdb_client.models.certification_movie_list200_response_certifications_ca_inner import CertificationMovieList200ResponseCertificationsCAInner
from tmdb_client.models.certification_movie_list200_response_certifications_caqc_inner import CertificationMovieList200ResponseCertificationsCAQCInner
from tmdb_client.models.certification_movie_list200_response_certifications_ch_inner import CertificationMovieList200ResponseCertificationsCHInner
from tmdb_client.models.certification_movie_list200_response_certifications_de_inner import CertificationMovieList200ResponseCertificationsDEInner
from tmdb_client.models.certification_movie_list200_response_certifications_es_inner import CertificationMovieList200ResponseCertificationsESInner
from tmdb_client.models.certification_movie_list200_response_certifications_fi_inner import CertificationMovieList200ResponseCertificationsFIInner
from tmdb_client.models.certification_movie_list200_response_certifications_fr_inner import CertificationMovieList200ResponseCertificationsFRInner
from tmdb_client.models.certification_movie_list200_response_certifications_gb_inner import CertificationMovieList200ResponseCertificationsGBInner
from tmdb_client.models.certification_movie_list200_response_certifications_gr_inner import CertificationMovieList200ResponseCertificationsGRInner
from tmdb_client.models.certification_movie_list200_response_certifications_hk_inner import CertificationMovieList200ResponseCertificationsHKInner
from tmdb_client.models.certification_movie_list200_response_certifications_hu_inner import CertificationMovieList200ResponseCertificationsHUInner
from tmdb_client.models.certification_movie_list200_response_certifications_id_inner import CertificationMovieList200ResponseCertificationsIDInner
from tmdb_client.models.certification_movie_list200_response_certifications_ie_inner import CertificationMovieList200ResponseCertificationsIEInner
from tmdb_client.models.certification_movie_list200_response_certifications_il_inner import CertificationMovieList200ResponseCertificationsILInner
from tmdb_client.models.certification_movie_list200_response_certifications_in_inner import CertificationMovieList200ResponseCertificationsINInner
from tmdb_client.models.certification_movie_list200_response_certifications_jp_inner import CertificationMovieList200ResponseCertificationsJPInner
from tmdb_client.models.certification_movie_list200_response_certifications_kr_inner import CertificationMovieList200ResponseCertificationsKRInner
from tmdb_client.models.certification_movie_list200_response_certifications_lu_inner import CertificationMovieList200ResponseCertificationsLUInner
from tmdb_client.models.certification_movie_list200_response_certifications_lv_inner import CertificationMovieList200ResponseCertificationsLVInner
from tmdb_client.models.certification_movie_list200_response_certifications_mo_inner import CertificationMovieList200ResponseCertificationsMOInner
from tmdb_client.models.certification_movie_list200_response_certifications_mx_inner import CertificationMovieList200ResponseCertificationsMXInner
from tmdb_client.models.certification_movie_list200_response_certifications_nl_inner import CertificationMovieList200ResponseCertificationsNLInner
from tmdb_client.models.certification_movie_list200_response_certifications_no_inner import CertificationMovieList200ResponseCertificationsNOInner
from tmdb_client.models.certification_movie_list200_response_certifications_nz_inner import CertificationMovieList200ResponseCertificationsNZInner
from tmdb_client.models.certification_movie_list200_response_certifications_pr_inner import CertificationMovieList200ResponseCertificationsPRInner
from tmdb_client.models.certification_movie_list200_response_certifications_pt_inner import CertificationMovieList200ResponseCertificationsPTInner
from tmdb_client.models.certification_movie_list200_response_certifications_ru_inner import CertificationMovieList200ResponseCertificationsRUInner
from tmdb_client.models.certification_movie_list200_response_certifications_se_inner import CertificationMovieList200ResponseCertificationsSEInner
from tmdb_client.models.certification_movie_list200_response_certifications_sg_inner import CertificationMovieList200ResponseCertificationsSGInner
from tmdb_client.models.certification_movie_list200_response_certifications_sk_inner import CertificationMovieList200ResponseCertificationsSKInner
from tmdb_client.models.certification_movie_list200_response_certifications_th_inner import CertificationMovieList200ResponseCertificationsTHInner
from tmdb_client.models.certification_movie_list200_response_certifications_tr_inner import CertificationMovieList200ResponseCertificationsTRInner
from tmdb_client.models.certification_movie_list200_response_certifications_tw_inner import CertificationMovieList200ResponseCertificationsTWInner
from tmdb_client.models.certification_movie_list200_response_certifications_us_inner import CertificationMovieList200ResponseCertificationsUSInner
from tmdb_client.models.certification_movie_list200_response_certifications_vi_inner import CertificationMovieList200ResponseCertificationsVIInner
from tmdb_client.models.certification_movie_list200_response_certifications_za_inner import CertificationMovieList200ResponseCertificationsZAInner
from typing import Optional, Set
from typing_extensions import Self

class CertificationMovieList200ResponseCertifications(BaseModel):
    """
    CertificationMovieList200ResponseCertifications
    """ # noqa: E501
    au: Optional[List[CertificationMovieList200ResponseCertificationsAUInner]] = Field(default=None, alias="AU")
    bg: Optional[List[CertificationMovieList200ResponseCertificationsBGInner]] = Field(default=None, alias="BG")
    br: Optional[List[CertificationMovieList200ResponseCertificationsBRInner]] = Field(default=None, alias="BR")
    ca: Optional[List[CertificationMovieList200ResponseCertificationsCAInner]] = Field(default=None, alias="CA")
    ca_qc: Optional[List[CertificationMovieList200ResponseCertificationsCAQCInner]] = Field(default=None, alias="CA-QC")
    de: Optional[List[CertificationMovieList200ResponseCertificationsDEInner]] = Field(default=None, alias="DE")
    dk: Optional[List[CertificationMovieList200ResponseCertificationsCAQCInner]] = Field(default=None, alias="DK")
    es: Optional[List[CertificationMovieList200ResponseCertificationsESInner]] = Field(default=None, alias="ES")
    fi: Optional[List[CertificationMovieList200ResponseCertificationsFIInner]] = Field(default=None, alias="FI")
    fr: Optional[List[CertificationMovieList200ResponseCertificationsFRInner]] = Field(default=None, alias="FR")
    gb: Optional[List[CertificationMovieList200ResponseCertificationsGBInner]] = Field(default=None, alias="GB")
    hu: Optional[List[CertificationMovieList200ResponseCertificationsHUInner]] = Field(default=None, alias="HU")
    var_in: Optional[List[CertificationMovieList200ResponseCertificationsINInner]] = Field(default=None, alias="IN")
    it: Optional[List[CertificationMovieList200ResponseCertificationsCAQCInner]] = Field(default=None, alias="IT")
    lt: Optional[List[CertificationMovieList200ResponseCertificationsCAQCInner]] = Field(default=None, alias="LT")
    my: Optional[List[CertificationMovieList200ResponseCertificationsCAQCInner]] = Field(default=None, alias="MY")
    nl: Optional[List[CertificationMovieList200ResponseCertificationsNLInner]] = Field(default=None, alias="NL")
    no: Optional[List[CertificationMovieList200ResponseCertificationsNOInner]] = Field(default=None, alias="NO")
    nz: Optional[List[CertificationMovieList200ResponseCertificationsNZInner]] = Field(default=None, alias="NZ")
    ph: Optional[List[CertificationMovieList200ResponseCertificationsCAQCInner]] = Field(default=None, alias="PH")
    pt: Optional[List[CertificationMovieList200ResponseCertificationsPTInner]] = Field(default=None, alias="PT")
    ru: Optional[List[CertificationMovieList200ResponseCertificationsRUInner]] = Field(default=None, alias="RU")
    se: Optional[List[CertificationMovieList200ResponseCertificationsSEInner]] = Field(default=None, alias="SE")
    us: Optional[List[CertificationMovieList200ResponseCertificationsUSInner]] = Field(default=None, alias="US")
    kr: Optional[List[CertificationMovieList200ResponseCertificationsKRInner]] = Field(default=None, alias="KR")
    sk: Optional[List[CertificationMovieList200ResponseCertificationsSKInner]] = Field(default=None, alias="SK")
    th: Optional[List[CertificationMovieList200ResponseCertificationsTHInner]] = Field(default=None, alias="TH")
    mx: Optional[List[CertificationMovieList200ResponseCertificationsMXInner]] = Field(default=None, alias="MX")
    id: Optional[List[CertificationMovieList200ResponseCertificationsIDInner]] = Field(default=None, alias="ID")
    tr: Optional[List[CertificationMovieList200ResponseCertificationsTRInner]] = Field(default=None, alias="TR")
    ar: Optional[List[CertificationMovieList200ResponseCertificationsARInner]] = Field(default=None, alias="AR")
    gr: Optional[List[CertificationMovieList200ResponseCertificationsGRInner]] = Field(default=None, alias="GR")
    tw: Optional[List[CertificationMovieList200ResponseCertificationsTWInner]] = Field(default=None, alias="TW")
    za: Optional[List[CertificationMovieList200ResponseCertificationsZAInner]] = Field(default=None, alias="ZA")
    sg: Optional[List[CertificationMovieList200ResponseCertificationsSGInner]] = Field(default=None, alias="SG")
    ie: Optional[List[CertificationMovieList200ResponseCertificationsIEInner]] = Field(default=None, alias="IE")
    pr: Optional[List[CertificationMovieList200ResponseCertificationsPRInner]] = Field(default=None, alias="PR")
    jp: Optional[List[CertificationMovieList200ResponseCertificationsJPInner]] = Field(default=None, alias="JP")
    vi: Optional[List[CertificationMovieList200ResponseCertificationsVIInner]] = Field(default=None, alias="VI")
    ch: Optional[List[CertificationMovieList200ResponseCertificationsCHInner]] = Field(default=None, alias="CH")
    il: Optional[List[CertificationMovieList200ResponseCertificationsILInner]] = Field(default=None, alias="IL")
    hk: Optional[List[CertificationMovieList200ResponseCertificationsHKInner]] = Field(default=None, alias="HK")
    mo: Optional[List[CertificationMovieList200ResponseCertificationsMOInner]] = Field(default=None, alias="MO")
    lv: Optional[List[CertificationMovieList200ResponseCertificationsLVInner]] = Field(default=None, alias="LV")
    lu: Optional[List[CertificationMovieList200ResponseCertificationsLUInner]] = Field(default=None, alias="LU")
    __properties: ClassVar[List[str]] = ["AU", "BG", "BR", "CA", "CA-QC", "DE", "DK", "ES", "FI", "FR", "GB", "HU", "IN", "IT", "LT", "MY", "NL", "NO", "NZ", "PH", "PT", "RU", "SE", "US", "KR", "SK", "TH", "MX", "ID", "TR", "AR", "GR", "TW", "ZA", "SG", "IE", "PR", "JP", "VI", "CH", "IL", "HK", "MO", "LV", "LU"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CertificationMovieList200ResponseCertifications from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in au (list)
        _items = []
        if self.au:
            for _item in self.au:
                if _item:
                    _items.append(_item.to_dict())
            _dict['AU'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in bg (list)
        _items = []
        if self.bg:
            for _item in self.bg:
                if _item:
                    _items.append(_item.to_dict())
            _dict['BG'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in br (list)
        _items = []
        if self.br:
            for _item in self.br:
                if _item:
                    _items.append(_item.to_dict())
            _dict['BR'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ca (list)
        _items = []
        if self.ca:
            for _item in self.ca:
                if _item:
                    _items.append(_item.to_dict())
            _dict['CA'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ca_qc (list)
        _items = []
        if self.ca_qc:
            for _item in self.ca_qc:
                if _item:
                    _items.append(_item.to_dict())
            _dict['CA-QC'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in de (list)
        _items = []
        if self.de:
            for _item in self.de:
                if _item:
                    _items.append(_item.to_dict())
            _dict['DE'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in dk (list)
        _items = []
        if self.dk:
            for _item in self.dk:
                if _item:
                    _items.append(_item.to_dict())
            _dict['DK'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in es (list)
        _items = []
        if self.es:
            for _item in self.es:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ES'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in fi (list)
        _items = []
        if self.fi:
            for _item in self.fi:
                if _item:
                    _items.append(_item.to_dict())
            _dict['FI'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in fr (list)
        _items = []
        if self.fr:
            for _item in self.fr:
                if _item:
                    _items.append(_item.to_dict())
            _dict['FR'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in gb (list)
        _items = []
        if self.gb:
            for _item in self.gb:
                if _item:
                    _items.append(_item.to_dict())
            _dict['GB'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in hu (list)
        _items = []
        if self.hu:
            for _item in self.hu:
                if _item:
                    _items.append(_item.to_dict())
            _dict['HU'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in var_in (list)
        _items = []
        if self.var_in:
            for _item in self.var_in:
                if _item:
                    _items.append(_item.to_dict())
            _dict['IN'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in it (list)
        _items = []
        if self.it:
            for _item in self.it:
                if _item:
                    _items.append(_item.to_dict())
            _dict['IT'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in lt (list)
        _items = []
        if self.lt:
            for _item in self.lt:
                if _item:
                    _items.append(_item.to_dict())
            _dict['LT'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in my (list)
        _items = []
        if self.my:
            for _item in self.my:
                if _item:
                    _items.append(_item.to_dict())
            _dict['MY'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in nl (list)
        _items = []
        if self.nl:
            for _item in self.nl:
                if _item:
                    _items.append(_item.to_dict())
            _dict['NL'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in no (list)
        _items = []
        if self.no:
            for _item in self.no:
                if _item:
                    _items.append(_item.to_dict())
            _dict['NO'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in nz (list)
        _items = []
        if self.nz:
            for _item in self.nz:
                if _item:
                    _items.append(_item.to_dict())
            _dict['NZ'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ph (list)
        _items = []
        if self.ph:
            for _item in self.ph:
                if _item:
                    _items.append(_item.to_dict())
            _dict['PH'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in pt (list)
        _items = []
        if self.pt:
            for _item in self.pt:
                if _item:
                    _items.append(_item.to_dict())
            _dict['PT'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ru (list)
        _items = []
        if self.ru:
            for _item in self.ru:
                if _item:
                    _items.append(_item.to_dict())
            _dict['RU'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in se (list)
        _items = []
        if self.se:
            for _item in self.se:
                if _item:
                    _items.append(_item.to_dict())
            _dict['SE'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in us (list)
        _items = []
        if self.us:
            for _item in self.us:
                if _item:
                    _items.append(_item.to_dict())
            _dict['US'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in kr (list)
        _items = []
        if self.kr:
            for _item in self.kr:
                if _item:
                    _items.append(_item.to_dict())
            _dict['KR'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sk (list)
        _items = []
        if self.sk:
            for _item in self.sk:
                if _item:
                    _items.append(_item.to_dict())
            _dict['SK'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in th (list)
        _items = []
        if self.th:
            for _item in self.th:
                if _item:
                    _items.append(_item.to_dict())
            _dict['TH'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in mx (list)
        _items = []
        if self.mx:
            for _item in self.mx:
                if _item:
                    _items.append(_item.to_dict())
            _dict['MX'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in id (list)
        _items = []
        if self.id:
            for _item in self.id:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ID'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tr (list)
        _items = []
        if self.tr:
            for _item in self.tr:
                if _item:
                    _items.append(_item.to_dict())
            _dict['TR'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ar (list)
        _items = []
        if self.ar:
            for _item in self.ar:
                if _item:
                    _items.append(_item.to_dict())
            _dict['AR'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in gr (list)
        _items = []
        if self.gr:
            for _item in self.gr:
                if _item:
                    _items.append(_item.to_dict())
            _dict['GR'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tw (list)
        _items = []
        if self.tw:
            for _item in self.tw:
                if _item:
                    _items.append(_item.to_dict())
            _dict['TW'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in za (list)
        _items = []
        if self.za:
            for _item in self.za:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ZA'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sg (list)
        _items = []
        if self.sg:
            for _item in self.sg:
                if _item:
                    _items.append(_item.to_dict())
            _dict['SG'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ie (list)
        _items = []
        if self.ie:
            for _item in self.ie:
                if _item:
                    _items.append(_item.to_dict())
            _dict['IE'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in pr (list)
        _items = []
        if self.pr:
            for _item in self.pr:
                if _item:
                    _items.append(_item.to_dict())
            _dict['PR'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in jp (list)
        _items = []
        if self.jp:
            for _item in self.jp:
                if _item:
                    _items.append(_item.to_dict())
            _dict['JP'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in vi (list)
        _items = []
        if self.vi:
            for _item in self.vi:
                if _item:
                    _items.append(_item.to_dict())
            _dict['VI'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ch (list)
        _items = []
        if self.ch:
            for _item in self.ch:
                if _item:
                    _items.append(_item.to_dict())
            _dict['CH'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in il (list)
        _items = []
        if self.il:
            for _item in self.il:
                if _item:
                    _items.append(_item.to_dict())
            _dict['IL'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in hk (list)
        _items = []
        if self.hk:
            for _item in self.hk:
                if _item:
                    _items.append(_item.to_dict())
            _dict['HK'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in mo (list)
        _items = []
        if self.mo:
            for _item in self.mo:
                if _item:
                    _items.append(_item.to_dict())
            _dict['MO'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in lv (list)
        _items = []
        if self.lv:
            for _item in self.lv:
                if _item:
                    _items.append(_item.to_dict())
            _dict['LV'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in lu (list)
        _items = []
        if self.lu:
            for _item in self.lu:
                if _item:
                    _items.append(_item.to_dict())
            _dict['LU'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CertificationMovieList200ResponseCertifications from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AU": [CertificationMovieList200ResponseCertificationsAUInner.from_dict(_item) for _item in obj["AU"]] if obj.get("AU") is not None else None,
            "BG": [CertificationMovieList200ResponseCertificationsBGInner.from_dict(_item) for _item in obj["BG"]] if obj.get("BG") is not None else None,
            "BR": [CertificationMovieList200ResponseCertificationsBRInner.from_dict(_item) for _item in obj["BR"]] if obj.get("BR") is not None else None,
            "CA": [CertificationMovieList200ResponseCertificationsCAInner.from_dict(_item) for _item in obj["CA"]] if obj.get("CA") is not None else None,
            "CA-QC": [CertificationMovieList200ResponseCertificationsCAQCInner.from_dict(_item) for _item in obj["CA-QC"]] if obj.get("CA-QC") is not None else None,
            "DE": [CertificationMovieList200ResponseCertificationsDEInner.from_dict(_item) for _item in obj["DE"]] if obj.get("DE") is not None else None,
            "DK": [CertificationMovieList200ResponseCertificationsCAQCInner.from_dict(_item) for _item in obj["DK"]] if obj.get("DK") is not None else None,
            "ES": [CertificationMovieList200ResponseCertificationsESInner.from_dict(_item) for _item in obj["ES"]] if obj.get("ES") is not None else None,
            "FI": [CertificationMovieList200ResponseCertificationsFIInner.from_dict(_item) for _item in obj["FI"]] if obj.get("FI") is not None else None,
            "FR": [CertificationMovieList200ResponseCertificationsFRInner.from_dict(_item) for _item in obj["FR"]] if obj.get("FR") is not None else None,
            "GB": [CertificationMovieList200ResponseCertificationsGBInner.from_dict(_item) for _item in obj["GB"]] if obj.get("GB") is not None else None,
            "HU": [CertificationMovieList200ResponseCertificationsHUInner.from_dict(_item) for _item in obj["HU"]] if obj.get("HU") is not None else None,
            "IN": [CertificationMovieList200ResponseCertificationsINInner.from_dict(_item) for _item in obj["IN"]] if obj.get("IN") is not None else None,
            "IT": [CertificationMovieList200ResponseCertificationsCAQCInner.from_dict(_item) for _item in obj["IT"]] if obj.get("IT") is not None else None,
            "LT": [CertificationMovieList200ResponseCertificationsCAQCInner.from_dict(_item) for _item in obj["LT"]] if obj.get("LT") is not None else None,
            "MY": [CertificationMovieList200ResponseCertificationsCAQCInner.from_dict(_item) for _item in obj["MY"]] if obj.get("MY") is not None else None,
            "NL": [CertificationMovieList200ResponseCertificationsNLInner.from_dict(_item) for _item in obj["NL"]] if obj.get("NL") is not None else None,
            "NO": [CertificationMovieList200ResponseCertificationsNOInner.from_dict(_item) for _item in obj["NO"]] if obj.get("NO") is not None else None,
            "NZ": [CertificationMovieList200ResponseCertificationsNZInner.from_dict(_item) for _item in obj["NZ"]] if obj.get("NZ") is not None else None,
            "PH": [CertificationMovieList200ResponseCertificationsCAQCInner.from_dict(_item) for _item in obj["PH"]] if obj.get("PH") is not None else None,
            "PT": [CertificationMovieList200ResponseCertificationsPTInner.from_dict(_item) for _item in obj["PT"]] if obj.get("PT") is not None else None,
            "RU": [CertificationMovieList200ResponseCertificationsRUInner.from_dict(_item) for _item in obj["RU"]] if obj.get("RU") is not None else None,
            "SE": [CertificationMovieList200ResponseCertificationsSEInner.from_dict(_item) for _item in obj["SE"]] if obj.get("SE") is not None else None,
            "US": [CertificationMovieList200ResponseCertificationsUSInner.from_dict(_item) for _item in obj["US"]] if obj.get("US") is not None else None,
            "KR": [CertificationMovieList200ResponseCertificationsKRInner.from_dict(_item) for _item in obj["KR"]] if obj.get("KR") is not None else None,
            "SK": [CertificationMovieList200ResponseCertificationsSKInner.from_dict(_item) for _item in obj["SK"]] if obj.get("SK") is not None else None,
            "TH": [CertificationMovieList200ResponseCertificationsTHInner.from_dict(_item) for _item in obj["TH"]] if obj.get("TH") is not None else None,
            "MX": [CertificationMovieList200ResponseCertificationsMXInner.from_dict(_item) for _item in obj["MX"]] if obj.get("MX") is not None else None,
            "ID": [CertificationMovieList200ResponseCertificationsIDInner.from_dict(_item) for _item in obj["ID"]] if obj.get("ID") is not None else None,
            "TR": [CertificationMovieList200ResponseCertificationsTRInner.from_dict(_item) for _item in obj["TR"]] if obj.get("TR") is not None else None,
            "AR": [CertificationMovieList200ResponseCertificationsARInner.from_dict(_item) for _item in obj["AR"]] if obj.get("AR") is not None else None,
            "GR": [CertificationMovieList200ResponseCertificationsGRInner.from_dict(_item) for _item in obj["GR"]] if obj.get("GR") is not None else None,
            "TW": [CertificationMovieList200ResponseCertificationsTWInner.from_dict(_item) for _item in obj["TW"]] if obj.get("TW") is not None else None,
            "ZA": [CertificationMovieList200ResponseCertificationsZAInner.from_dict(_item) for _item in obj["ZA"]] if obj.get("ZA") is not None else None,
            "SG": [CertificationMovieList200ResponseCertificationsSGInner.from_dict(_item) for _item in obj["SG"]] if obj.get("SG") is not None else None,
            "IE": [CertificationMovieList200ResponseCertificationsIEInner.from_dict(_item) for _item in obj["IE"]] if obj.get("IE") is not None else None,
            "PR": [CertificationMovieList200ResponseCertificationsPRInner.from_dict(_item) for _item in obj["PR"]] if obj.get("PR") is not None else None,
            "JP": [CertificationMovieList200ResponseCertificationsJPInner.from_dict(_item) for _item in obj["JP"]] if obj.get("JP") is not None else None,
            "VI": [CertificationMovieList200ResponseCertificationsVIInner.from_dict(_item) for _item in obj["VI"]] if obj.get("VI") is not None else None,
            "CH": [CertificationMovieList200ResponseCertificationsCHInner.from_dict(_item) for _item in obj["CH"]] if obj.get("CH") is not None else None,
            "IL": [CertificationMovieList200ResponseCertificationsILInner.from_dict(_item) for _item in obj["IL"]] if obj.get("IL") is not None else None,
            "HK": [CertificationMovieList200ResponseCertificationsHKInner.from_dict(_item) for _item in obj["HK"]] if obj.get("HK") is not None else None,
            "MO": [CertificationMovieList200ResponseCertificationsMOInner.from_dict(_item) for _item in obj["MO"]] if obj.get("MO") is not None else None,
            "LV": [CertificationMovieList200ResponseCertificationsLVInner.from_dict(_item) for _item in obj["LV"]] if obj.get("LV") is not None else None,
            "LU": [CertificationMovieList200ResponseCertificationsLUInner.from_dict(_item) for _item in obj["LU"]] if obj.get("LU") is not None else None
        })
        return _obj


