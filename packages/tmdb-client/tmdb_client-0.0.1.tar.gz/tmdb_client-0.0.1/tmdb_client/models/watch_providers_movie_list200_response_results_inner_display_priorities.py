# coding: utf-8

"""
    TMDB API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class WatchProvidersMovieList200ResponseResultsInnerDisplayPriorities(BaseModel):
    """
    WatchProvidersMovieList200ResponseResultsInnerDisplayPriorities
    """ # noqa: E501
    ca: Optional[StrictInt] = Field(default=0, alias="CA")
    ae: Optional[StrictInt] = Field(default=0, alias="AE")
    ar: Optional[StrictInt] = Field(default=0, alias="AR")
    at: Optional[StrictInt] = Field(default=0, alias="AT")
    au: Optional[StrictInt] = Field(default=0, alias="AU")
    be: Optional[StrictInt] = Field(default=0, alias="BE")
    bo: Optional[StrictInt] = Field(default=0, alias="BO")
    br: Optional[StrictInt] = Field(default=0, alias="BR")
    bg: Optional[StrictInt] = Field(default=0, alias="BG")
    ch: Optional[StrictInt] = Field(default=0, alias="CH")
    cl: Optional[StrictInt] = Field(default=0, alias="CL")
    co: Optional[StrictInt] = Field(default=0, alias="CO")
    cr: Optional[StrictInt] = Field(default=0, alias="CR")
    cz: Optional[StrictInt] = Field(default=0, alias="CZ")
    de: Optional[StrictInt] = Field(default=0, alias="DE")
    dk: Optional[StrictInt] = Field(default=0, alias="DK")
    ec: Optional[StrictInt] = Field(default=0, alias="EC")
    ee: Optional[StrictInt] = Field(default=0, alias="EE")
    eg: Optional[StrictInt] = Field(default=0, alias="EG")
    es: Optional[StrictInt] = Field(default=0, alias="ES")
    fi: Optional[StrictInt] = Field(default=0, alias="FI")
    fr: Optional[StrictInt] = Field(default=0, alias="FR")
    gb: Optional[StrictInt] = Field(default=0, alias="GB")
    gr: Optional[StrictInt] = Field(default=0, alias="GR")
    gt: Optional[StrictInt] = Field(default=0, alias="GT")
    hk: Optional[StrictInt] = Field(default=0, alias="HK")
    hn: Optional[StrictInt] = Field(default=0, alias="HN")
    hu: Optional[StrictInt] = Field(default=0, alias="HU")
    id: Optional[StrictInt] = Field(default=0, alias="ID")
    ie: Optional[StrictInt] = Field(default=0, alias="IE")
    var_in: Optional[StrictInt] = Field(default=0, alias="IN")
    it: Optional[StrictInt] = Field(default=0, alias="IT")
    jp: Optional[StrictInt] = Field(default=0, alias="JP")
    lt: Optional[StrictInt] = Field(default=0, alias="LT")
    lv: Optional[StrictInt] = Field(default=0, alias="LV")
    mx: Optional[StrictInt] = Field(default=0, alias="MX")
    my: Optional[StrictInt] = Field(default=0, alias="MY")
    nl: Optional[StrictInt] = Field(default=0, alias="NL")
    no: Optional[StrictInt] = Field(default=0, alias="NO")
    nz: Optional[StrictInt] = Field(default=0, alias="NZ")
    pe: Optional[StrictInt] = Field(default=0, alias="PE")
    ph: Optional[StrictInt] = Field(default=0, alias="PH")
    pl: Optional[StrictInt] = Field(default=0, alias="PL")
    pt: Optional[StrictInt] = Field(default=0, alias="PT")
    py: Optional[StrictInt] = Field(default=0, alias="PY")
    ru: Optional[StrictInt] = Field(default=0, alias="RU")
    sa: Optional[StrictInt] = Field(default=0, alias="SA")
    se: Optional[StrictInt] = Field(default=0, alias="SE")
    sg: Optional[StrictInt] = Field(default=0, alias="SG")
    sk: Optional[StrictInt] = Field(default=0, alias="SK")
    th: Optional[StrictInt] = Field(default=0, alias="TH")
    tr: Optional[StrictInt] = Field(default=0, alias="TR")
    tw: Optional[StrictInt] = Field(default=0, alias="TW")
    us: Optional[StrictInt] = Field(default=0, alias="US")
    ve: Optional[StrictInt] = Field(default=0, alias="VE")
    za: Optional[StrictInt] = Field(default=0, alias="ZA")
    si: Optional[StrictInt] = Field(default=0, alias="SI")
    cv: Optional[StrictInt] = Field(default=0, alias="CV")
    gh: Optional[StrictInt] = Field(default=0, alias="GH")
    mu: Optional[StrictInt] = Field(default=0, alias="MU")
    mz: Optional[StrictInt] = Field(default=0, alias="MZ")
    ug: Optional[StrictInt] = Field(default=0, alias="UG")
    il: Optional[StrictInt] = Field(default=0, alias="IL")
    __properties: ClassVar[List[str]] = ["CA", "AE", "AR", "AT", "AU", "BE", "BO", "BR", "BG", "CH", "CL", "CO", "CR", "CZ", "DE", "DK", "EC", "EE", "EG", "ES", "FI", "FR", "GB", "GR", "GT", "HK", "HN", "HU", "ID", "IE", "IN", "IT", "JP", "LT", "LV", "MX", "MY", "NL", "NO", "NZ", "PE", "PH", "PL", "PT", "PY", "RU", "SA", "SE", "SG", "SK", "TH", "TR", "TW", "US", "VE", "ZA", "SI", "CV", "GH", "MU", "MZ", "UG", "IL"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WatchProvidersMovieList200ResponseResultsInnerDisplayPriorities from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WatchProvidersMovieList200ResponseResultsInnerDisplayPriorities from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CA": obj.get("CA") if obj.get("CA") is not None else 0,
            "AE": obj.get("AE") if obj.get("AE") is not None else 0,
            "AR": obj.get("AR") if obj.get("AR") is not None else 0,
            "AT": obj.get("AT") if obj.get("AT") is not None else 0,
            "AU": obj.get("AU") if obj.get("AU") is not None else 0,
            "BE": obj.get("BE") if obj.get("BE") is not None else 0,
            "BO": obj.get("BO") if obj.get("BO") is not None else 0,
            "BR": obj.get("BR") if obj.get("BR") is not None else 0,
            "BG": obj.get("BG") if obj.get("BG") is not None else 0,
            "CH": obj.get("CH") if obj.get("CH") is not None else 0,
            "CL": obj.get("CL") if obj.get("CL") is not None else 0,
            "CO": obj.get("CO") if obj.get("CO") is not None else 0,
            "CR": obj.get("CR") if obj.get("CR") is not None else 0,
            "CZ": obj.get("CZ") if obj.get("CZ") is not None else 0,
            "DE": obj.get("DE") if obj.get("DE") is not None else 0,
            "DK": obj.get("DK") if obj.get("DK") is not None else 0,
            "EC": obj.get("EC") if obj.get("EC") is not None else 0,
            "EE": obj.get("EE") if obj.get("EE") is not None else 0,
            "EG": obj.get("EG") if obj.get("EG") is not None else 0,
            "ES": obj.get("ES") if obj.get("ES") is not None else 0,
            "FI": obj.get("FI") if obj.get("FI") is not None else 0,
            "FR": obj.get("FR") if obj.get("FR") is not None else 0,
            "GB": obj.get("GB") if obj.get("GB") is not None else 0,
            "GR": obj.get("GR") if obj.get("GR") is not None else 0,
            "GT": obj.get("GT") if obj.get("GT") is not None else 0,
            "HK": obj.get("HK") if obj.get("HK") is not None else 0,
            "HN": obj.get("HN") if obj.get("HN") is not None else 0,
            "HU": obj.get("HU") if obj.get("HU") is not None else 0,
            "ID": obj.get("ID") if obj.get("ID") is not None else 0,
            "IE": obj.get("IE") if obj.get("IE") is not None else 0,
            "IN": obj.get("IN") if obj.get("IN") is not None else 0,
            "IT": obj.get("IT") if obj.get("IT") is not None else 0,
            "JP": obj.get("JP") if obj.get("JP") is not None else 0,
            "LT": obj.get("LT") if obj.get("LT") is not None else 0,
            "LV": obj.get("LV") if obj.get("LV") is not None else 0,
            "MX": obj.get("MX") if obj.get("MX") is not None else 0,
            "MY": obj.get("MY") if obj.get("MY") is not None else 0,
            "NL": obj.get("NL") if obj.get("NL") is not None else 0,
            "NO": obj.get("NO") if obj.get("NO") is not None else 0,
            "NZ": obj.get("NZ") if obj.get("NZ") is not None else 0,
            "PE": obj.get("PE") if obj.get("PE") is not None else 0,
            "PH": obj.get("PH") if obj.get("PH") is not None else 0,
            "PL": obj.get("PL") if obj.get("PL") is not None else 0,
            "PT": obj.get("PT") if obj.get("PT") is not None else 0,
            "PY": obj.get("PY") if obj.get("PY") is not None else 0,
            "RU": obj.get("RU") if obj.get("RU") is not None else 0,
            "SA": obj.get("SA") if obj.get("SA") is not None else 0,
            "SE": obj.get("SE") if obj.get("SE") is not None else 0,
            "SG": obj.get("SG") if obj.get("SG") is not None else 0,
            "SK": obj.get("SK") if obj.get("SK") is not None else 0,
            "TH": obj.get("TH") if obj.get("TH") is not None else 0,
            "TR": obj.get("TR") if obj.get("TR") is not None else 0,
            "TW": obj.get("TW") if obj.get("TW") is not None else 0,
            "US": obj.get("US") if obj.get("US") is not None else 0,
            "VE": obj.get("VE") if obj.get("VE") is not None else 0,
            "ZA": obj.get("ZA") if obj.get("ZA") is not None else 0,
            "SI": obj.get("SI") if obj.get("SI") is not None else 0,
            "CV": obj.get("CV") if obj.get("CV") is not None else 0,
            "GH": obj.get("GH") if obj.get("GH") is not None else 0,
            "MU": obj.get("MU") if obj.get("MU") is not None else 0,
            "MZ": obj.get("MZ") if obj.get("MZ") is not None else 0,
            "UG": obj.get("UG") if obj.get("UG") is not None else 0,
            "IL": obj.get("IL") if obj.get("IL") is not None else 0
        })
        return _obj


