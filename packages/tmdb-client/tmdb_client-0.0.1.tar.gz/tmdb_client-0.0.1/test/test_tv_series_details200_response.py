# coding: utf-8

"""
    TMDB API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from tmdb_client.models.tv_series_details200_response import TvSeriesDetails200Response

class TestTvSeriesDetails200Response(unittest.TestCase):
    """TvSeriesDetails200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TvSeriesDetails200Response:
        """Test TvSeriesDetails200Response
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TvSeriesDetails200Response`
        """
        model = TvSeriesDetails200Response()
        if include_optional:
            return TvSeriesDetails200Response(
                adult = False,
                backdrop_path = '/6LWy0jvMpmjoS9fojNgHIKoWL05.jpg',
                created_by = [
                    tmdb_client.models.tv_series_details_200_response_created_by_inner.tv_series_details_200_response_created_by_inner(
                        id = 9813, 
                        credit_id = '5256c8c219c2956ff604858a', 
                        name = 'David Benioff', 
                        gender = 2, 
                        profile_path = '/xvNN5huL0X8yJ7h3IZfGG4O2zBD.jpg', )
                    ],
                episode_run_time = [
                    60
                    ],
                first_air_date = '2011-04-17',
                genres = [
                    tmdb_client.models.tv_series_details_200_response_genres_inner.tv_series_details_200_response_genres_inner(
                        id = 10765, 
                        name = 'Sci-Fi & Fantasy', )
                    ],
                homepage = 'http://www.hbo.com/game-of-thrones',
                id = 1399,
                in_production = False,
                languages = [
                    'en'
                    ],
                last_air_date = '2019-05-19',
                last_episode_to_air = tmdb_client.models.tv_series_details_200_response_last_episode_to_air.tv_series_details_200_response_last_episode_to_air(
                    id = 1551830, 
                    name = 'The Iron Throne', 
                    overview = 'In the aftermath of the devastating attack on King's Landing, Daenerys must face the survivors.', 
                    vote_average = 4.809, 
                    vote_count = 241, 
                    air_date = '2019-05-19', 
                    episode_number = 6, 
                    production_code = '806', 
                    runtime = 80, 
                    season_number = 8, 
                    show_id = 1399, 
                    still_path = '/zBi2O5EJfgTS6Ae0HdAYLm9o2nf.jpg', ),
                name = 'Game of Thrones',
                next_episode_to_air = None,
                networks = [
                    tmdb_client.models.tv_series_details_200_response_networks_inner.tv_series_details_200_response_networks_inner(
                        id = 49, 
                        logo_path = '/tuomPhY2UtuPTqqFnKMVHvSb724.png', 
                        name = 'HBO', 
                        origin_country = 'US', )
                    ],
                number_of_episodes = 73,
                number_of_seasons = 8,
                origin_country = [
                    'US'
                    ],
                original_language = 'en',
                original_name = 'Game of Thrones',
                overview = 'Seven noble families fight for control of the mythical land of Westeros. Friction between the houses leads to full-scale war. All while a very ancient evil awakens in the farthest north. Amidst the war, a neglected military order of misfits, the Night's Watch, is all that stands between the realms of men and icy horrors beyond.',
                popularity = 346.098,
                poster_path = '/1XS1oqL89opfnbLl8WnZY1O1uJx.jpg',
                production_companies = [
                    tmdb_client.models.tv_series_details_200_response_production_companies_inner.tv_series_details_200_response_production_companies_inner(
                        id = 76043, 
                        logo_path = '/9RO2vbQ67otPrBLXCaC8UMp3Qat.png', 
                        name = 'Revolution Sun Studios', 
                        origin_country = 'US', )
                    ],
                production_countries = [
                    tmdb_client.models.tv_series_details_200_response_production_countries_inner.tv_series_details_200_response_production_countries_inner(
                        iso_3166_1 = 'GB', 
                        name = 'United Kingdom', )
                    ],
                seasons = [
                    tmdb_client.models.tv_series_details_200_response_seasons_inner.tv_series_details_200_response_seasons_inner(
                        air_date = '2010-12-05', 
                        episode_count = 272, 
                        id = 3627, 
                        name = 'Specials', 
                        overview = '', 
                        poster_path = '/kMTcwNRfFKCZ0O2OaBZS0nZ2AIe.jpg', 
                        season_number = 0, 
                        vote_average = 0, )
                    ],
                spoken_languages = [
                    tmdb_client.models.movie_details_200_response_spoken_languages_inner.movie_details_200_response_spoken_languages_inner(
                        english_name = 'English', 
                        iso_639_1 = 'en', 
                        name = 'English', )
                    ],
                status = 'Ended',
                tagline = 'Winter Is Coming',
                type = 'Scripted',
                vote_average = 8.438,
                vote_count = 21390
            )
        else:
            return TvSeriesDetails200Response(
        )
        """

    def testTvSeriesDetails200Response(self):
        """Test TvSeriesDetails200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
