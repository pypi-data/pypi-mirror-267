#if !defined (BAD_SPLITTING_TREE)
#   define BAD_SPLITTING_TREE 1

#   include "bad_common.h"

BEGIN_C_DECLS

/*
 * texinfo: bad_typeof_splitting_edge
 * This data type permits to tag an edge in the splitting tree
 * generated by a differential elimination algorithm.
 * The nodes connected by an edge are quadruples.
 *
 * The type @code{bad_first_edge} is particular: 
 * quadruples which hold that type are ``roots'' of
 * splitting tree and handled specifically by differential
 * elimination methods.
 */

enum bad_typeof_splitting_edge
{
// displayed as 'A'
  bad_any_edge,
// displayed as 'I' - starting edge
  bad_first_edge,
// displayed as 'Z' - reduction to zero
  bad_redzero_edge,
// displayed as 'F' - splitting due to a plain factorization
  bad_factor_edge,
// displayed as 'R' - splitting due to a factorization arising
//                    from a regularization process
  bad_regularisation_edge,
// displayed as 'S' - splitting on the initial or the separant
//                    of a polynomial
  bad_inisep_edge,
// displayed as 'E' - splitting arising while computing gcd over
//                    algebraic extensions
  bad_euclid_edge,
// displayed as 'C' - edge leading to a call to reg_characteristic
  bad_reg_characteristic_edge
};

/*
 * texinfo: bad_splitting_edge
 * This data type permits to describe an edge of the splitting tree
 * generated by a differential elimination algorithm. Edges are
 * stored both in splitting trees and in quadruples.
 */

struct bad_splitting_edge
{
// the number of the starting node
  ba0_int_p src;
// the number of the target node
  ba0_int_p dst;
// the type of edge
  enum bad_typeof_splitting_edge type;
};


struct bad_tableof_splitting_edge
{
  ba0_int_p alloc;
  ba0_int_p size;
  struct bad_splitting_edge **tab;
};


/*
 * texinfo: bad_splitting_tree
 * This data type describes the splitting tree generated by a
 * differential elimination algorithm as a table (i.e. a set)
 * of edges. 
 *
 * The edges of a splitting tree have pairwise distinct @code{src}
 * fields (otherwise, they would not be trees).
 *
 * Splitting trees are not stored in quadruples.
 * They rather are local variables to elimination algorithms.
 */

struct bad_splitting_tree
{
// if false, the splitting tree is not generated
  bool active;
// the sequence of edges leading to the current node
  struct bad_tableof_splitting_edge edges;
// the first free node number
  ba0_int_p node_number;
};


extern BAD_DLL void bad_init_splitting_edge (
    struct bad_splitting_edge *);

extern BAD_DLL struct bad_splitting_edge *bad_new_splitting_edge (
    void);

extern BAD_DLL void bad_set_splitting_edge (
    struct bad_splitting_edge *,
    struct bad_splitting_edge *);

extern BAD_DLL void bad_set_node_type_splitting_edge (
    struct bad_splitting_edge *,
    ba0_int_p,
    ba0_int_p,
    enum bad_typeof_splitting_edge);

extern BAD_DLL ba0_scanf_function bad_scanf_splitting_edge;

extern BAD_DLL ba0_printf_function bad_printf_splitting_edge;

extern BAD_DLL ba0_garbage1_function bad_garbage1_splitting_edge;

extern BAD_DLL ba0_garbage2_function bad_garbage2_splitting_edge;

extern BAD_DLL ba0_copy_function bad_copy_splitting_edge;

extern BAD_DLL void bad_init_splitting_tree (
    struct bad_splitting_tree *);

extern BAD_DLL struct bad_splitting_tree *bad_new_splitting_tree (
    void);

extern BAD_DLL void bad_activate_splitting_tree (
    struct bad_splitting_tree *);

extern BAD_DLL bool bad_is_active_splitting_tree (
    struct bad_splitting_tree *);

extern BAD_DLL void bad_set_splitting_tree (
    struct bad_splitting_tree *,
    struct bad_splitting_tree *);

extern BAD_DLL ba0_int_p bad_next_node_splitting_tree (
    struct bad_splitting_tree *);

extern BAD_DLL void bad_append_edge_splitting_tree (
    struct bad_splitting_tree *,
    struct bad_splitting_tree *,
    ba0_int_p,
    ba0_int_p,
    enum bad_typeof_splitting_edge);

extern BAD_DLL void bad_dot_splitting_tree (
    struct bad_splitting_tree *);

extern BAD_DLL ba0_scanf_function bad_scanf_splitting_tree;

extern BAD_DLL ba0_printf_function bad_printf_splitting_tree;

extern BAD_DLL ba0_garbage1_function bad_garbage1_splitting_tree;

extern BAD_DLL ba0_garbage2_function bad_garbage2_splitting_tree;

extern BAD_DLL ba0_copy_function bad_copy_splitting_tree;

END_C_DECLS
#endif
