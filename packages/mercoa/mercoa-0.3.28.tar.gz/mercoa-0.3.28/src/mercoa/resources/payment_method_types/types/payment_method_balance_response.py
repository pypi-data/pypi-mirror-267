# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from .currency_code import CurrencyCode
from .payment_method_balance_status import PaymentMethodBalanceStatus

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class PaymentMethodBalanceResponse(pydantic.BaseModel):
    available_balance: float = pydantic.Field(alias="availableBalance")
    currency: CurrencyCode
    status: PaymentMethodBalanceStatus = pydantic.Field(
        description="If the status is UNAVAILABLE, the account does not support this operation. If the status is ERROR, the account may need to be re-linked with Plaid."
    )
    updated_at: typing.Optional[dt.datetime] = pydantic.Field(
        alias="updatedAt",
        default=None,
        description="The time the balance was last updated. Will be null if the balance has never been updated.",
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
