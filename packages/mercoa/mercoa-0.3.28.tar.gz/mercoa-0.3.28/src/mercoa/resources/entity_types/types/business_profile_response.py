# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from ...commons.types.address import Address
from ...commons.types.phone_number import PhoneNumber
from .business_type import BusinessType

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class BusinessProfileResponse(pydantic.BaseModel):
    """
    from mercoa import Address, BusinessProfileResponse, BusinessType, PhoneNumber

    BusinessProfileResponse(
        email="customer@acme.com",
        legal_business_name="Acme Inc.",
        business_type=BusinessType.LLC,
        phone=PhoneNumber(
            country_code="1",
            number="4155551234",
        ),
        address=Address(
            address_line_1="123 Main St",
            city="San Francisco",
            state_or_province="CA",
            postal_code="94105",
            country="US",
        ),
        tax_id_provided=True,
        owners_provided=True,
    )
    """

    email: typing.Optional[str] = None
    legal_business_name: str = pydantic.Field(alias="legalBusinessName")
    business_type: typing.Optional[BusinessType] = pydantic.Field(alias="businessType", default=None)
    phone: typing.Optional[PhoneNumber] = None
    doing_business_as: typing.Optional[str] = pydantic.Field(alias="doingBusinessAs", default=None)
    website: typing.Optional[str] = None
    description: typing.Optional[str] = None
    address: typing.Optional[Address] = None
    owners_provided: typing.Optional[bool] = pydantic.Field(
        alias="ownersProvided",
        default=None,
        description="True if all representatives have been provided for this business.",
    )
    tax_id_provided: bool = pydantic.Field(alias="taxIDProvided")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
