# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from .bank_account_check_options import BankAccountCheckOptions
from .payment_method_base_request import PaymentMethodBaseRequest
from .plaid_link_request import PlaidLinkRequest

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class BankAccountUpdateRequest(PaymentMethodBaseRequest):
    account_name: typing.Optional[str] = pydantic.Field(alias="accountName", default=None)
    plaid: typing.Optional[PlaidLinkRequest] = pydantic.Field(
        default=None, description="If provided, will update a bank account using Plaid Link"
    )
    check_options: typing.Optional[BankAccountCheckOptions] = pydantic.Field(
        alias="checkOptions",
        default=None,
        description="If this bank account supports check printing, use this to enable check printing and set the check options. Checks will be printed directly from the bank account.",
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
