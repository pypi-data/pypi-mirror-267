# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['TeamArgs', 'Team']

@pulumi.input_type
class TeamArgs:
    def __init__(__self__, *,
                 organisation: pulumi.Input[str],
                 can_create_repos: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 include_all_repositories: Optional[pulumi.Input[bool]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 permission: Optional[pulumi.Input[str]] = None,
                 repositories: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 units: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Team resource.
        :param pulumi.Input[str] organisation: The organisation which this Team is part of.
        :param pulumi.Input[bool] can_create_repos: Flag if the Teams members should be able to create Rpositories in the Organisation
        :param pulumi.Input[str] description: Description of the Team
        :param pulumi.Input[bool] include_all_repositories: Flag if the Teams members should have access to all Repositories in the Organisation
        :param pulumi.Input[Sequence[pulumi.Input[str]]] members: List of Users that should be part of this team
        :param pulumi.Input[str] name: Name of the Team
        :param pulumi.Input[str] permission: Permissions associated with this Team
               Can be `none`, `read`, `write`, `admin` or `owner`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] repositories: List of Repositories that should be part of this team
        :param pulumi.Input[str] units: List of types of Repositories that should be allowed to be created from Team members.
               Can be `repo.code`, `repo.issues`, `repo.ext_issues`, `repo.wiki`, `repo.pulls`, `repo.releases`, `repo.projects` and/or `repo.ext_wiki`
        """
        pulumi.set(__self__, "organisation", organisation)
        if can_create_repos is not None:
            pulumi.set(__self__, "can_create_repos", can_create_repos)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if include_all_repositories is not None:
            pulumi.set(__self__, "include_all_repositories", include_all_repositories)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if permission is not None:
            pulumi.set(__self__, "permission", permission)
        if repositories is not None:
            pulumi.set(__self__, "repositories", repositories)
        if units is not None:
            pulumi.set(__self__, "units", units)

    @property
    @pulumi.getter
    def organisation(self) -> pulumi.Input[str]:
        """
        The organisation which this Team is part of.
        """
        return pulumi.get(self, "organisation")

    @organisation.setter
    def organisation(self, value: pulumi.Input[str]):
        pulumi.set(self, "organisation", value)

    @property
    @pulumi.getter(name="canCreateRepos")
    def can_create_repos(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag if the Teams members should be able to create Rpositories in the Organisation
        """
        return pulumi.get(self, "can_create_repos")

    @can_create_repos.setter
    def can_create_repos(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_create_repos", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the Team
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="includeAllRepositories")
    def include_all_repositories(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag if the Teams members should have access to all Repositories in the Organisation
        """
        return pulumi.get(self, "include_all_repositories")

    @include_all_repositories.setter
    def include_all_repositories(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_all_repositories", value)

    @property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of Users that should be part of this team
        """
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "members", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Team
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def permission(self) -> Optional[pulumi.Input[str]]:
        """
        Permissions associated with this Team
        Can be `none`, `read`, `write`, `admin` or `owner`
        """
        return pulumi.get(self, "permission")

    @permission.setter
    def permission(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "permission", value)

    @property
    @pulumi.getter
    def repositories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of Repositories that should be part of this team
        """
        return pulumi.get(self, "repositories")

    @repositories.setter
    def repositories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "repositories", value)

    @property
    @pulumi.getter
    def units(self) -> Optional[pulumi.Input[str]]:
        """
        List of types of Repositories that should be allowed to be created from Team members.
        Can be `repo.code`, `repo.issues`, `repo.ext_issues`, `repo.wiki`, `repo.pulls`, `repo.releases`, `repo.projects` and/or `repo.ext_wiki`
        """
        return pulumi.get(self, "units")

    @units.setter
    def units(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "units", value)


@pulumi.input_type
class _TeamState:
    def __init__(__self__, *,
                 can_create_repos: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 include_all_repositories: Optional[pulumi.Input[bool]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organisation: Optional[pulumi.Input[str]] = None,
                 permission: Optional[pulumi.Input[str]] = None,
                 repositories: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 units: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Team resources.
        :param pulumi.Input[bool] can_create_repos: Flag if the Teams members should be able to create Rpositories in the Organisation
        :param pulumi.Input[str] description: Description of the Team
        :param pulumi.Input[bool] include_all_repositories: Flag if the Teams members should have access to all Repositories in the Organisation
        :param pulumi.Input[Sequence[pulumi.Input[str]]] members: List of Users that should be part of this team
        :param pulumi.Input[str] name: Name of the Team
        :param pulumi.Input[str] organisation: The organisation which this Team is part of.
        :param pulumi.Input[str] permission: Permissions associated with this Team
               Can be `none`, `read`, `write`, `admin` or `owner`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] repositories: List of Repositories that should be part of this team
        :param pulumi.Input[str] units: List of types of Repositories that should be allowed to be created from Team members.
               Can be `repo.code`, `repo.issues`, `repo.ext_issues`, `repo.wiki`, `repo.pulls`, `repo.releases`, `repo.projects` and/or `repo.ext_wiki`
        """
        if can_create_repos is not None:
            pulumi.set(__self__, "can_create_repos", can_create_repos)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if include_all_repositories is not None:
            pulumi.set(__self__, "include_all_repositories", include_all_repositories)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organisation is not None:
            pulumi.set(__self__, "organisation", organisation)
        if permission is not None:
            pulumi.set(__self__, "permission", permission)
        if repositories is not None:
            pulumi.set(__self__, "repositories", repositories)
        if units is not None:
            pulumi.set(__self__, "units", units)

    @property
    @pulumi.getter(name="canCreateRepos")
    def can_create_repos(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag if the Teams members should be able to create Rpositories in the Organisation
        """
        return pulumi.get(self, "can_create_repos")

    @can_create_repos.setter
    def can_create_repos(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_create_repos", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the Team
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="includeAllRepositories")
    def include_all_repositories(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag if the Teams members should have access to all Repositories in the Organisation
        """
        return pulumi.get(self, "include_all_repositories")

    @include_all_repositories.setter
    def include_all_repositories(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_all_repositories", value)

    @property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of Users that should be part of this team
        """
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "members", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Team
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def organisation(self) -> Optional[pulumi.Input[str]]:
        """
        The organisation which this Team is part of.
        """
        return pulumi.get(self, "organisation")

    @organisation.setter
    def organisation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organisation", value)

    @property
    @pulumi.getter
    def permission(self) -> Optional[pulumi.Input[str]]:
        """
        Permissions associated with this Team
        Can be `none`, `read`, `write`, `admin` or `owner`
        """
        return pulumi.get(self, "permission")

    @permission.setter
    def permission(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "permission", value)

    @property
    @pulumi.getter
    def repositories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of Repositories that should be part of this team
        """
        return pulumi.get(self, "repositories")

    @repositories.setter
    def repositories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "repositories", value)

    @property
    @pulumi.getter
    def units(self) -> Optional[pulumi.Input[str]]:
        """
        List of types of Repositories that should be allowed to be created from Team members.
        Can be `repo.code`, `repo.issues`, `repo.ext_issues`, `repo.wiki`, `repo.pulls`, `repo.releases`, `repo.projects` and/or `repo.ext_wiki`
        """
        return pulumi.get(self, "units")

    @units.setter
    def units(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "units", value)


class Team(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 can_create_repos: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 include_all_repositories: Optional[pulumi.Input[bool]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organisation: Optional[pulumi.Input[str]] = None,
                 permission: Optional[pulumi.Input[str]] = None,
                 repositories: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 units: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        `Team` manages Team that are part of an organisation.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_gitea as gitea

        test_org = gitea.Org("testOrg")
        test_user = gitea.User("testUser",
            username="test",
            login_name="test",
            password="Geheim1!",
            email="test@user.dev",
            must_change_password=False,
            admin=True)
        test_team = gitea.Team("testTeam",
            organisation=test_org.name,
            description="Devs of Test Org",
            permission="write",
            members=[test_user.username])
        test_repository = gitea.Repository("testRepository",
            username=test_org.name,
            private=True,
            issue_labels="Default",
            license="MIT",
            gitignores="Go")
        test_team_restricted = gitea.Team("testTeamRestricted",
            organisation=test_org.name,
            description="Restricted Devs of Test Org",
            permission="write",
            members=[test_user.username],
            include_all_repositories=False,
            repositories=[test_repository.name])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] can_create_repos: Flag if the Teams members should be able to create Rpositories in the Organisation
        :param pulumi.Input[str] description: Description of the Team
        :param pulumi.Input[bool] include_all_repositories: Flag if the Teams members should have access to all Repositories in the Organisation
        :param pulumi.Input[Sequence[pulumi.Input[str]]] members: List of Users that should be part of this team
        :param pulumi.Input[str] name: Name of the Team
        :param pulumi.Input[str] organisation: The organisation which this Team is part of.
        :param pulumi.Input[str] permission: Permissions associated with this Team
               Can be `none`, `read`, `write`, `admin` or `owner`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] repositories: List of Repositories that should be part of this team
        :param pulumi.Input[str] units: List of types of Repositories that should be allowed to be created from Team members.
               Can be `repo.code`, `repo.issues`, `repo.ext_issues`, `repo.wiki`, `repo.pulls`, `repo.releases`, `repo.projects` and/or `repo.ext_wiki`
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TeamArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        `Team` manages Team that are part of an organisation.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_gitea as gitea

        test_org = gitea.Org("testOrg")
        test_user = gitea.User("testUser",
            username="test",
            login_name="test",
            password="Geheim1!",
            email="test@user.dev",
            must_change_password=False,
            admin=True)
        test_team = gitea.Team("testTeam",
            organisation=test_org.name,
            description="Devs of Test Org",
            permission="write",
            members=[test_user.username])
        test_repository = gitea.Repository("testRepository",
            username=test_org.name,
            private=True,
            issue_labels="Default",
            license="MIT",
            gitignores="Go")
        test_team_restricted = gitea.Team("testTeamRestricted",
            organisation=test_org.name,
            description="Restricted Devs of Test Org",
            permission="write",
            members=[test_user.username],
            include_all_repositories=False,
            repositories=[test_repository.name])
        ```

        :param str resource_name: The name of the resource.
        :param TeamArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TeamArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 can_create_repos: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 include_all_repositories: Optional[pulumi.Input[bool]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organisation: Optional[pulumi.Input[str]] = None,
                 permission: Optional[pulumi.Input[str]] = None,
                 repositories: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 units: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TeamArgs.__new__(TeamArgs)

            __props__.__dict__["can_create_repos"] = can_create_repos
            __props__.__dict__["description"] = description
            __props__.__dict__["include_all_repositories"] = include_all_repositories
            __props__.__dict__["members"] = members
            __props__.__dict__["name"] = name
            if organisation is None and not opts.urn:
                raise TypeError("Missing required property 'organisation'")
            __props__.__dict__["organisation"] = organisation
            __props__.__dict__["permission"] = permission
            __props__.__dict__["repositories"] = repositories
            __props__.__dict__["units"] = units
        super(Team, __self__).__init__(
            'gitea:index/team:Team',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            can_create_repos: Optional[pulumi.Input[bool]] = None,
            description: Optional[pulumi.Input[str]] = None,
            include_all_repositories: Optional[pulumi.Input[bool]] = None,
            members: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            organisation: Optional[pulumi.Input[str]] = None,
            permission: Optional[pulumi.Input[str]] = None,
            repositories: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            units: Optional[pulumi.Input[str]] = None) -> 'Team':
        """
        Get an existing Team resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] can_create_repos: Flag if the Teams members should be able to create Rpositories in the Organisation
        :param pulumi.Input[str] description: Description of the Team
        :param pulumi.Input[bool] include_all_repositories: Flag if the Teams members should have access to all Repositories in the Organisation
        :param pulumi.Input[Sequence[pulumi.Input[str]]] members: List of Users that should be part of this team
        :param pulumi.Input[str] name: Name of the Team
        :param pulumi.Input[str] organisation: The organisation which this Team is part of.
        :param pulumi.Input[str] permission: Permissions associated with this Team
               Can be `none`, `read`, `write`, `admin` or `owner`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] repositories: List of Repositories that should be part of this team
        :param pulumi.Input[str] units: List of types of Repositories that should be allowed to be created from Team members.
               Can be `repo.code`, `repo.issues`, `repo.ext_issues`, `repo.wiki`, `repo.pulls`, `repo.releases`, `repo.projects` and/or `repo.ext_wiki`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TeamState.__new__(_TeamState)

        __props__.__dict__["can_create_repos"] = can_create_repos
        __props__.__dict__["description"] = description
        __props__.__dict__["include_all_repositories"] = include_all_repositories
        __props__.__dict__["members"] = members
        __props__.__dict__["name"] = name
        __props__.__dict__["organisation"] = organisation
        __props__.__dict__["permission"] = permission
        __props__.__dict__["repositories"] = repositories
        __props__.__dict__["units"] = units
        return Team(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="canCreateRepos")
    def can_create_repos(self) -> pulumi.Output[Optional[bool]]:
        """
        Flag if the Teams members should be able to create Rpositories in the Organisation
        """
        return pulumi.get(self, "can_create_repos")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description of the Team
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="includeAllRepositories")
    def include_all_repositories(self) -> pulumi.Output[Optional[bool]]:
        """
        Flag if the Teams members should have access to all Repositories in the Organisation
        """
        return pulumi.get(self, "include_all_repositories")

    @property
    @pulumi.getter
    def members(self) -> pulumi.Output[Sequence[str]]:
        """
        List of Users that should be part of this team
        """
        return pulumi.get(self, "members")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the Team
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def organisation(self) -> pulumi.Output[str]:
        """
        The organisation which this Team is part of.
        """
        return pulumi.get(self, "organisation")

    @property
    @pulumi.getter
    def permission(self) -> pulumi.Output[Optional[str]]:
        """
        Permissions associated with this Team
        Can be `none`, `read`, `write`, `admin` or `owner`
        """
        return pulumi.get(self, "permission")

    @property
    @pulumi.getter
    def repositories(self) -> pulumi.Output[Sequence[str]]:
        """
        List of Repositories that should be part of this team
        """
        return pulumi.get(self, "repositories")

    @property
    @pulumi.getter
    def units(self) -> pulumi.Output[Optional[str]]:
        """
        List of types of Repositories that should be allowed to be created from Team members.
        Can be `repo.code`, `repo.issues`, `repo.ext_issues`, `repo.wiki`, `repo.pulls`, `repo.releases`, `repo.projects` and/or `repo.ext_wiki`
        """
        return pulumi.get(self, "units")

