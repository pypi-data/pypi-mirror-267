# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['GitHookArgs', 'GitHook']

@pulumi.input_type
class GitHookArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[str],
                 repo: pulumi.Input[str],
                 user: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a GitHook resource.
        :param pulumi.Input[str] content: Content of the git hook
        :param pulumi.Input[str] repo: The repository that this hook belongs too.
        :param pulumi.Input[str] user: The user (or organisation) owning the repo this hook belongs too
        :param pulumi.Input[str] name: Name of the git hook to configure
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "repo", repo)
        pulumi.set(__self__, "user", user)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        """
        Content of the git hook
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def repo(self) -> pulumi.Input[str]:
        """
        The repository that this hook belongs too.
        """
        return pulumi.get(self, "repo")

    @repo.setter
    def repo(self, value: pulumi.Input[str]):
        pulumi.set(self, "repo", value)

    @property
    @pulumi.getter
    def user(self) -> pulumi.Input[str]:
        """
        The user (or organisation) owning the repo this hook belongs too
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: pulumi.Input[str]):
        pulumi.set(self, "user", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the git hook to configure
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _GitHookState:
    def __init__(__self__, *,
                 content: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 repo: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering GitHook resources.
        :param pulumi.Input[str] content: Content of the git hook
        :param pulumi.Input[str] name: Name of the git hook to configure
        :param pulumi.Input[str] repo: The repository that this hook belongs too.
        :param pulumi.Input[str] user: The user (or organisation) owning the repo this hook belongs too
        """
        if content is not None:
            pulumi.set(__self__, "content", content)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if repo is not None:
            pulumi.set(__self__, "repo", repo)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        """
        Content of the git hook
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the git hook to configure
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def repo(self) -> Optional[pulumi.Input[str]]:
        """
        The repository that this hook belongs too.
        """
        return pulumi.get(self, "repo")

    @repo.setter
    def repo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repo", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        The user (or organisation) owning the repo this hook belongs too
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


class GitHook(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 repo: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        `GitHook` manages git hooks on a repository.
        import is currently not supported

        WARNING: using this resource requires to enable server side hookswhich are known to cause [security issues](https://github.com/go-gitea/gitea/pull/13058)!

        if you want to procede, you need to enable server side hooks as stated [here](https://docs.gitea.io/en-us/config-cheat-sheet/#security-security)

        ## Example Usage

        ```python
        import pulumi
        import pulumi_gitea as gitea

        test_org = gitea.Org("testOrg")
        org_repo = gitea.Repository("orgRepo", username=test_org.name)
        org_repo_post_receive = gitea.GitHook("orgRepoPostReceive",
            user=test_org.name,
            repo=org_repo.name,
            content=(lambda path: open(path).read())(f"{path['module']}/post-receive.sh"))
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] content: Content of the git hook
        :param pulumi.Input[str] name: Name of the git hook to configure
        :param pulumi.Input[str] repo: The repository that this hook belongs too.
        :param pulumi.Input[str] user: The user (or organisation) owning the repo this hook belongs too
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: GitHookArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        `GitHook` manages git hooks on a repository.
        import is currently not supported

        WARNING: using this resource requires to enable server side hookswhich are known to cause [security issues](https://github.com/go-gitea/gitea/pull/13058)!

        if you want to procede, you need to enable server side hooks as stated [here](https://docs.gitea.io/en-us/config-cheat-sheet/#security-security)

        ## Example Usage

        ```python
        import pulumi
        import pulumi_gitea as gitea

        test_org = gitea.Org("testOrg")
        org_repo = gitea.Repository("orgRepo", username=test_org.name)
        org_repo_post_receive = gitea.GitHook("orgRepoPostReceive",
            user=test_org.name,
            repo=org_repo.name,
            content=(lambda path: open(path).read())(f"{path['module']}/post-receive.sh"))
        ```

        :param str resource_name: The name of the resource.
        :param GitHookArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GitHookArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 repo: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GitHookArgs.__new__(GitHookArgs)

            if content is None and not opts.urn:
                raise TypeError("Missing required property 'content'")
            __props__.__dict__["content"] = content
            __props__.__dict__["name"] = name
            if repo is None and not opts.urn:
                raise TypeError("Missing required property 'repo'")
            __props__.__dict__["repo"] = repo
            if user is None and not opts.urn:
                raise TypeError("Missing required property 'user'")
            __props__.__dict__["user"] = user
        super(GitHook, __self__).__init__(
            'gitea:index/gitHook:GitHook',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            content: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            repo: Optional[pulumi.Input[str]] = None,
            user: Optional[pulumi.Input[str]] = None) -> 'GitHook':
        """
        Get an existing GitHook resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] content: Content of the git hook
        :param pulumi.Input[str] name: Name of the git hook to configure
        :param pulumi.Input[str] repo: The repository that this hook belongs too.
        :param pulumi.Input[str] user: The user (or organisation) owning the repo this hook belongs too
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GitHookState.__new__(_GitHookState)

        __props__.__dict__["content"] = content
        __props__.__dict__["name"] = name
        __props__.__dict__["repo"] = repo
        __props__.__dict__["user"] = user
        return GitHook(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Output[str]:
        """
        Content of the git hook
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the git hook to configure
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def repo(self) -> pulumi.Output[str]:
        """
        The repository that this hook belongs too.
        """
        return pulumi.get(self, "repo")

    @property
    @pulumi.getter
    def user(self) -> pulumi.Output[str]:
        """
        The user (or organisation) owning the repo this hook belongs too
        """
        return pulumi.get(self, "user")

