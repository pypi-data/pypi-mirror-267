# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['Oauth2AppArgs', 'Oauth2App']

@pulumi.input_type
class Oauth2AppArgs:
    def __init__(__self__, *,
                 redirect_uris: pulumi.Input[Sequence[pulumi.Input[str]]],
                 confidential_client: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Oauth2App resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] redirect_uris: Accepted redirect URIs
        :param pulumi.Input[bool] confidential_client: If set to false, it will be a public client (PKCE will be required)
        :param pulumi.Input[str] name: OAuth Application name
        """
        pulumi.set(__self__, "redirect_uris", redirect_uris)
        if confidential_client is not None:
            pulumi.set(__self__, "confidential_client", confidential_client)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="redirectUris")
    def redirect_uris(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Accepted redirect URIs
        """
        return pulumi.get(self, "redirect_uris")

    @redirect_uris.setter
    def redirect_uris(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "redirect_uris", value)

    @property
    @pulumi.getter(name="confidentialClient")
    def confidential_client(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to false, it will be a public client (PKCE will be required)
        """
        return pulumi.get(self, "confidential_client")

    @confidential_client.setter
    def confidential_client(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "confidential_client", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        OAuth Application name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _Oauth2AppState:
    def __init__(__self__, *,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 confidential_client: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 redirect_uris: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering Oauth2App resources.
        :param pulumi.Input[str] client_id: OAuth2 Application client id
        :param pulumi.Input[str] client_secret: Oauth2 Application client secret
        :param pulumi.Input[bool] confidential_client: If set to false, it will be a public client (PKCE will be required)
        :param pulumi.Input[str] name: OAuth Application name
        :param pulumi.Input[Sequence[pulumi.Input[str]]] redirect_uris: Accepted redirect URIs
        """
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if confidential_client is not None:
            pulumi.set(__self__, "confidential_client", confidential_client)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if redirect_uris is not None:
            pulumi.set(__self__, "redirect_uris", redirect_uris)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        OAuth2 Application client id
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        """
        Oauth2 Application client secret
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="confidentialClient")
    def confidential_client(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to false, it will be a public client (PKCE will be required)
        """
        return pulumi.get(self, "confidential_client")

    @confidential_client.setter
    def confidential_client(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "confidential_client", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        OAuth Application name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="redirectUris")
    def redirect_uris(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Accepted redirect URIs
        """
        return pulumi.get(self, "redirect_uris")

    @redirect_uris.setter
    def redirect_uris(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "redirect_uris", value)


class Oauth2App(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 confidential_client: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 redirect_uris: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Handling [gitea oauth application](https://docs.gitea.io/en-us/oauth2-provider/) resources

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] confidential_client: If set to false, it will be a public client (PKCE will be required)
        :param pulumi.Input[str] name: OAuth Application name
        :param pulumi.Input[Sequence[pulumi.Input[str]]] redirect_uris: Accepted redirect URIs
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Oauth2AppArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Handling [gitea oauth application](https://docs.gitea.io/en-us/oauth2-provider/) resources

        :param str resource_name: The name of the resource.
        :param Oauth2AppArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(Oauth2AppArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 confidential_client: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 redirect_uris: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = Oauth2AppArgs.__new__(Oauth2AppArgs)

            __props__.__dict__["confidential_client"] = confidential_client
            __props__.__dict__["name"] = name
            if redirect_uris is None and not opts.urn:
                raise TypeError("Missing required property 'redirect_uris'")
            __props__.__dict__["redirect_uris"] = redirect_uris
            __props__.__dict__["client_id"] = None
            __props__.__dict__["client_secret"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["clientSecret"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Oauth2App, __self__).__init__(
            'gitea:index/oauth2App:Oauth2App',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            client_id: Optional[pulumi.Input[str]] = None,
            client_secret: Optional[pulumi.Input[str]] = None,
            confidential_client: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            redirect_uris: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'Oauth2App':
        """
        Get an existing Oauth2App resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] client_id: OAuth2 Application client id
        :param pulumi.Input[str] client_secret: Oauth2 Application client secret
        :param pulumi.Input[bool] confidential_client: If set to false, it will be a public client (PKCE will be required)
        :param pulumi.Input[str] name: OAuth Application name
        :param pulumi.Input[Sequence[pulumi.Input[str]]] redirect_uris: Accepted redirect URIs
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _Oauth2AppState.__new__(_Oauth2AppState)

        __props__.__dict__["client_id"] = client_id
        __props__.__dict__["client_secret"] = client_secret
        __props__.__dict__["confidential_client"] = confidential_client
        __props__.__dict__["name"] = name
        __props__.__dict__["redirect_uris"] = redirect_uris
        return Oauth2App(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Output[str]:
        """
        OAuth2 Application client id
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Output[str]:
        """
        Oauth2 Application client secret
        """
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="confidentialClient")
    def confidential_client(self) -> pulumi.Output[Optional[bool]]:
        """
        If set to false, it will be a public client (PKCE will be required)
        """
        return pulumi.get(self, "confidential_client")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        OAuth Application name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="redirectUris")
    def redirect_uris(self) -> pulumi.Output[Sequence[str]]:
        """
        Accepted redirect URIs
        """
        return pulumi.get(self, "redirect_uris")

