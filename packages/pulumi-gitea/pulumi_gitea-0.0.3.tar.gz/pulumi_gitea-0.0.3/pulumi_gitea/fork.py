# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ForkArgs', 'Fork']

@pulumi.input_type
class ForkArgs:
    def __init__(__self__, *,
                 owner: pulumi.Input[str],
                 repo: pulumi.Input[str],
                 organization: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Fork resource.
        :param pulumi.Input[str] owner: The owner or owning organization of the repository to fork
        :param pulumi.Input[str] repo: The name of the repository to fork
        :param pulumi.Input[str] organization: The organization that owns the forked repo
        """
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "repo", repo)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)

    @property
    @pulumi.getter
    def owner(self) -> pulumi.Input[str]:
        """
        The owner or owning organization of the repository to fork
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: pulumi.Input[str]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter
    def repo(self) -> pulumi.Input[str]:
        """
        The name of the repository to fork
        """
        return pulumi.get(self, "repo")

    @repo.setter
    def repo(self, value: pulumi.Input[str]):
        pulumi.set(self, "repo", value)

    @property
    @pulumi.getter
    def organization(self) -> Optional[pulumi.Input[str]]:
        """
        The organization that owns the forked repo
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organization", value)


@pulumi.input_type
class _ForkState:
    def __init__(__self__, *,
                 organization: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 repo: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Fork resources.
        :param pulumi.Input[str] organization: The organization that owns the forked repo
        :param pulumi.Input[str] owner: The owner or owning organization of the repository to fork
        :param pulumi.Input[str] repo: The name of the repository to fork
        """
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if repo is not None:
            pulumi.set(__self__, "repo", repo)

    @property
    @pulumi.getter
    def organization(self) -> Optional[pulumi.Input[str]]:
        """
        The organization that owns the forked repo
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        """
        The owner or owning organization of the repository to fork
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter
    def repo(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the repository to fork
        """
        return pulumi.get(self, "repo")

    @repo.setter
    def repo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repo", value)


class Fork(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 organization: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 repo: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        `Fork` manages repository fork to the current user or an organisation
        Forking a repository to a dedicated user is currently unsupported
        Creating a fork using this resource without an organisation will create the fork in the executors name

        ## Example Usage

        ```python
        import pulumi
        import pulumi_gitea as gitea

        org1 = gitea.Org("org1")
        org2 = gitea.Org("org2")
        repo1_in_org1 = gitea.Repository("repo1InOrg1", username=org1.name)
        user_fork_of_repo1_in_org1 = gitea.Fork("userForkOfRepo1InOrg1",
            owner=org1.name,
            repo=repo1_in_org1.name)
        org2_fork_of_repo1_in_org1 = gitea.Fork("org2ForkOfRepo1InOrg1",
            owner=org1.name,
            repo=repo1_in_org1.name,
            organization=org2.name)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] organization: The organization that owns the forked repo
        :param pulumi.Input[str] owner: The owner or owning organization of the repository to fork
        :param pulumi.Input[str] repo: The name of the repository to fork
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ForkArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        `Fork` manages repository fork to the current user or an organisation
        Forking a repository to a dedicated user is currently unsupported
        Creating a fork using this resource without an organisation will create the fork in the executors name

        ## Example Usage

        ```python
        import pulumi
        import pulumi_gitea as gitea

        org1 = gitea.Org("org1")
        org2 = gitea.Org("org2")
        repo1_in_org1 = gitea.Repository("repo1InOrg1", username=org1.name)
        user_fork_of_repo1_in_org1 = gitea.Fork("userForkOfRepo1InOrg1",
            owner=org1.name,
            repo=repo1_in_org1.name)
        org2_fork_of_repo1_in_org1 = gitea.Fork("org2ForkOfRepo1InOrg1",
            owner=org1.name,
            repo=repo1_in_org1.name,
            organization=org2.name)
        ```

        :param str resource_name: The name of the resource.
        :param ForkArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ForkArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 organization: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 repo: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ForkArgs.__new__(ForkArgs)

            __props__.__dict__["organization"] = organization
            if owner is None and not opts.urn:
                raise TypeError("Missing required property 'owner'")
            __props__.__dict__["owner"] = owner
            if repo is None and not opts.urn:
                raise TypeError("Missing required property 'repo'")
            __props__.__dict__["repo"] = repo
        super(Fork, __self__).__init__(
            'gitea:index/fork:Fork',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            organization: Optional[pulumi.Input[str]] = None,
            owner: Optional[pulumi.Input[str]] = None,
            repo: Optional[pulumi.Input[str]] = None) -> 'Fork':
        """
        Get an existing Fork resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] organization: The organization that owns the forked repo
        :param pulumi.Input[str] owner: The owner or owning organization of the repository to fork
        :param pulumi.Input[str] repo: The name of the repository to fork
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ForkState.__new__(_ForkState)

        __props__.__dict__["organization"] = organization
        __props__.__dict__["owner"] = owner
        __props__.__dict__["repo"] = repo
        return Fork(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def organization(self) -> pulumi.Output[Optional[str]]:
        """
        The organization that owns the forked repo
        """
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter
    def owner(self) -> pulumi.Output[str]:
        """
        The owner or owning organization of the repository to fork
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def repo(self) -> pulumi.Output[str]:
        """
        The name of the repository to fork
        """
        return pulumi.get(self, "repo")

