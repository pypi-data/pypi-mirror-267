# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['RepositoryArgs', 'Repository']

@pulumi.input_type
class RepositoryArgs:
    def __init__(__self__, *,
                 username: pulumi.Input[str],
                 allow_manual_merge: Optional[pulumi.Input[bool]] = None,
                 allow_merge_commits: Optional[pulumi.Input[bool]] = None,
                 allow_rebase: Optional[pulumi.Input[bool]] = None,
                 allow_rebase_explicit: Optional[pulumi.Input[bool]] = None,
                 allow_squash_merge: Optional[pulumi.Input[bool]] = None,
                 archived: Optional[pulumi.Input[bool]] = None,
                 auto_init: Optional[pulumi.Input[bool]] = None,
                 autodetect_manual_merge: Optional[pulumi.Input[bool]] = None,
                 default_branch: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 gitignores: Optional[pulumi.Input[str]] = None,
                 has_issues: Optional[pulumi.Input[bool]] = None,
                 has_projects: Optional[pulumi.Input[bool]] = None,
                 has_pull_requests: Optional[pulumi.Input[bool]] = None,
                 has_wiki: Optional[pulumi.Input[bool]] = None,
                 ignore_whitespace_conflicts: Optional[pulumi.Input[bool]] = None,
                 issue_labels: Optional[pulumi.Input[str]] = None,
                 license: Optional[pulumi.Input[str]] = None,
                 migration_clone_address: Optional[pulumi.Input[str]] = None,
                 migration_clone_addresse: Optional[pulumi.Input[str]] = None,
                 migration_issue_labels: Optional[pulumi.Input[bool]] = None,
                 migration_lfs: Optional[pulumi.Input[bool]] = None,
                 migration_lfs_endpoint: Optional[pulumi.Input[str]] = None,
                 migration_milestones: Optional[pulumi.Input[bool]] = None,
                 migration_mirror_interval: Optional[pulumi.Input[str]] = None,
                 migration_releases: Optional[pulumi.Input[bool]] = None,
                 migration_service: Optional[pulumi.Input[str]] = None,
                 migration_service_auth_password: Optional[pulumi.Input[str]] = None,
                 migration_service_auth_token: Optional[pulumi.Input[str]] = None,
                 migration_service_auth_username: Optional[pulumi.Input[str]] = None,
                 mirror: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 private: Optional[pulumi.Input[bool]] = None,
                 readme: Optional[pulumi.Input[str]] = None,
                 repo_template: Optional[pulumi.Input[bool]] = None,
                 website: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Repository resource.
        :param pulumi.Input[str] username: The Owner of the repository
        :param pulumi.Input[bool] auto_init: Flag if the repository should be initiated with the configured values
        :param pulumi.Input[str] default_branch: The default branch of the repository. Defaults to `main`
        :param pulumi.Input[str] description: The description of the repository.
        :param pulumi.Input[str] gitignores: A specific gitignore that should be commited to the repositoryon creation if `auto_init` is set to `true`
               Need to exist in the gitea instance
        :param pulumi.Input[bool] has_issues: A flag if the repository should have issue management enabled or not.
        :param pulumi.Input[bool] has_projects: A flag if the repository should have the native project management enabled or not.
        :param pulumi.Input[bool] has_pull_requests: A flag if the repository should acceppt pull requests or not.
        :param pulumi.Input[bool] has_wiki: A flag if the repository should have the native wiki enabled or not.
        :param pulumi.Input[str] issue_labels: The Issue Label configuration to be used in this repository.
               Need to exist in the gitea instance
        :param pulumi.Input[str] license: The license under which the source code of this repository should be.
               Need to exist in the gitea instance
        :param pulumi.Input[str] migration_clone_addresse: DEPRECATED in favor of `migration_clone_address`
        :param pulumi.Input[str] migration_mirror_interval: valid time units are 'h', 'm', 's'. 0 to disable automatic sync
        :param pulumi.Input[str] migration_service: git/github/gitlab/gitea/gogs
        :param pulumi.Input[str] name: The Name of the repository
        :param pulumi.Input[bool] private: Flag if the repository should be private or not.
        :param pulumi.Input[str] website: A link to a website with more information.
        """
        pulumi.set(__self__, "username", username)
        if allow_manual_merge is not None:
            pulumi.set(__self__, "allow_manual_merge", allow_manual_merge)
        if allow_merge_commits is not None:
            pulumi.set(__self__, "allow_merge_commits", allow_merge_commits)
        if allow_rebase is not None:
            pulumi.set(__self__, "allow_rebase", allow_rebase)
        if allow_rebase_explicit is not None:
            pulumi.set(__self__, "allow_rebase_explicit", allow_rebase_explicit)
        if allow_squash_merge is not None:
            pulumi.set(__self__, "allow_squash_merge", allow_squash_merge)
        if archived is not None:
            pulumi.set(__self__, "archived", archived)
        if auto_init is not None:
            pulumi.set(__self__, "auto_init", auto_init)
        if autodetect_manual_merge is not None:
            pulumi.set(__self__, "autodetect_manual_merge", autodetect_manual_merge)
        if default_branch is not None:
            pulumi.set(__self__, "default_branch", default_branch)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if gitignores is not None:
            pulumi.set(__self__, "gitignores", gitignores)
        if has_issues is not None:
            pulumi.set(__self__, "has_issues", has_issues)
        if has_projects is not None:
            pulumi.set(__self__, "has_projects", has_projects)
        if has_pull_requests is not None:
            pulumi.set(__self__, "has_pull_requests", has_pull_requests)
        if has_wiki is not None:
            pulumi.set(__self__, "has_wiki", has_wiki)
        if ignore_whitespace_conflicts is not None:
            pulumi.set(__self__, "ignore_whitespace_conflicts", ignore_whitespace_conflicts)
        if issue_labels is not None:
            pulumi.set(__self__, "issue_labels", issue_labels)
        if license is not None:
            pulumi.set(__self__, "license", license)
        if migration_clone_address is not None:
            pulumi.set(__self__, "migration_clone_address", migration_clone_address)
        if migration_clone_addresse is not None:
            pulumi.set(__self__, "migration_clone_addresse", migration_clone_addresse)
        if migration_issue_labels is not None:
            pulumi.set(__self__, "migration_issue_labels", migration_issue_labels)
        if migration_lfs is not None:
            pulumi.set(__self__, "migration_lfs", migration_lfs)
        if migration_lfs_endpoint is not None:
            pulumi.set(__self__, "migration_lfs_endpoint", migration_lfs_endpoint)
        if migration_milestones is not None:
            pulumi.set(__self__, "migration_milestones", migration_milestones)
        if migration_mirror_interval is not None:
            pulumi.set(__self__, "migration_mirror_interval", migration_mirror_interval)
        if migration_releases is not None:
            pulumi.set(__self__, "migration_releases", migration_releases)
        if migration_service is not None:
            pulumi.set(__self__, "migration_service", migration_service)
        if migration_service_auth_password is not None:
            pulumi.set(__self__, "migration_service_auth_password", migration_service_auth_password)
        if migration_service_auth_token is not None:
            pulumi.set(__self__, "migration_service_auth_token", migration_service_auth_token)
        if migration_service_auth_username is not None:
            pulumi.set(__self__, "migration_service_auth_username", migration_service_auth_username)
        if mirror is not None:
            pulumi.set(__self__, "mirror", mirror)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private is not None:
            pulumi.set(__self__, "private", private)
        if readme is not None:
            pulumi.set(__self__, "readme", readme)
        if repo_template is not None:
            pulumi.set(__self__, "repo_template", repo_template)
        if website is not None:
            pulumi.set(__self__, "website", website)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        The Owner of the repository
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="allowManualMerge")
    def allow_manual_merge(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_manual_merge")

    @allow_manual_merge.setter
    def allow_manual_merge(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_manual_merge", value)

    @property
    @pulumi.getter(name="allowMergeCommits")
    def allow_merge_commits(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_merge_commits")

    @allow_merge_commits.setter
    def allow_merge_commits(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_merge_commits", value)

    @property
    @pulumi.getter(name="allowRebase")
    def allow_rebase(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_rebase")

    @allow_rebase.setter
    def allow_rebase(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_rebase", value)

    @property
    @pulumi.getter(name="allowRebaseExplicit")
    def allow_rebase_explicit(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_rebase_explicit")

    @allow_rebase_explicit.setter
    def allow_rebase_explicit(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_rebase_explicit", value)

    @property
    @pulumi.getter(name="allowSquashMerge")
    def allow_squash_merge(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_squash_merge")

    @allow_squash_merge.setter
    def allow_squash_merge(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_squash_merge", value)

    @property
    @pulumi.getter
    def archived(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "archived")

    @archived.setter
    def archived(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "archived", value)

    @property
    @pulumi.getter(name="autoInit")
    def auto_init(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag if the repository should be initiated with the configured values
        """
        return pulumi.get(self, "auto_init")

    @auto_init.setter
    def auto_init(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_init", value)

    @property
    @pulumi.getter(name="autodetectManualMerge")
    def autodetect_manual_merge(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "autodetect_manual_merge")

    @autodetect_manual_merge.setter
    def autodetect_manual_merge(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "autodetect_manual_merge", value)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> Optional[pulumi.Input[str]]:
        """
        The default branch of the repository. Defaults to `main`
        """
        return pulumi.get(self, "default_branch")

    @default_branch.setter
    def default_branch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_branch", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the repository.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def gitignores(self) -> Optional[pulumi.Input[str]]:
        """
        A specific gitignore that should be commited to the repositoryon creation if `auto_init` is set to `true`
        Need to exist in the gitea instance
        """
        return pulumi.get(self, "gitignores")

    @gitignores.setter
    def gitignores(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gitignores", value)

    @property
    @pulumi.getter(name="hasIssues")
    def has_issues(self) -> Optional[pulumi.Input[bool]]:
        """
        A flag if the repository should have issue management enabled or not.
        """
        return pulumi.get(self, "has_issues")

    @has_issues.setter
    def has_issues(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "has_issues", value)

    @property
    @pulumi.getter(name="hasProjects")
    def has_projects(self) -> Optional[pulumi.Input[bool]]:
        """
        A flag if the repository should have the native project management enabled or not.
        """
        return pulumi.get(self, "has_projects")

    @has_projects.setter
    def has_projects(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "has_projects", value)

    @property
    @pulumi.getter(name="hasPullRequests")
    def has_pull_requests(self) -> Optional[pulumi.Input[bool]]:
        """
        A flag if the repository should acceppt pull requests or not.
        """
        return pulumi.get(self, "has_pull_requests")

    @has_pull_requests.setter
    def has_pull_requests(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "has_pull_requests", value)

    @property
    @pulumi.getter(name="hasWiki")
    def has_wiki(self) -> Optional[pulumi.Input[bool]]:
        """
        A flag if the repository should have the native wiki enabled or not.
        """
        return pulumi.get(self, "has_wiki")

    @has_wiki.setter
    def has_wiki(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "has_wiki", value)

    @property
    @pulumi.getter(name="ignoreWhitespaceConflicts")
    def ignore_whitespace_conflicts(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ignore_whitespace_conflicts")

    @ignore_whitespace_conflicts.setter
    def ignore_whitespace_conflicts(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_whitespace_conflicts", value)

    @property
    @pulumi.getter(name="issueLabels")
    def issue_labels(self) -> Optional[pulumi.Input[str]]:
        """
        The Issue Label configuration to be used in this repository.
        Need to exist in the gitea instance
        """
        return pulumi.get(self, "issue_labels")

    @issue_labels.setter
    def issue_labels(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "issue_labels", value)

    @property
    @pulumi.getter
    def license(self) -> Optional[pulumi.Input[str]]:
        """
        The license under which the source code of this repository should be.
        Need to exist in the gitea instance
        """
        return pulumi.get(self, "license")

    @license.setter
    def license(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "license", value)

    @property
    @pulumi.getter(name="migrationCloneAddress")
    def migration_clone_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "migration_clone_address")

    @migration_clone_address.setter
    def migration_clone_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "migration_clone_address", value)

    @property
    @pulumi.getter(name="migrationCloneAddresse")
    def migration_clone_addresse(self) -> Optional[pulumi.Input[str]]:
        """
        DEPRECATED in favor of `migration_clone_address`
        """
        return pulumi.get(self, "migration_clone_addresse")

    @migration_clone_addresse.setter
    def migration_clone_addresse(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "migration_clone_addresse", value)

    @property
    @pulumi.getter(name="migrationIssueLabels")
    def migration_issue_labels(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "migration_issue_labels")

    @migration_issue_labels.setter
    def migration_issue_labels(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "migration_issue_labels", value)

    @property
    @pulumi.getter(name="migrationLfs")
    def migration_lfs(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "migration_lfs")

    @migration_lfs.setter
    def migration_lfs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "migration_lfs", value)

    @property
    @pulumi.getter(name="migrationLfsEndpoint")
    def migration_lfs_endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "migration_lfs_endpoint")

    @migration_lfs_endpoint.setter
    def migration_lfs_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "migration_lfs_endpoint", value)

    @property
    @pulumi.getter(name="migrationMilestones")
    def migration_milestones(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "migration_milestones")

    @migration_milestones.setter
    def migration_milestones(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "migration_milestones", value)

    @property
    @pulumi.getter(name="migrationMirrorInterval")
    def migration_mirror_interval(self) -> Optional[pulumi.Input[str]]:
        """
        valid time units are 'h', 'm', 's'. 0 to disable automatic sync
        """
        return pulumi.get(self, "migration_mirror_interval")

    @migration_mirror_interval.setter
    def migration_mirror_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "migration_mirror_interval", value)

    @property
    @pulumi.getter(name="migrationReleases")
    def migration_releases(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "migration_releases")

    @migration_releases.setter
    def migration_releases(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "migration_releases", value)

    @property
    @pulumi.getter(name="migrationService")
    def migration_service(self) -> Optional[pulumi.Input[str]]:
        """
        git/github/gitlab/gitea/gogs
        """
        return pulumi.get(self, "migration_service")

    @migration_service.setter
    def migration_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "migration_service", value)

    @property
    @pulumi.getter(name="migrationServiceAuthPassword")
    def migration_service_auth_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "migration_service_auth_password")

    @migration_service_auth_password.setter
    def migration_service_auth_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "migration_service_auth_password", value)

    @property
    @pulumi.getter(name="migrationServiceAuthToken")
    def migration_service_auth_token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "migration_service_auth_token")

    @migration_service_auth_token.setter
    def migration_service_auth_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "migration_service_auth_token", value)

    @property
    @pulumi.getter(name="migrationServiceAuthUsername")
    def migration_service_auth_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "migration_service_auth_username")

    @migration_service_auth_username.setter
    def migration_service_auth_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "migration_service_auth_username", value)

    @property
    @pulumi.getter
    def mirror(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "mirror")

    @mirror.setter
    def mirror(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mirror", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The Name of the repository
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def private(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag if the repository should be private or not.
        """
        return pulumi.get(self, "private")

    @private.setter
    def private(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "private", value)

    @property
    @pulumi.getter
    def readme(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "readme")

    @readme.setter
    def readme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "readme", value)

    @property
    @pulumi.getter(name="repoTemplate")
    def repo_template(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "repo_template")

    @repo_template.setter
    def repo_template(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "repo_template", value)

    @property
    @pulumi.getter
    def website(self) -> Optional[pulumi.Input[str]]:
        """
        A link to a website with more information.
        """
        return pulumi.get(self, "website")

    @website.setter
    def website(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "website", value)


@pulumi.input_type
class _RepositoryState:
    def __init__(__self__, *,
                 allow_manual_merge: Optional[pulumi.Input[bool]] = None,
                 allow_merge_commits: Optional[pulumi.Input[bool]] = None,
                 allow_rebase: Optional[pulumi.Input[bool]] = None,
                 allow_rebase_explicit: Optional[pulumi.Input[bool]] = None,
                 allow_squash_merge: Optional[pulumi.Input[bool]] = None,
                 archived: Optional[pulumi.Input[bool]] = None,
                 auto_init: Optional[pulumi.Input[bool]] = None,
                 autodetect_manual_merge: Optional[pulumi.Input[bool]] = None,
                 clone_url: Optional[pulumi.Input[str]] = None,
                 created: Optional[pulumi.Input[str]] = None,
                 default_branch: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 gitignores: Optional[pulumi.Input[str]] = None,
                 has_issues: Optional[pulumi.Input[bool]] = None,
                 has_projects: Optional[pulumi.Input[bool]] = None,
                 has_pull_requests: Optional[pulumi.Input[bool]] = None,
                 has_wiki: Optional[pulumi.Input[bool]] = None,
                 html_url: Optional[pulumi.Input[str]] = None,
                 ignore_whitespace_conflicts: Optional[pulumi.Input[bool]] = None,
                 issue_labels: Optional[pulumi.Input[str]] = None,
                 license: Optional[pulumi.Input[str]] = None,
                 migration_clone_address: Optional[pulumi.Input[str]] = None,
                 migration_clone_addresse: Optional[pulumi.Input[str]] = None,
                 migration_issue_labels: Optional[pulumi.Input[bool]] = None,
                 migration_lfs: Optional[pulumi.Input[bool]] = None,
                 migration_lfs_endpoint: Optional[pulumi.Input[str]] = None,
                 migration_milestones: Optional[pulumi.Input[bool]] = None,
                 migration_mirror_interval: Optional[pulumi.Input[str]] = None,
                 migration_releases: Optional[pulumi.Input[bool]] = None,
                 migration_service: Optional[pulumi.Input[str]] = None,
                 migration_service_auth_password: Optional[pulumi.Input[str]] = None,
                 migration_service_auth_token: Optional[pulumi.Input[str]] = None,
                 migration_service_auth_username: Optional[pulumi.Input[str]] = None,
                 mirror: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 permission_admin: Optional[pulumi.Input[bool]] = None,
                 permission_pull: Optional[pulumi.Input[bool]] = None,
                 permission_push: Optional[pulumi.Input[bool]] = None,
                 private: Optional[pulumi.Input[bool]] = None,
                 readme: Optional[pulumi.Input[str]] = None,
                 repo_template: Optional[pulumi.Input[bool]] = None,
                 ssh_url: Optional[pulumi.Input[str]] = None,
                 updated: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 website: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Repository resources.
        :param pulumi.Input[bool] auto_init: Flag if the repository should be initiated with the configured values
        :param pulumi.Input[str] default_branch: The default branch of the repository. Defaults to `main`
        :param pulumi.Input[str] description: The description of the repository.
        :param pulumi.Input[str] gitignores: A specific gitignore that should be commited to the repositoryon creation if `auto_init` is set to `true`
               Need to exist in the gitea instance
        :param pulumi.Input[bool] has_issues: A flag if the repository should have issue management enabled or not.
        :param pulumi.Input[bool] has_projects: A flag if the repository should have the native project management enabled or not.
        :param pulumi.Input[bool] has_pull_requests: A flag if the repository should acceppt pull requests or not.
        :param pulumi.Input[bool] has_wiki: A flag if the repository should have the native wiki enabled or not.
        :param pulumi.Input[str] issue_labels: The Issue Label configuration to be used in this repository.
               Need to exist in the gitea instance
        :param pulumi.Input[str] license: The license under which the source code of this repository should be.
               Need to exist in the gitea instance
        :param pulumi.Input[str] migration_clone_addresse: DEPRECATED in favor of `migration_clone_address`
        :param pulumi.Input[str] migration_mirror_interval: valid time units are 'h', 'm', 's'. 0 to disable automatic sync
        :param pulumi.Input[str] migration_service: git/github/gitlab/gitea/gogs
        :param pulumi.Input[str] name: The Name of the repository
        :param pulumi.Input[bool] private: Flag if the repository should be private or not.
        :param pulumi.Input[str] username: The Owner of the repository
        :param pulumi.Input[str] website: A link to a website with more information.
        """
        if allow_manual_merge is not None:
            pulumi.set(__self__, "allow_manual_merge", allow_manual_merge)
        if allow_merge_commits is not None:
            pulumi.set(__self__, "allow_merge_commits", allow_merge_commits)
        if allow_rebase is not None:
            pulumi.set(__self__, "allow_rebase", allow_rebase)
        if allow_rebase_explicit is not None:
            pulumi.set(__self__, "allow_rebase_explicit", allow_rebase_explicit)
        if allow_squash_merge is not None:
            pulumi.set(__self__, "allow_squash_merge", allow_squash_merge)
        if archived is not None:
            pulumi.set(__self__, "archived", archived)
        if auto_init is not None:
            pulumi.set(__self__, "auto_init", auto_init)
        if autodetect_manual_merge is not None:
            pulumi.set(__self__, "autodetect_manual_merge", autodetect_manual_merge)
        if clone_url is not None:
            pulumi.set(__self__, "clone_url", clone_url)
        if created is not None:
            pulumi.set(__self__, "created", created)
        if default_branch is not None:
            pulumi.set(__self__, "default_branch", default_branch)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if gitignores is not None:
            pulumi.set(__self__, "gitignores", gitignores)
        if has_issues is not None:
            pulumi.set(__self__, "has_issues", has_issues)
        if has_projects is not None:
            pulumi.set(__self__, "has_projects", has_projects)
        if has_pull_requests is not None:
            pulumi.set(__self__, "has_pull_requests", has_pull_requests)
        if has_wiki is not None:
            pulumi.set(__self__, "has_wiki", has_wiki)
        if html_url is not None:
            pulumi.set(__self__, "html_url", html_url)
        if ignore_whitespace_conflicts is not None:
            pulumi.set(__self__, "ignore_whitespace_conflicts", ignore_whitespace_conflicts)
        if issue_labels is not None:
            pulumi.set(__self__, "issue_labels", issue_labels)
        if license is not None:
            pulumi.set(__self__, "license", license)
        if migration_clone_address is not None:
            pulumi.set(__self__, "migration_clone_address", migration_clone_address)
        if migration_clone_addresse is not None:
            pulumi.set(__self__, "migration_clone_addresse", migration_clone_addresse)
        if migration_issue_labels is not None:
            pulumi.set(__self__, "migration_issue_labels", migration_issue_labels)
        if migration_lfs is not None:
            pulumi.set(__self__, "migration_lfs", migration_lfs)
        if migration_lfs_endpoint is not None:
            pulumi.set(__self__, "migration_lfs_endpoint", migration_lfs_endpoint)
        if migration_milestones is not None:
            pulumi.set(__self__, "migration_milestones", migration_milestones)
        if migration_mirror_interval is not None:
            pulumi.set(__self__, "migration_mirror_interval", migration_mirror_interval)
        if migration_releases is not None:
            pulumi.set(__self__, "migration_releases", migration_releases)
        if migration_service is not None:
            pulumi.set(__self__, "migration_service", migration_service)
        if migration_service_auth_password is not None:
            pulumi.set(__self__, "migration_service_auth_password", migration_service_auth_password)
        if migration_service_auth_token is not None:
            pulumi.set(__self__, "migration_service_auth_token", migration_service_auth_token)
        if migration_service_auth_username is not None:
            pulumi.set(__self__, "migration_service_auth_username", migration_service_auth_username)
        if mirror is not None:
            pulumi.set(__self__, "mirror", mirror)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if permission_admin is not None:
            pulumi.set(__self__, "permission_admin", permission_admin)
        if permission_pull is not None:
            pulumi.set(__self__, "permission_pull", permission_pull)
        if permission_push is not None:
            pulumi.set(__self__, "permission_push", permission_push)
        if private is not None:
            pulumi.set(__self__, "private", private)
        if readme is not None:
            pulumi.set(__self__, "readme", readme)
        if repo_template is not None:
            pulumi.set(__self__, "repo_template", repo_template)
        if ssh_url is not None:
            pulumi.set(__self__, "ssh_url", ssh_url)
        if updated is not None:
            pulumi.set(__self__, "updated", updated)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if website is not None:
            pulumi.set(__self__, "website", website)

    @property
    @pulumi.getter(name="allowManualMerge")
    def allow_manual_merge(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_manual_merge")

    @allow_manual_merge.setter
    def allow_manual_merge(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_manual_merge", value)

    @property
    @pulumi.getter(name="allowMergeCommits")
    def allow_merge_commits(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_merge_commits")

    @allow_merge_commits.setter
    def allow_merge_commits(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_merge_commits", value)

    @property
    @pulumi.getter(name="allowRebase")
    def allow_rebase(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_rebase")

    @allow_rebase.setter
    def allow_rebase(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_rebase", value)

    @property
    @pulumi.getter(name="allowRebaseExplicit")
    def allow_rebase_explicit(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_rebase_explicit")

    @allow_rebase_explicit.setter
    def allow_rebase_explicit(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_rebase_explicit", value)

    @property
    @pulumi.getter(name="allowSquashMerge")
    def allow_squash_merge(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_squash_merge")

    @allow_squash_merge.setter
    def allow_squash_merge(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_squash_merge", value)

    @property
    @pulumi.getter
    def archived(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "archived")

    @archived.setter
    def archived(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "archived", value)

    @property
    @pulumi.getter(name="autoInit")
    def auto_init(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag if the repository should be initiated with the configured values
        """
        return pulumi.get(self, "auto_init")

    @auto_init.setter
    def auto_init(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_init", value)

    @property
    @pulumi.getter(name="autodetectManualMerge")
    def autodetect_manual_merge(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "autodetect_manual_merge")

    @autodetect_manual_merge.setter
    def autodetect_manual_merge(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "autodetect_manual_merge", value)

    @property
    @pulumi.getter(name="cloneUrl")
    def clone_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "clone_url")

    @clone_url.setter
    def clone_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "clone_url", value)

    @property
    @pulumi.getter
    def created(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created")

    @created.setter
    def created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created", value)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> Optional[pulumi.Input[str]]:
        """
        The default branch of the repository. Defaults to `main`
        """
        return pulumi.get(self, "default_branch")

    @default_branch.setter
    def default_branch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_branch", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the repository.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def gitignores(self) -> Optional[pulumi.Input[str]]:
        """
        A specific gitignore that should be commited to the repositoryon creation if `auto_init` is set to `true`
        Need to exist in the gitea instance
        """
        return pulumi.get(self, "gitignores")

    @gitignores.setter
    def gitignores(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gitignores", value)

    @property
    @pulumi.getter(name="hasIssues")
    def has_issues(self) -> Optional[pulumi.Input[bool]]:
        """
        A flag if the repository should have issue management enabled or not.
        """
        return pulumi.get(self, "has_issues")

    @has_issues.setter
    def has_issues(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "has_issues", value)

    @property
    @pulumi.getter(name="hasProjects")
    def has_projects(self) -> Optional[pulumi.Input[bool]]:
        """
        A flag if the repository should have the native project management enabled or not.
        """
        return pulumi.get(self, "has_projects")

    @has_projects.setter
    def has_projects(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "has_projects", value)

    @property
    @pulumi.getter(name="hasPullRequests")
    def has_pull_requests(self) -> Optional[pulumi.Input[bool]]:
        """
        A flag if the repository should acceppt pull requests or not.
        """
        return pulumi.get(self, "has_pull_requests")

    @has_pull_requests.setter
    def has_pull_requests(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "has_pull_requests", value)

    @property
    @pulumi.getter(name="hasWiki")
    def has_wiki(self) -> Optional[pulumi.Input[bool]]:
        """
        A flag if the repository should have the native wiki enabled or not.
        """
        return pulumi.get(self, "has_wiki")

    @has_wiki.setter
    def has_wiki(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "has_wiki", value)

    @property
    @pulumi.getter(name="htmlUrl")
    def html_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "html_url")

    @html_url.setter
    def html_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "html_url", value)

    @property
    @pulumi.getter(name="ignoreWhitespaceConflicts")
    def ignore_whitespace_conflicts(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ignore_whitespace_conflicts")

    @ignore_whitespace_conflicts.setter
    def ignore_whitespace_conflicts(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_whitespace_conflicts", value)

    @property
    @pulumi.getter(name="issueLabels")
    def issue_labels(self) -> Optional[pulumi.Input[str]]:
        """
        The Issue Label configuration to be used in this repository.
        Need to exist in the gitea instance
        """
        return pulumi.get(self, "issue_labels")

    @issue_labels.setter
    def issue_labels(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "issue_labels", value)

    @property
    @pulumi.getter
    def license(self) -> Optional[pulumi.Input[str]]:
        """
        The license under which the source code of this repository should be.
        Need to exist in the gitea instance
        """
        return pulumi.get(self, "license")

    @license.setter
    def license(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "license", value)

    @property
    @pulumi.getter(name="migrationCloneAddress")
    def migration_clone_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "migration_clone_address")

    @migration_clone_address.setter
    def migration_clone_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "migration_clone_address", value)

    @property
    @pulumi.getter(name="migrationCloneAddresse")
    def migration_clone_addresse(self) -> Optional[pulumi.Input[str]]:
        """
        DEPRECATED in favor of `migration_clone_address`
        """
        return pulumi.get(self, "migration_clone_addresse")

    @migration_clone_addresse.setter
    def migration_clone_addresse(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "migration_clone_addresse", value)

    @property
    @pulumi.getter(name="migrationIssueLabels")
    def migration_issue_labels(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "migration_issue_labels")

    @migration_issue_labels.setter
    def migration_issue_labels(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "migration_issue_labels", value)

    @property
    @pulumi.getter(name="migrationLfs")
    def migration_lfs(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "migration_lfs")

    @migration_lfs.setter
    def migration_lfs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "migration_lfs", value)

    @property
    @pulumi.getter(name="migrationLfsEndpoint")
    def migration_lfs_endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "migration_lfs_endpoint")

    @migration_lfs_endpoint.setter
    def migration_lfs_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "migration_lfs_endpoint", value)

    @property
    @pulumi.getter(name="migrationMilestones")
    def migration_milestones(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "migration_milestones")

    @migration_milestones.setter
    def migration_milestones(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "migration_milestones", value)

    @property
    @pulumi.getter(name="migrationMirrorInterval")
    def migration_mirror_interval(self) -> Optional[pulumi.Input[str]]:
        """
        valid time units are 'h', 'm', 's'. 0 to disable automatic sync
        """
        return pulumi.get(self, "migration_mirror_interval")

    @migration_mirror_interval.setter
    def migration_mirror_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "migration_mirror_interval", value)

    @property
    @pulumi.getter(name="migrationReleases")
    def migration_releases(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "migration_releases")

    @migration_releases.setter
    def migration_releases(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "migration_releases", value)

    @property
    @pulumi.getter(name="migrationService")
    def migration_service(self) -> Optional[pulumi.Input[str]]:
        """
        git/github/gitlab/gitea/gogs
        """
        return pulumi.get(self, "migration_service")

    @migration_service.setter
    def migration_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "migration_service", value)

    @property
    @pulumi.getter(name="migrationServiceAuthPassword")
    def migration_service_auth_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "migration_service_auth_password")

    @migration_service_auth_password.setter
    def migration_service_auth_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "migration_service_auth_password", value)

    @property
    @pulumi.getter(name="migrationServiceAuthToken")
    def migration_service_auth_token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "migration_service_auth_token")

    @migration_service_auth_token.setter
    def migration_service_auth_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "migration_service_auth_token", value)

    @property
    @pulumi.getter(name="migrationServiceAuthUsername")
    def migration_service_auth_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "migration_service_auth_username")

    @migration_service_auth_username.setter
    def migration_service_auth_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "migration_service_auth_username", value)

    @property
    @pulumi.getter
    def mirror(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "mirror")

    @mirror.setter
    def mirror(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mirror", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The Name of the repository
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="permissionAdmin")
    def permission_admin(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "permission_admin")

    @permission_admin.setter
    def permission_admin(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "permission_admin", value)

    @property
    @pulumi.getter(name="permissionPull")
    def permission_pull(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "permission_pull")

    @permission_pull.setter
    def permission_pull(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "permission_pull", value)

    @property
    @pulumi.getter(name="permissionPush")
    def permission_push(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "permission_push")

    @permission_push.setter
    def permission_push(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "permission_push", value)

    @property
    @pulumi.getter
    def private(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag if the repository should be private or not.
        """
        return pulumi.get(self, "private")

    @private.setter
    def private(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "private", value)

    @property
    @pulumi.getter
    def readme(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "readme")

    @readme.setter
    def readme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "readme", value)

    @property
    @pulumi.getter(name="repoTemplate")
    def repo_template(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "repo_template")

    @repo_template.setter
    def repo_template(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "repo_template", value)

    @property
    @pulumi.getter(name="sshUrl")
    def ssh_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssh_url")

    @ssh_url.setter
    def ssh_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_url", value)

    @property
    @pulumi.getter
    def updated(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "updated")

    @updated.setter
    def updated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        The Owner of the repository
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def website(self) -> Optional[pulumi.Input[str]]:
        """
        A link to a website with more information.
        """
        return pulumi.get(self, "website")

    @website.setter
    def website(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "website", value)


class Repository(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_manual_merge: Optional[pulumi.Input[bool]] = None,
                 allow_merge_commits: Optional[pulumi.Input[bool]] = None,
                 allow_rebase: Optional[pulumi.Input[bool]] = None,
                 allow_rebase_explicit: Optional[pulumi.Input[bool]] = None,
                 allow_squash_merge: Optional[pulumi.Input[bool]] = None,
                 archived: Optional[pulumi.Input[bool]] = None,
                 auto_init: Optional[pulumi.Input[bool]] = None,
                 autodetect_manual_merge: Optional[pulumi.Input[bool]] = None,
                 default_branch: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 gitignores: Optional[pulumi.Input[str]] = None,
                 has_issues: Optional[pulumi.Input[bool]] = None,
                 has_projects: Optional[pulumi.Input[bool]] = None,
                 has_pull_requests: Optional[pulumi.Input[bool]] = None,
                 has_wiki: Optional[pulumi.Input[bool]] = None,
                 ignore_whitespace_conflicts: Optional[pulumi.Input[bool]] = None,
                 issue_labels: Optional[pulumi.Input[str]] = None,
                 license: Optional[pulumi.Input[str]] = None,
                 migration_clone_address: Optional[pulumi.Input[str]] = None,
                 migration_clone_addresse: Optional[pulumi.Input[str]] = None,
                 migration_issue_labels: Optional[pulumi.Input[bool]] = None,
                 migration_lfs: Optional[pulumi.Input[bool]] = None,
                 migration_lfs_endpoint: Optional[pulumi.Input[str]] = None,
                 migration_milestones: Optional[pulumi.Input[bool]] = None,
                 migration_mirror_interval: Optional[pulumi.Input[str]] = None,
                 migration_releases: Optional[pulumi.Input[bool]] = None,
                 migration_service: Optional[pulumi.Input[str]] = None,
                 migration_service_auth_password: Optional[pulumi.Input[str]] = None,
                 migration_service_auth_token: Optional[pulumi.Input[str]] = None,
                 migration_service_auth_username: Optional[pulumi.Input[str]] = None,
                 mirror: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 private: Optional[pulumi.Input[bool]] = None,
                 readme: Optional[pulumi.Input[str]] = None,
                 repo_template: Optional[pulumi.Input[bool]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 website: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        `Repository` manages a gitea repository.

        Per default this repository will be initializiled with the provided configuration (gitignore, License etc.).
        If the `username` property is set to a organisation name, the provider will try to look if this organisation exists and create the repository under the organisation scope.

        Repository migrations have some properties that are not available to regular repositories. These are all prefixed with `migration_`.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_gitea as gitea

        test = gitea.Repository("test",
            username="lerentis",
            private=True,
            issue_labels="Default",
            license="MIT",
            gitignores="Go")
        mirror = gitea.Repository("mirror",
            username="lerentis",
            description="Mirror of Terraform Provider",
            mirror=True,
            migration_clone_addresse="https://git.uploadfilter24.eu/lerentis/terraform-provider-gitea.git",
            migration_service="gitea",
            migration_service_auth_token=var["gitea_mirror_token"])
        clone = gitea.Repository("clone",
            username="lerentis",
            description="Clone of Terraform Provider",
            mirror=False,
            migration_clone_address="https://git.uploadfilter24.eu/lerentis/terraform-provider-gitea.git",
            migration_service="gitea",
            migration_service_auth_token=var["gitea_clone_token"])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] auto_init: Flag if the repository should be initiated with the configured values
        :param pulumi.Input[str] default_branch: The default branch of the repository. Defaults to `main`
        :param pulumi.Input[str] description: The description of the repository.
        :param pulumi.Input[str] gitignores: A specific gitignore that should be commited to the repositoryon creation if `auto_init` is set to `true`
               Need to exist in the gitea instance
        :param pulumi.Input[bool] has_issues: A flag if the repository should have issue management enabled or not.
        :param pulumi.Input[bool] has_projects: A flag if the repository should have the native project management enabled or not.
        :param pulumi.Input[bool] has_pull_requests: A flag if the repository should acceppt pull requests or not.
        :param pulumi.Input[bool] has_wiki: A flag if the repository should have the native wiki enabled or not.
        :param pulumi.Input[str] issue_labels: The Issue Label configuration to be used in this repository.
               Need to exist in the gitea instance
        :param pulumi.Input[str] license: The license under which the source code of this repository should be.
               Need to exist in the gitea instance
        :param pulumi.Input[str] migration_clone_addresse: DEPRECATED in favor of `migration_clone_address`
        :param pulumi.Input[str] migration_mirror_interval: valid time units are 'h', 'm', 's'. 0 to disable automatic sync
        :param pulumi.Input[str] migration_service: git/github/gitlab/gitea/gogs
        :param pulumi.Input[str] name: The Name of the repository
        :param pulumi.Input[bool] private: Flag if the repository should be private or not.
        :param pulumi.Input[str] username: The Owner of the repository
        :param pulumi.Input[str] website: A link to a website with more information.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RepositoryArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        `Repository` manages a gitea repository.

        Per default this repository will be initializiled with the provided configuration (gitignore, License etc.).
        If the `username` property is set to a organisation name, the provider will try to look if this organisation exists and create the repository under the organisation scope.

        Repository migrations have some properties that are not available to regular repositories. These are all prefixed with `migration_`.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_gitea as gitea

        test = gitea.Repository("test",
            username="lerentis",
            private=True,
            issue_labels="Default",
            license="MIT",
            gitignores="Go")
        mirror = gitea.Repository("mirror",
            username="lerentis",
            description="Mirror of Terraform Provider",
            mirror=True,
            migration_clone_addresse="https://git.uploadfilter24.eu/lerentis/terraform-provider-gitea.git",
            migration_service="gitea",
            migration_service_auth_token=var["gitea_mirror_token"])
        clone = gitea.Repository("clone",
            username="lerentis",
            description="Clone of Terraform Provider",
            mirror=False,
            migration_clone_address="https://git.uploadfilter24.eu/lerentis/terraform-provider-gitea.git",
            migration_service="gitea",
            migration_service_auth_token=var["gitea_clone_token"])
        ```

        :param str resource_name: The name of the resource.
        :param RepositoryArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RepositoryArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_manual_merge: Optional[pulumi.Input[bool]] = None,
                 allow_merge_commits: Optional[pulumi.Input[bool]] = None,
                 allow_rebase: Optional[pulumi.Input[bool]] = None,
                 allow_rebase_explicit: Optional[pulumi.Input[bool]] = None,
                 allow_squash_merge: Optional[pulumi.Input[bool]] = None,
                 archived: Optional[pulumi.Input[bool]] = None,
                 auto_init: Optional[pulumi.Input[bool]] = None,
                 autodetect_manual_merge: Optional[pulumi.Input[bool]] = None,
                 default_branch: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 gitignores: Optional[pulumi.Input[str]] = None,
                 has_issues: Optional[pulumi.Input[bool]] = None,
                 has_projects: Optional[pulumi.Input[bool]] = None,
                 has_pull_requests: Optional[pulumi.Input[bool]] = None,
                 has_wiki: Optional[pulumi.Input[bool]] = None,
                 ignore_whitespace_conflicts: Optional[pulumi.Input[bool]] = None,
                 issue_labels: Optional[pulumi.Input[str]] = None,
                 license: Optional[pulumi.Input[str]] = None,
                 migration_clone_address: Optional[pulumi.Input[str]] = None,
                 migration_clone_addresse: Optional[pulumi.Input[str]] = None,
                 migration_issue_labels: Optional[pulumi.Input[bool]] = None,
                 migration_lfs: Optional[pulumi.Input[bool]] = None,
                 migration_lfs_endpoint: Optional[pulumi.Input[str]] = None,
                 migration_milestones: Optional[pulumi.Input[bool]] = None,
                 migration_mirror_interval: Optional[pulumi.Input[str]] = None,
                 migration_releases: Optional[pulumi.Input[bool]] = None,
                 migration_service: Optional[pulumi.Input[str]] = None,
                 migration_service_auth_password: Optional[pulumi.Input[str]] = None,
                 migration_service_auth_token: Optional[pulumi.Input[str]] = None,
                 migration_service_auth_username: Optional[pulumi.Input[str]] = None,
                 mirror: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 private: Optional[pulumi.Input[bool]] = None,
                 readme: Optional[pulumi.Input[str]] = None,
                 repo_template: Optional[pulumi.Input[bool]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 website: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RepositoryArgs.__new__(RepositoryArgs)

            __props__.__dict__["allow_manual_merge"] = allow_manual_merge
            __props__.__dict__["allow_merge_commits"] = allow_merge_commits
            __props__.__dict__["allow_rebase"] = allow_rebase
            __props__.__dict__["allow_rebase_explicit"] = allow_rebase_explicit
            __props__.__dict__["allow_squash_merge"] = allow_squash_merge
            __props__.__dict__["archived"] = archived
            __props__.__dict__["auto_init"] = auto_init
            __props__.__dict__["autodetect_manual_merge"] = autodetect_manual_merge
            __props__.__dict__["default_branch"] = default_branch
            __props__.__dict__["description"] = description
            __props__.__dict__["gitignores"] = gitignores
            __props__.__dict__["has_issues"] = has_issues
            __props__.__dict__["has_projects"] = has_projects
            __props__.__dict__["has_pull_requests"] = has_pull_requests
            __props__.__dict__["has_wiki"] = has_wiki
            __props__.__dict__["ignore_whitespace_conflicts"] = ignore_whitespace_conflicts
            __props__.__dict__["issue_labels"] = issue_labels
            __props__.__dict__["license"] = license
            __props__.__dict__["migration_clone_address"] = migration_clone_address
            __props__.__dict__["migration_clone_addresse"] = migration_clone_addresse
            __props__.__dict__["migration_issue_labels"] = migration_issue_labels
            __props__.__dict__["migration_lfs"] = migration_lfs
            __props__.__dict__["migration_lfs_endpoint"] = migration_lfs_endpoint
            __props__.__dict__["migration_milestones"] = migration_milestones
            __props__.__dict__["migration_mirror_interval"] = migration_mirror_interval
            __props__.__dict__["migration_releases"] = migration_releases
            __props__.__dict__["migration_service"] = migration_service
            __props__.__dict__["migration_service_auth_password"] = None if migration_service_auth_password is None else pulumi.Output.secret(migration_service_auth_password)
            __props__.__dict__["migration_service_auth_token"] = None if migration_service_auth_token is None else pulumi.Output.secret(migration_service_auth_token)
            __props__.__dict__["migration_service_auth_username"] = migration_service_auth_username
            __props__.__dict__["mirror"] = mirror
            __props__.__dict__["name"] = name
            __props__.__dict__["private"] = private
            __props__.__dict__["readme"] = readme
            __props__.__dict__["repo_template"] = repo_template
            if username is None and not opts.urn:
                raise TypeError("Missing required property 'username'")
            __props__.__dict__["username"] = username
            __props__.__dict__["website"] = website
            __props__.__dict__["clone_url"] = None
            __props__.__dict__["created"] = None
            __props__.__dict__["html_url"] = None
            __props__.__dict__["permission_admin"] = None
            __props__.__dict__["permission_pull"] = None
            __props__.__dict__["permission_push"] = None
            __props__.__dict__["ssh_url"] = None
            __props__.__dict__["updated"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["migrationServiceAuthPassword", "migrationServiceAuthToken"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Repository, __self__).__init__(
            'gitea:index/repository:Repository',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allow_manual_merge: Optional[pulumi.Input[bool]] = None,
            allow_merge_commits: Optional[pulumi.Input[bool]] = None,
            allow_rebase: Optional[pulumi.Input[bool]] = None,
            allow_rebase_explicit: Optional[pulumi.Input[bool]] = None,
            allow_squash_merge: Optional[pulumi.Input[bool]] = None,
            archived: Optional[pulumi.Input[bool]] = None,
            auto_init: Optional[pulumi.Input[bool]] = None,
            autodetect_manual_merge: Optional[pulumi.Input[bool]] = None,
            clone_url: Optional[pulumi.Input[str]] = None,
            created: Optional[pulumi.Input[str]] = None,
            default_branch: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            gitignores: Optional[pulumi.Input[str]] = None,
            has_issues: Optional[pulumi.Input[bool]] = None,
            has_projects: Optional[pulumi.Input[bool]] = None,
            has_pull_requests: Optional[pulumi.Input[bool]] = None,
            has_wiki: Optional[pulumi.Input[bool]] = None,
            html_url: Optional[pulumi.Input[str]] = None,
            ignore_whitespace_conflicts: Optional[pulumi.Input[bool]] = None,
            issue_labels: Optional[pulumi.Input[str]] = None,
            license: Optional[pulumi.Input[str]] = None,
            migration_clone_address: Optional[pulumi.Input[str]] = None,
            migration_clone_addresse: Optional[pulumi.Input[str]] = None,
            migration_issue_labels: Optional[pulumi.Input[bool]] = None,
            migration_lfs: Optional[pulumi.Input[bool]] = None,
            migration_lfs_endpoint: Optional[pulumi.Input[str]] = None,
            migration_milestones: Optional[pulumi.Input[bool]] = None,
            migration_mirror_interval: Optional[pulumi.Input[str]] = None,
            migration_releases: Optional[pulumi.Input[bool]] = None,
            migration_service: Optional[pulumi.Input[str]] = None,
            migration_service_auth_password: Optional[pulumi.Input[str]] = None,
            migration_service_auth_token: Optional[pulumi.Input[str]] = None,
            migration_service_auth_username: Optional[pulumi.Input[str]] = None,
            mirror: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            permission_admin: Optional[pulumi.Input[bool]] = None,
            permission_pull: Optional[pulumi.Input[bool]] = None,
            permission_push: Optional[pulumi.Input[bool]] = None,
            private: Optional[pulumi.Input[bool]] = None,
            readme: Optional[pulumi.Input[str]] = None,
            repo_template: Optional[pulumi.Input[bool]] = None,
            ssh_url: Optional[pulumi.Input[str]] = None,
            updated: Optional[pulumi.Input[str]] = None,
            username: Optional[pulumi.Input[str]] = None,
            website: Optional[pulumi.Input[str]] = None) -> 'Repository':
        """
        Get an existing Repository resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] auto_init: Flag if the repository should be initiated with the configured values
        :param pulumi.Input[str] default_branch: The default branch of the repository. Defaults to `main`
        :param pulumi.Input[str] description: The description of the repository.
        :param pulumi.Input[str] gitignores: A specific gitignore that should be commited to the repositoryon creation if `auto_init` is set to `true`
               Need to exist in the gitea instance
        :param pulumi.Input[bool] has_issues: A flag if the repository should have issue management enabled or not.
        :param pulumi.Input[bool] has_projects: A flag if the repository should have the native project management enabled or not.
        :param pulumi.Input[bool] has_pull_requests: A flag if the repository should acceppt pull requests or not.
        :param pulumi.Input[bool] has_wiki: A flag if the repository should have the native wiki enabled or not.
        :param pulumi.Input[str] issue_labels: The Issue Label configuration to be used in this repository.
               Need to exist in the gitea instance
        :param pulumi.Input[str] license: The license under which the source code of this repository should be.
               Need to exist in the gitea instance
        :param pulumi.Input[str] migration_clone_addresse: DEPRECATED in favor of `migration_clone_address`
        :param pulumi.Input[str] migration_mirror_interval: valid time units are 'h', 'm', 's'. 0 to disable automatic sync
        :param pulumi.Input[str] migration_service: git/github/gitlab/gitea/gogs
        :param pulumi.Input[str] name: The Name of the repository
        :param pulumi.Input[bool] private: Flag if the repository should be private or not.
        :param pulumi.Input[str] username: The Owner of the repository
        :param pulumi.Input[str] website: A link to a website with more information.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RepositoryState.__new__(_RepositoryState)

        __props__.__dict__["allow_manual_merge"] = allow_manual_merge
        __props__.__dict__["allow_merge_commits"] = allow_merge_commits
        __props__.__dict__["allow_rebase"] = allow_rebase
        __props__.__dict__["allow_rebase_explicit"] = allow_rebase_explicit
        __props__.__dict__["allow_squash_merge"] = allow_squash_merge
        __props__.__dict__["archived"] = archived
        __props__.__dict__["auto_init"] = auto_init
        __props__.__dict__["autodetect_manual_merge"] = autodetect_manual_merge
        __props__.__dict__["clone_url"] = clone_url
        __props__.__dict__["created"] = created
        __props__.__dict__["default_branch"] = default_branch
        __props__.__dict__["description"] = description
        __props__.__dict__["gitignores"] = gitignores
        __props__.__dict__["has_issues"] = has_issues
        __props__.__dict__["has_projects"] = has_projects
        __props__.__dict__["has_pull_requests"] = has_pull_requests
        __props__.__dict__["has_wiki"] = has_wiki
        __props__.__dict__["html_url"] = html_url
        __props__.__dict__["ignore_whitespace_conflicts"] = ignore_whitespace_conflicts
        __props__.__dict__["issue_labels"] = issue_labels
        __props__.__dict__["license"] = license
        __props__.__dict__["migration_clone_address"] = migration_clone_address
        __props__.__dict__["migration_clone_addresse"] = migration_clone_addresse
        __props__.__dict__["migration_issue_labels"] = migration_issue_labels
        __props__.__dict__["migration_lfs"] = migration_lfs
        __props__.__dict__["migration_lfs_endpoint"] = migration_lfs_endpoint
        __props__.__dict__["migration_milestones"] = migration_milestones
        __props__.__dict__["migration_mirror_interval"] = migration_mirror_interval
        __props__.__dict__["migration_releases"] = migration_releases
        __props__.__dict__["migration_service"] = migration_service
        __props__.__dict__["migration_service_auth_password"] = migration_service_auth_password
        __props__.__dict__["migration_service_auth_token"] = migration_service_auth_token
        __props__.__dict__["migration_service_auth_username"] = migration_service_auth_username
        __props__.__dict__["mirror"] = mirror
        __props__.__dict__["name"] = name
        __props__.__dict__["permission_admin"] = permission_admin
        __props__.__dict__["permission_pull"] = permission_pull
        __props__.__dict__["permission_push"] = permission_push
        __props__.__dict__["private"] = private
        __props__.__dict__["readme"] = readme
        __props__.__dict__["repo_template"] = repo_template
        __props__.__dict__["ssh_url"] = ssh_url
        __props__.__dict__["updated"] = updated
        __props__.__dict__["username"] = username
        __props__.__dict__["website"] = website
        return Repository(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="allowManualMerge")
    def allow_manual_merge(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "allow_manual_merge")

    @property
    @pulumi.getter(name="allowMergeCommits")
    def allow_merge_commits(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "allow_merge_commits")

    @property
    @pulumi.getter(name="allowRebase")
    def allow_rebase(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "allow_rebase")

    @property
    @pulumi.getter(name="allowRebaseExplicit")
    def allow_rebase_explicit(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "allow_rebase_explicit")

    @property
    @pulumi.getter(name="allowSquashMerge")
    def allow_squash_merge(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "allow_squash_merge")

    @property
    @pulumi.getter
    def archived(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "archived")

    @property
    @pulumi.getter(name="autoInit")
    def auto_init(self) -> pulumi.Output[Optional[bool]]:
        """
        Flag if the repository should be initiated with the configured values
        """
        return pulumi.get(self, "auto_init")

    @property
    @pulumi.getter(name="autodetectManualMerge")
    def autodetect_manual_merge(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "autodetect_manual_merge")

    @property
    @pulumi.getter(name="cloneUrl")
    def clone_url(self) -> pulumi.Output[str]:
        return pulumi.get(self, "clone_url")

    @property
    @pulumi.getter
    def created(self) -> pulumi.Output[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> pulumi.Output[Optional[str]]:
        """
        The default branch of the repository. Defaults to `main`
        """
        return pulumi.get(self, "default_branch")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of the repository.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def gitignores(self) -> pulumi.Output[Optional[str]]:
        """
        A specific gitignore that should be commited to the repositoryon creation if `auto_init` is set to `true`
        Need to exist in the gitea instance
        """
        return pulumi.get(self, "gitignores")

    @property
    @pulumi.getter(name="hasIssues")
    def has_issues(self) -> pulumi.Output[Optional[bool]]:
        """
        A flag if the repository should have issue management enabled or not.
        """
        return pulumi.get(self, "has_issues")

    @property
    @pulumi.getter(name="hasProjects")
    def has_projects(self) -> pulumi.Output[Optional[bool]]:
        """
        A flag if the repository should have the native project management enabled or not.
        """
        return pulumi.get(self, "has_projects")

    @property
    @pulumi.getter(name="hasPullRequests")
    def has_pull_requests(self) -> pulumi.Output[Optional[bool]]:
        """
        A flag if the repository should acceppt pull requests or not.
        """
        return pulumi.get(self, "has_pull_requests")

    @property
    @pulumi.getter(name="hasWiki")
    def has_wiki(self) -> pulumi.Output[Optional[bool]]:
        """
        A flag if the repository should have the native wiki enabled or not.
        """
        return pulumi.get(self, "has_wiki")

    @property
    @pulumi.getter(name="htmlUrl")
    def html_url(self) -> pulumi.Output[str]:
        return pulumi.get(self, "html_url")

    @property
    @pulumi.getter(name="ignoreWhitespaceConflicts")
    def ignore_whitespace_conflicts(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "ignore_whitespace_conflicts")

    @property
    @pulumi.getter(name="issueLabels")
    def issue_labels(self) -> pulumi.Output[Optional[str]]:
        """
        The Issue Label configuration to be used in this repository.
        Need to exist in the gitea instance
        """
        return pulumi.get(self, "issue_labels")

    @property
    @pulumi.getter
    def license(self) -> pulumi.Output[Optional[str]]:
        """
        The license under which the source code of this repository should be.
        Need to exist in the gitea instance
        """
        return pulumi.get(self, "license")

    @property
    @pulumi.getter(name="migrationCloneAddress")
    def migration_clone_address(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "migration_clone_address")

    @property
    @pulumi.getter(name="migrationCloneAddresse")
    def migration_clone_addresse(self) -> pulumi.Output[Optional[str]]:
        """
        DEPRECATED in favor of `migration_clone_address`
        """
        return pulumi.get(self, "migration_clone_addresse")

    @property
    @pulumi.getter(name="migrationIssueLabels")
    def migration_issue_labels(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "migration_issue_labels")

    @property
    @pulumi.getter(name="migrationLfs")
    def migration_lfs(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "migration_lfs")

    @property
    @pulumi.getter(name="migrationLfsEndpoint")
    def migration_lfs_endpoint(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "migration_lfs_endpoint")

    @property
    @pulumi.getter(name="migrationMilestones")
    def migration_milestones(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "migration_milestones")

    @property
    @pulumi.getter(name="migrationMirrorInterval")
    def migration_mirror_interval(self) -> pulumi.Output[Optional[str]]:
        """
        valid time units are 'h', 'm', 's'. 0 to disable automatic sync
        """
        return pulumi.get(self, "migration_mirror_interval")

    @property
    @pulumi.getter(name="migrationReleases")
    def migration_releases(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "migration_releases")

    @property
    @pulumi.getter(name="migrationService")
    def migration_service(self) -> pulumi.Output[Optional[str]]:
        """
        git/github/gitlab/gitea/gogs
        """
        return pulumi.get(self, "migration_service")

    @property
    @pulumi.getter(name="migrationServiceAuthPassword")
    def migration_service_auth_password(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "migration_service_auth_password")

    @property
    @pulumi.getter(name="migrationServiceAuthToken")
    def migration_service_auth_token(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "migration_service_auth_token")

    @property
    @pulumi.getter(name="migrationServiceAuthUsername")
    def migration_service_auth_username(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "migration_service_auth_username")

    @property
    @pulumi.getter
    def mirror(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "mirror")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The Name of the repository
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="permissionAdmin")
    def permission_admin(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "permission_admin")

    @property
    @pulumi.getter(name="permissionPull")
    def permission_pull(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "permission_pull")

    @property
    @pulumi.getter(name="permissionPush")
    def permission_push(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "permission_push")

    @property
    @pulumi.getter
    def private(self) -> pulumi.Output[Optional[bool]]:
        """
        Flag if the repository should be private or not.
        """
        return pulumi.get(self, "private")

    @property
    @pulumi.getter
    def readme(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "readme")

    @property
    @pulumi.getter(name="repoTemplate")
    def repo_template(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "repo_template")

    @property
    @pulumi.getter(name="sshUrl")
    def ssh_url(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssh_url")

    @property
    @pulumi.getter
    def updated(self) -> pulumi.Output[str]:
        return pulumi.get(self, "updated")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[str]:
        """
        The Owner of the repository
        """
        return pulumi.get(self, "username")

    @property
    @pulumi.getter
    def website(self) -> pulumi.Output[Optional[str]]:
        """
        A link to a website with more information.
        """
        return pulumi.get(self, "website")

