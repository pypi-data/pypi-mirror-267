# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetRepoResult',
    'AwaitableGetRepoResult',
    'get_repo',
    'get_repo_output',
]

@pulumi.output_type
class GetRepoResult:
    """
    A collection of values returned by getRepo.
    """
    def __init__(__self__, clone_url=None, created=None, default_branch=None, description=None, fork=None, forks=None, full_name=None, html_url=None, id=None, mirror=None, name=None, open_issue_count=None, permission_admin=None, permission_pull=None, permission_push=None, private=None, size=None, ssh_url=None, stars=None, updated=None, username=None, watchers=None, website=None):
        if clone_url and not isinstance(clone_url, str):
            raise TypeError("Expected argument 'clone_url' to be a str")
        pulumi.set(__self__, "clone_url", clone_url)
        if created and not isinstance(created, str):
            raise TypeError("Expected argument 'created' to be a str")
        pulumi.set(__self__, "created", created)
        if default_branch and not isinstance(default_branch, str):
            raise TypeError("Expected argument 'default_branch' to be a str")
        pulumi.set(__self__, "default_branch", default_branch)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if fork and not isinstance(fork, bool):
            raise TypeError("Expected argument 'fork' to be a bool")
        pulumi.set(__self__, "fork", fork)
        if forks and not isinstance(forks, int):
            raise TypeError("Expected argument 'forks' to be a int")
        pulumi.set(__self__, "forks", forks)
        if full_name and not isinstance(full_name, str):
            raise TypeError("Expected argument 'full_name' to be a str")
        pulumi.set(__self__, "full_name", full_name)
        if html_url and not isinstance(html_url, str):
            raise TypeError("Expected argument 'html_url' to be a str")
        pulumi.set(__self__, "html_url", html_url)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if mirror and not isinstance(mirror, bool):
            raise TypeError("Expected argument 'mirror' to be a bool")
        pulumi.set(__self__, "mirror", mirror)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if open_issue_count and not isinstance(open_issue_count, int):
            raise TypeError("Expected argument 'open_issue_count' to be a int")
        pulumi.set(__self__, "open_issue_count", open_issue_count)
        if permission_admin and not isinstance(permission_admin, bool):
            raise TypeError("Expected argument 'permission_admin' to be a bool")
        pulumi.set(__self__, "permission_admin", permission_admin)
        if permission_pull and not isinstance(permission_pull, bool):
            raise TypeError("Expected argument 'permission_pull' to be a bool")
        pulumi.set(__self__, "permission_pull", permission_pull)
        if permission_push and not isinstance(permission_push, bool):
            raise TypeError("Expected argument 'permission_push' to be a bool")
        pulumi.set(__self__, "permission_push", permission_push)
        if private and not isinstance(private, bool):
            raise TypeError("Expected argument 'private' to be a bool")
        pulumi.set(__self__, "private", private)
        if size and not isinstance(size, int):
            raise TypeError("Expected argument 'size' to be a int")
        pulumi.set(__self__, "size", size)
        if ssh_url and not isinstance(ssh_url, str):
            raise TypeError("Expected argument 'ssh_url' to be a str")
        pulumi.set(__self__, "ssh_url", ssh_url)
        if stars and not isinstance(stars, int):
            raise TypeError("Expected argument 'stars' to be a int")
        pulumi.set(__self__, "stars", stars)
        if updated and not isinstance(updated, str):
            raise TypeError("Expected argument 'updated' to be a str")
        pulumi.set(__self__, "updated", updated)
        if username and not isinstance(username, str):
            raise TypeError("Expected argument 'username' to be a str")
        pulumi.set(__self__, "username", username)
        if watchers and not isinstance(watchers, int):
            raise TypeError("Expected argument 'watchers' to be a int")
        pulumi.set(__self__, "watchers", watchers)
        if website and not isinstance(website, str):
            raise TypeError("Expected argument 'website' to be a str")
        pulumi.set(__self__, "website", website)

    @property
    @pulumi.getter(name="cloneUrl")
    def clone_url(self) -> str:
        return pulumi.get(self, "clone_url")

    @property
    @pulumi.getter
    def created(self) -> str:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> str:
        return pulumi.get(self, "default_branch")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def fork(self) -> bool:
        return pulumi.get(self, "fork")

    @property
    @pulumi.getter
    def forks(self) -> int:
        return pulumi.get(self, "forks")

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> str:
        return pulumi.get(self, "full_name")

    @property
    @pulumi.getter(name="htmlUrl")
    def html_url(self) -> str:
        return pulumi.get(self, "html_url")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def mirror(self) -> bool:
        return pulumi.get(self, "mirror")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="openIssueCount")
    def open_issue_count(self) -> int:
        return pulumi.get(self, "open_issue_count")

    @property
    @pulumi.getter(name="permissionAdmin")
    def permission_admin(self) -> bool:
        return pulumi.get(self, "permission_admin")

    @property
    @pulumi.getter(name="permissionPull")
    def permission_pull(self) -> bool:
        return pulumi.get(self, "permission_pull")

    @property
    @pulumi.getter(name="permissionPush")
    def permission_push(self) -> bool:
        return pulumi.get(self, "permission_push")

    @property
    @pulumi.getter
    def private(self) -> bool:
        return pulumi.get(self, "private")

    @property
    @pulumi.getter
    def size(self) -> int:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="sshUrl")
    def ssh_url(self) -> str:
        return pulumi.get(self, "ssh_url")

    @property
    @pulumi.getter
    def stars(self) -> int:
        return pulumi.get(self, "stars")

    @property
    @pulumi.getter
    def updated(self) -> str:
        return pulumi.get(self, "updated")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter
    def watchers(self) -> int:
        return pulumi.get(self, "watchers")

    @property
    @pulumi.getter
    def website(self) -> str:
        return pulumi.get(self, "website")


class AwaitableGetRepoResult(GetRepoResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRepoResult(
            clone_url=self.clone_url,
            created=self.created,
            default_branch=self.default_branch,
            description=self.description,
            fork=self.fork,
            forks=self.forks,
            full_name=self.full_name,
            html_url=self.html_url,
            id=self.id,
            mirror=self.mirror,
            name=self.name,
            open_issue_count=self.open_issue_count,
            permission_admin=self.permission_admin,
            permission_pull=self.permission_pull,
            permission_push=self.permission_push,
            private=self.private,
            size=self.size,
            ssh_url=self.ssh_url,
            stars=self.stars,
            updated=self.updated,
            username=self.username,
            watchers=self.watchers,
            website=self.website)


def get_repo(name: Optional[str] = None,
             username: Optional[str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRepoResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['username'] = username
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('gitea:index/getRepo:getRepo', __args__, opts=opts, typ=GetRepoResult).value

    return AwaitableGetRepoResult(
        clone_url=pulumi.get(__ret__, 'clone_url'),
        created=pulumi.get(__ret__, 'created'),
        default_branch=pulumi.get(__ret__, 'default_branch'),
        description=pulumi.get(__ret__, 'description'),
        fork=pulumi.get(__ret__, 'fork'),
        forks=pulumi.get(__ret__, 'forks'),
        full_name=pulumi.get(__ret__, 'full_name'),
        html_url=pulumi.get(__ret__, 'html_url'),
        id=pulumi.get(__ret__, 'id'),
        mirror=pulumi.get(__ret__, 'mirror'),
        name=pulumi.get(__ret__, 'name'),
        open_issue_count=pulumi.get(__ret__, 'open_issue_count'),
        permission_admin=pulumi.get(__ret__, 'permission_admin'),
        permission_pull=pulumi.get(__ret__, 'permission_pull'),
        permission_push=pulumi.get(__ret__, 'permission_push'),
        private=pulumi.get(__ret__, 'private'),
        size=pulumi.get(__ret__, 'size'),
        ssh_url=pulumi.get(__ret__, 'ssh_url'),
        stars=pulumi.get(__ret__, 'stars'),
        updated=pulumi.get(__ret__, 'updated'),
        username=pulumi.get(__ret__, 'username'),
        watchers=pulumi.get(__ret__, 'watchers'),
        website=pulumi.get(__ret__, 'website'))


@_utilities.lift_output_func(get_repo)
def get_repo_output(name: Optional[pulumi.Input[str]] = None,
                    username: Optional[pulumi.Input[str]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRepoResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
