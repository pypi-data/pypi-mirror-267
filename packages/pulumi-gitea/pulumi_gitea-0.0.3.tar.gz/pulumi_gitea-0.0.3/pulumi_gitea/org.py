# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['OrgArgs', 'Org']

@pulumi.input_type
class OrgArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 full_name: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 repo_admin_change_team_access: Optional[pulumi.Input[bool]] = None,
                 visibility: Optional[pulumi.Input[str]] = None,
                 website: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Org resource.
        :param pulumi.Input[str] description: A description of this organisation.
        :param pulumi.Input[str] full_name: The display name of the organisation. Defaults to the value of `name`.
        :param pulumi.Input[str] name: The name of the organisation without spaces.
        :param pulumi.Input[str] visibility: Flag is this organisation should be publicly visible or not.
        :param pulumi.Input[str] website: A link to a website with more information about this organisation.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if full_name is not None:
            pulumi.set(__self__, "full_name", full_name)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if repo_admin_change_team_access is not None:
            pulumi.set(__self__, "repo_admin_change_team_access", repo_admin_change_team_access)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)
        if website is not None:
            pulumi.set(__self__, "website", website)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A description of this organisation.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> Optional[pulumi.Input[str]]:
        """
        The display name of the organisation. Defaults to the value of `name`.
        """
        return pulumi.get(self, "full_name")

    @full_name.setter
    def full_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "full_name", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the organisation without spaces.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="repoAdminChangeTeamAccess")
    def repo_admin_change_team_access(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "repo_admin_change_team_access")

    @repo_admin_change_team_access.setter
    def repo_admin_change_team_access(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "repo_admin_change_team_access", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input[str]]:
        """
        Flag is this organisation should be publicly visible or not.
        """
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visibility", value)

    @property
    @pulumi.getter
    def website(self) -> Optional[pulumi.Input[str]]:
        """
        A link to a website with more information about this organisation.
        """
        return pulumi.get(self, "website")

    @website.setter
    def website(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "website", value)


@pulumi.input_type
class _OrgState:
    def __init__(__self__, *,
                 avatar_url: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 full_name: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 repo_admin_change_team_access: Optional[pulumi.Input[bool]] = None,
                 repos: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 visibility: Optional[pulumi.Input[str]] = None,
                 website: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Org resources.
        :param pulumi.Input[str] description: A description of this organisation.
        :param pulumi.Input[str] full_name: The display name of the organisation. Defaults to the value of `name`.
        :param pulumi.Input[str] name: The name of the organisation without spaces.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] repos: List of all Repositories that are part of this organisation
        :param pulumi.Input[str] visibility: Flag is this organisation should be publicly visible or not.
        :param pulumi.Input[str] website: A link to a website with more information about this organisation.
        """
        if avatar_url is not None:
            pulumi.set(__self__, "avatar_url", avatar_url)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if full_name is not None:
            pulumi.set(__self__, "full_name", full_name)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if repo_admin_change_team_access is not None:
            pulumi.set(__self__, "repo_admin_change_team_access", repo_admin_change_team_access)
        if repos is not None:
            pulumi.set(__self__, "repos", repos)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)
        if website is not None:
            pulumi.set(__self__, "website", website)

    @property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "avatar_url")

    @avatar_url.setter
    def avatar_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "avatar_url", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A description of this organisation.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> Optional[pulumi.Input[str]]:
        """
        The display name of the organisation. Defaults to the value of `name`.
        """
        return pulumi.get(self, "full_name")

    @full_name.setter
    def full_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "full_name", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the organisation without spaces.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="repoAdminChangeTeamAccess")
    def repo_admin_change_team_access(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "repo_admin_change_team_access")

    @repo_admin_change_team_access.setter
    def repo_admin_change_team_access(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "repo_admin_change_team_access", value)

    @property
    @pulumi.getter
    def repos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of all Repositories that are part of this organisation
        """
        return pulumi.get(self, "repos")

    @repos.setter
    def repos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "repos", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input[str]]:
        """
        Flag is this organisation should be publicly visible or not.
        """
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visibility", value)

    @property
    @pulumi.getter
    def website(self) -> Optional[pulumi.Input[str]]:
        """
        A link to a website with more information about this organisation.
        """
        return pulumi.get(self, "website")

    @website.setter
    def website(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "website", value)


class Org(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 full_name: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 repo_admin_change_team_access: Optional[pulumi.Input[bool]] = None,
                 visibility: Optional[pulumi.Input[str]] = None,
                 website: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        `Org` manages a gitea organisation.

        Organisations are a way to group repositories and abstract permission management in a gitea instance.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_gitea as gitea

        test_org = gitea.Org("testOrg")
        org_repo = gitea.Repository("orgRepo", username=test_org.name)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: A description of this organisation.
        :param pulumi.Input[str] full_name: The display name of the organisation. Defaults to the value of `name`.
        :param pulumi.Input[str] name: The name of the organisation without spaces.
        :param pulumi.Input[str] visibility: Flag is this organisation should be publicly visible or not.
        :param pulumi.Input[str] website: A link to a website with more information about this organisation.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[OrgArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        `Org` manages a gitea organisation.

        Organisations are a way to group repositories and abstract permission management in a gitea instance.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_gitea as gitea

        test_org = gitea.Org("testOrg")
        org_repo = gitea.Repository("orgRepo", username=test_org.name)
        ```

        :param str resource_name: The name of the resource.
        :param OrgArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OrgArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 full_name: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 repo_admin_change_team_access: Optional[pulumi.Input[bool]] = None,
                 visibility: Optional[pulumi.Input[str]] = None,
                 website: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OrgArgs.__new__(OrgArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["full_name"] = full_name
            __props__.__dict__["location"] = location
            __props__.__dict__["name"] = name
            __props__.__dict__["repo_admin_change_team_access"] = repo_admin_change_team_access
            __props__.__dict__["visibility"] = visibility
            __props__.__dict__["website"] = website
            __props__.__dict__["avatar_url"] = None
            __props__.__dict__["repos"] = None
        super(Org, __self__).__init__(
            'gitea:index/org:Org',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            avatar_url: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            full_name: Optional[pulumi.Input[str]] = None,
            location: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            repo_admin_change_team_access: Optional[pulumi.Input[bool]] = None,
            repos: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            visibility: Optional[pulumi.Input[str]] = None,
            website: Optional[pulumi.Input[str]] = None) -> 'Org':
        """
        Get an existing Org resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: A description of this organisation.
        :param pulumi.Input[str] full_name: The display name of the organisation. Defaults to the value of `name`.
        :param pulumi.Input[str] name: The name of the organisation without spaces.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] repos: List of all Repositories that are part of this organisation
        :param pulumi.Input[str] visibility: Flag is this organisation should be publicly visible or not.
        :param pulumi.Input[str] website: A link to a website with more information about this organisation.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OrgState.__new__(_OrgState)

        __props__.__dict__["avatar_url"] = avatar_url
        __props__.__dict__["description"] = description
        __props__.__dict__["full_name"] = full_name
        __props__.__dict__["location"] = location
        __props__.__dict__["name"] = name
        __props__.__dict__["repo_admin_change_team_access"] = repo_admin_change_team_access
        __props__.__dict__["repos"] = repos
        __props__.__dict__["visibility"] = visibility
        __props__.__dict__["website"] = website
        return Org(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> pulumi.Output[str]:
        return pulumi.get(self, "avatar_url")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        A description of this organisation.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> pulumi.Output[Optional[str]]:
        """
        The display name of the organisation. Defaults to the value of `name`.
        """
        return pulumi.get(self, "full_name")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the organisation without spaces.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="repoAdminChangeTeamAccess")
    def repo_admin_change_team_access(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "repo_admin_change_team_access")

    @property
    @pulumi.getter
    def repos(self) -> pulumi.Output[Sequence[str]]:
        """
        List of all Repositories that are part of this organisation
        """
        return pulumi.get(self, "repos")

    @property
    @pulumi.getter
    def visibility(self) -> pulumi.Output[Optional[str]]:
        """
        Flag is this organisation should be publicly visible or not.
        """
        return pulumi.get(self, "visibility")

    @property
    @pulumi.getter
    def website(self) -> pulumi.Output[Optional[str]]:
        """
        A link to a website with more information about this organisation.
        """
        return pulumi.get(self, "website")

