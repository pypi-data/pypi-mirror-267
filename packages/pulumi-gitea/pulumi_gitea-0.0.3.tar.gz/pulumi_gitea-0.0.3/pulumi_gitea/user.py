# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['UserArgs', 'User']

@pulumi.input_type
class UserArgs:
    def __init__(__self__, *,
                 email: pulumi.Input[str],
                 login_name: pulumi.Input[str],
                 password: pulumi.Input[str],
                 username: pulumi.Input[str],
                 active: Optional[pulumi.Input[bool]] = None,
                 admin: Optional[pulumi.Input[bool]] = None,
                 allow_create_organization: Optional[pulumi.Input[bool]] = None,
                 allow_git_hook: Optional[pulumi.Input[bool]] = None,
                 allow_import_local: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 force_password_change: Optional[pulumi.Input[bool]] = None,
                 full_name: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 max_repo_creation: Optional[pulumi.Input[int]] = None,
                 must_change_password: Optional[pulumi.Input[bool]] = None,
                 prohibit_login: Optional[pulumi.Input[bool]] = None,
                 restricted: Optional[pulumi.Input[bool]] = None,
                 send_notification: Optional[pulumi.Input[bool]] = None,
                 visibility: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a User resource.
        :param pulumi.Input[str] email: E-Mail Address of the user
        :param pulumi.Input[str] login_name: The login name can differ from the username
        :param pulumi.Input[str] password: Password to be set for the user
        :param pulumi.Input[str] username: Username of the user to be created
        :param pulumi.Input[bool] active: Flag if this user should be active or not
        :param pulumi.Input[bool] admin: Flag if this user should be an administrator or not
        :param pulumi.Input[str] description: A description of the user
        :param pulumi.Input[bool] force_password_change: Flag if the user defined password should be overwritten or not
        :param pulumi.Input[str] full_name: Full name of the user
        :param pulumi.Input[bool] must_change_password: Flag if the user should change the password after first login
        :param pulumi.Input[bool] prohibit_login: Flag if the user should not be allowed to log in (bot user)
        :param pulumi.Input[bool] send_notification: Flag to send a notification about the user creation to the defined `email`
        :param pulumi.Input[str] visibility: Visibility of the user. Can be `public`, `limited` or `private`
        """
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "login_name", login_name)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)
        if active is not None:
            pulumi.set(__self__, "active", active)
        if admin is not None:
            pulumi.set(__self__, "admin", admin)
        if allow_create_organization is not None:
            pulumi.set(__self__, "allow_create_organization", allow_create_organization)
        if allow_git_hook is not None:
            pulumi.set(__self__, "allow_git_hook", allow_git_hook)
        if allow_import_local is not None:
            pulumi.set(__self__, "allow_import_local", allow_import_local)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if force_password_change is not None:
            pulumi.set(__self__, "force_password_change", force_password_change)
        if full_name is not None:
            pulumi.set(__self__, "full_name", full_name)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if max_repo_creation is not None:
            pulumi.set(__self__, "max_repo_creation", max_repo_creation)
        if must_change_password is not None:
            pulumi.set(__self__, "must_change_password", must_change_password)
        if prohibit_login is not None:
            pulumi.set(__self__, "prohibit_login", prohibit_login)
        if restricted is not None:
            pulumi.set(__self__, "restricted", restricted)
        if send_notification is not None:
            pulumi.set(__self__, "send_notification", send_notification)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Input[str]:
        """
        E-Mail Address of the user
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[str]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="loginName")
    def login_name(self) -> pulumi.Input[str]:
        """
        The login name can differ from the username
        """
        return pulumi.get(self, "login_name")

    @login_name.setter
    def login_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "login_name", value)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        Password to be set for the user
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        Username of the user to be created
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def active(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag if this user should be active or not
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter
    def admin(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag if this user should be an administrator or not
        """
        return pulumi.get(self, "admin")

    @admin.setter
    def admin(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "admin", value)

    @property
    @pulumi.getter(name="allowCreateOrganization")
    def allow_create_organization(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_create_organization")

    @allow_create_organization.setter
    def allow_create_organization(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_create_organization", value)

    @property
    @pulumi.getter(name="allowGitHook")
    def allow_git_hook(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_git_hook")

    @allow_git_hook.setter
    def allow_git_hook(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_git_hook", value)

    @property
    @pulumi.getter(name="allowImportLocal")
    def allow_import_local(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_import_local")

    @allow_import_local.setter
    def allow_import_local(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_import_local", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A description of the user
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="forcePasswordChange")
    def force_password_change(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag if the user defined password should be overwritten or not
        """
        return pulumi.get(self, "force_password_change")

    @force_password_change.setter
    def force_password_change(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_password_change", value)

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> Optional[pulumi.Input[str]]:
        """
        Full name of the user
        """
        return pulumi.get(self, "full_name")

    @full_name.setter
    def full_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "full_name", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="maxRepoCreation")
    def max_repo_creation(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_repo_creation")

    @max_repo_creation.setter
    def max_repo_creation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_repo_creation", value)

    @property
    @pulumi.getter(name="mustChangePassword")
    def must_change_password(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag if the user should change the password after first login
        """
        return pulumi.get(self, "must_change_password")

    @must_change_password.setter
    def must_change_password(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "must_change_password", value)

    @property
    @pulumi.getter(name="prohibitLogin")
    def prohibit_login(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag if the user should not be allowed to log in (bot user)
        """
        return pulumi.get(self, "prohibit_login")

    @prohibit_login.setter
    def prohibit_login(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "prohibit_login", value)

    @property
    @pulumi.getter
    def restricted(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "restricted")

    @restricted.setter
    def restricted(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "restricted", value)

    @property
    @pulumi.getter(name="sendNotification")
    def send_notification(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to send a notification about the user creation to the defined `email`
        """
        return pulumi.get(self, "send_notification")

    @send_notification.setter
    def send_notification(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "send_notification", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input[str]]:
        """
        Visibility of the user. Can be `public`, `limited` or `private`
        """
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class _UserState:
    def __init__(__self__, *,
                 active: Optional[pulumi.Input[bool]] = None,
                 admin: Optional[pulumi.Input[bool]] = None,
                 allow_create_organization: Optional[pulumi.Input[bool]] = None,
                 allow_git_hook: Optional[pulumi.Input[bool]] = None,
                 allow_import_local: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 force_password_change: Optional[pulumi.Input[bool]] = None,
                 full_name: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 login_name: Optional[pulumi.Input[str]] = None,
                 max_repo_creation: Optional[pulumi.Input[int]] = None,
                 must_change_password: Optional[pulumi.Input[bool]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 prohibit_login: Optional[pulumi.Input[bool]] = None,
                 restricted: Optional[pulumi.Input[bool]] = None,
                 send_notification: Optional[pulumi.Input[bool]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering User resources.
        :param pulumi.Input[bool] active: Flag if this user should be active or not
        :param pulumi.Input[bool] admin: Flag if this user should be an administrator or not
        :param pulumi.Input[str] description: A description of the user
        :param pulumi.Input[str] email: E-Mail Address of the user
        :param pulumi.Input[bool] force_password_change: Flag if the user defined password should be overwritten or not
        :param pulumi.Input[str] full_name: Full name of the user
        :param pulumi.Input[str] login_name: The login name can differ from the username
        :param pulumi.Input[bool] must_change_password: Flag if the user should change the password after first login
        :param pulumi.Input[str] password: Password to be set for the user
        :param pulumi.Input[bool] prohibit_login: Flag if the user should not be allowed to log in (bot user)
        :param pulumi.Input[bool] send_notification: Flag to send a notification about the user creation to the defined `email`
        :param pulumi.Input[str] username: Username of the user to be created
        :param pulumi.Input[str] visibility: Visibility of the user. Can be `public`, `limited` or `private`
        """
        if active is not None:
            pulumi.set(__self__, "active", active)
        if admin is not None:
            pulumi.set(__self__, "admin", admin)
        if allow_create_organization is not None:
            pulumi.set(__self__, "allow_create_organization", allow_create_organization)
        if allow_git_hook is not None:
            pulumi.set(__self__, "allow_git_hook", allow_git_hook)
        if allow_import_local is not None:
            pulumi.set(__self__, "allow_import_local", allow_import_local)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if force_password_change is not None:
            pulumi.set(__self__, "force_password_change", force_password_change)
        if full_name is not None:
            pulumi.set(__self__, "full_name", full_name)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if login_name is not None:
            pulumi.set(__self__, "login_name", login_name)
        if max_repo_creation is not None:
            pulumi.set(__self__, "max_repo_creation", max_repo_creation)
        if must_change_password is not None:
            pulumi.set(__self__, "must_change_password", must_change_password)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if prohibit_login is not None:
            pulumi.set(__self__, "prohibit_login", prohibit_login)
        if restricted is not None:
            pulumi.set(__self__, "restricted", restricted)
        if send_notification is not None:
            pulumi.set(__self__, "send_notification", send_notification)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter
    def active(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag if this user should be active or not
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter
    def admin(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag if this user should be an administrator or not
        """
        return pulumi.get(self, "admin")

    @admin.setter
    def admin(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "admin", value)

    @property
    @pulumi.getter(name="allowCreateOrganization")
    def allow_create_organization(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_create_organization")

    @allow_create_organization.setter
    def allow_create_organization(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_create_organization", value)

    @property
    @pulumi.getter(name="allowGitHook")
    def allow_git_hook(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_git_hook")

    @allow_git_hook.setter
    def allow_git_hook(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_git_hook", value)

    @property
    @pulumi.getter(name="allowImportLocal")
    def allow_import_local(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_import_local")

    @allow_import_local.setter
    def allow_import_local(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_import_local", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A description of the user
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        E-Mail Address of the user
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="forcePasswordChange")
    def force_password_change(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag if the user defined password should be overwritten or not
        """
        return pulumi.get(self, "force_password_change")

    @force_password_change.setter
    def force_password_change(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_password_change", value)

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> Optional[pulumi.Input[str]]:
        """
        Full name of the user
        """
        return pulumi.get(self, "full_name")

    @full_name.setter
    def full_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "full_name", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="loginName")
    def login_name(self) -> Optional[pulumi.Input[str]]:
        """
        The login name can differ from the username
        """
        return pulumi.get(self, "login_name")

    @login_name.setter
    def login_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_name", value)

    @property
    @pulumi.getter(name="maxRepoCreation")
    def max_repo_creation(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_repo_creation")

    @max_repo_creation.setter
    def max_repo_creation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_repo_creation", value)

    @property
    @pulumi.getter(name="mustChangePassword")
    def must_change_password(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag if the user should change the password after first login
        """
        return pulumi.get(self, "must_change_password")

    @must_change_password.setter
    def must_change_password(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "must_change_password", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password to be set for the user
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="prohibitLogin")
    def prohibit_login(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag if the user should not be allowed to log in (bot user)
        """
        return pulumi.get(self, "prohibit_login")

    @prohibit_login.setter
    def prohibit_login(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "prohibit_login", value)

    @property
    @pulumi.getter
    def restricted(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "restricted")

    @restricted.setter
    def restricted(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "restricted", value)

    @property
    @pulumi.getter(name="sendNotification")
    def send_notification(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to send a notification about the user creation to the defined `email`
        """
        return pulumi.get(self, "send_notification")

    @send_notification.setter
    def send_notification(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "send_notification", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username of the user to be created
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input[str]]:
        """
        Visibility of the user. Can be `public`, `limited` or `private`
        """
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visibility", value)


class User(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 active: Optional[pulumi.Input[bool]] = None,
                 admin: Optional[pulumi.Input[bool]] = None,
                 allow_create_organization: Optional[pulumi.Input[bool]] = None,
                 allow_git_hook: Optional[pulumi.Input[bool]] = None,
                 allow_import_local: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 force_password_change: Optional[pulumi.Input[bool]] = None,
                 full_name: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 login_name: Optional[pulumi.Input[str]] = None,
                 max_repo_creation: Optional[pulumi.Input[int]] = None,
                 must_change_password: Optional[pulumi.Input[bool]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 prohibit_login: Optional[pulumi.Input[bool]] = None,
                 restricted: Optional[pulumi.Input[bool]] = None,
                 send_notification: Optional[pulumi.Input[bool]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        `User` manages a native gitea user.

        If you are using OIDC or other kinds of authentication mechanisms you can still try to managessh keys or other ressources this way

        ## Example Usage

        ```python
        import pulumi
        import pulumi_gitea as gitea

        test = gitea.User("test",
            email="test@user.dev",
            login_name="test",
            must_change_password=False,
            password="Geheim1!",
            username="test")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] active: Flag if this user should be active or not
        :param pulumi.Input[bool] admin: Flag if this user should be an administrator or not
        :param pulumi.Input[str] description: A description of the user
        :param pulumi.Input[str] email: E-Mail Address of the user
        :param pulumi.Input[bool] force_password_change: Flag if the user defined password should be overwritten or not
        :param pulumi.Input[str] full_name: Full name of the user
        :param pulumi.Input[str] login_name: The login name can differ from the username
        :param pulumi.Input[bool] must_change_password: Flag if the user should change the password after first login
        :param pulumi.Input[str] password: Password to be set for the user
        :param pulumi.Input[bool] prohibit_login: Flag if the user should not be allowed to log in (bot user)
        :param pulumi.Input[bool] send_notification: Flag to send a notification about the user creation to the defined `email`
        :param pulumi.Input[str] username: Username of the user to be created
        :param pulumi.Input[str] visibility: Visibility of the user. Can be `public`, `limited` or `private`
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: UserArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        `User` manages a native gitea user.

        If you are using OIDC or other kinds of authentication mechanisms you can still try to managessh keys or other ressources this way

        ## Example Usage

        ```python
        import pulumi
        import pulumi_gitea as gitea

        test = gitea.User("test",
            email="test@user.dev",
            login_name="test",
            must_change_password=False,
            password="Geheim1!",
            username="test")
        ```

        :param str resource_name: The name of the resource.
        :param UserArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UserArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 active: Optional[pulumi.Input[bool]] = None,
                 admin: Optional[pulumi.Input[bool]] = None,
                 allow_create_organization: Optional[pulumi.Input[bool]] = None,
                 allow_git_hook: Optional[pulumi.Input[bool]] = None,
                 allow_import_local: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 force_password_change: Optional[pulumi.Input[bool]] = None,
                 full_name: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 login_name: Optional[pulumi.Input[str]] = None,
                 max_repo_creation: Optional[pulumi.Input[int]] = None,
                 must_change_password: Optional[pulumi.Input[bool]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 prohibit_login: Optional[pulumi.Input[bool]] = None,
                 restricted: Optional[pulumi.Input[bool]] = None,
                 send_notification: Optional[pulumi.Input[bool]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UserArgs.__new__(UserArgs)

            __props__.__dict__["active"] = active
            __props__.__dict__["admin"] = admin
            __props__.__dict__["allow_create_organization"] = allow_create_organization
            __props__.__dict__["allow_git_hook"] = allow_git_hook
            __props__.__dict__["allow_import_local"] = allow_import_local
            __props__.__dict__["description"] = description
            if email is None and not opts.urn:
                raise TypeError("Missing required property 'email'")
            __props__.__dict__["email"] = email
            __props__.__dict__["force_password_change"] = force_password_change
            __props__.__dict__["full_name"] = full_name
            __props__.__dict__["location"] = location
            if login_name is None and not opts.urn:
                raise TypeError("Missing required property 'login_name'")
            __props__.__dict__["login_name"] = login_name
            __props__.__dict__["max_repo_creation"] = max_repo_creation
            __props__.__dict__["must_change_password"] = must_change_password
            if password is None and not opts.urn:
                raise TypeError("Missing required property 'password'")
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            __props__.__dict__["prohibit_login"] = prohibit_login
            __props__.__dict__["restricted"] = restricted
            __props__.__dict__["send_notification"] = send_notification
            if username is None and not opts.urn:
                raise TypeError("Missing required property 'username'")
            __props__.__dict__["username"] = username
            __props__.__dict__["visibility"] = visibility
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(User, __self__).__init__(
            'gitea:index/user:User',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            active: Optional[pulumi.Input[bool]] = None,
            admin: Optional[pulumi.Input[bool]] = None,
            allow_create_organization: Optional[pulumi.Input[bool]] = None,
            allow_git_hook: Optional[pulumi.Input[bool]] = None,
            allow_import_local: Optional[pulumi.Input[bool]] = None,
            description: Optional[pulumi.Input[str]] = None,
            email: Optional[pulumi.Input[str]] = None,
            force_password_change: Optional[pulumi.Input[bool]] = None,
            full_name: Optional[pulumi.Input[str]] = None,
            location: Optional[pulumi.Input[str]] = None,
            login_name: Optional[pulumi.Input[str]] = None,
            max_repo_creation: Optional[pulumi.Input[int]] = None,
            must_change_password: Optional[pulumi.Input[bool]] = None,
            password: Optional[pulumi.Input[str]] = None,
            prohibit_login: Optional[pulumi.Input[bool]] = None,
            restricted: Optional[pulumi.Input[bool]] = None,
            send_notification: Optional[pulumi.Input[bool]] = None,
            username: Optional[pulumi.Input[str]] = None,
            visibility: Optional[pulumi.Input[str]] = None) -> 'User':
        """
        Get an existing User resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] active: Flag if this user should be active or not
        :param pulumi.Input[bool] admin: Flag if this user should be an administrator or not
        :param pulumi.Input[str] description: A description of the user
        :param pulumi.Input[str] email: E-Mail Address of the user
        :param pulumi.Input[bool] force_password_change: Flag if the user defined password should be overwritten or not
        :param pulumi.Input[str] full_name: Full name of the user
        :param pulumi.Input[str] login_name: The login name can differ from the username
        :param pulumi.Input[bool] must_change_password: Flag if the user should change the password after first login
        :param pulumi.Input[str] password: Password to be set for the user
        :param pulumi.Input[bool] prohibit_login: Flag if the user should not be allowed to log in (bot user)
        :param pulumi.Input[bool] send_notification: Flag to send a notification about the user creation to the defined `email`
        :param pulumi.Input[str] username: Username of the user to be created
        :param pulumi.Input[str] visibility: Visibility of the user. Can be `public`, `limited` or `private`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _UserState.__new__(_UserState)

        __props__.__dict__["active"] = active
        __props__.__dict__["admin"] = admin
        __props__.__dict__["allow_create_organization"] = allow_create_organization
        __props__.__dict__["allow_git_hook"] = allow_git_hook
        __props__.__dict__["allow_import_local"] = allow_import_local
        __props__.__dict__["description"] = description
        __props__.__dict__["email"] = email
        __props__.__dict__["force_password_change"] = force_password_change
        __props__.__dict__["full_name"] = full_name
        __props__.__dict__["location"] = location
        __props__.__dict__["login_name"] = login_name
        __props__.__dict__["max_repo_creation"] = max_repo_creation
        __props__.__dict__["must_change_password"] = must_change_password
        __props__.__dict__["password"] = password
        __props__.__dict__["prohibit_login"] = prohibit_login
        __props__.__dict__["restricted"] = restricted
        __props__.__dict__["send_notification"] = send_notification
        __props__.__dict__["username"] = username
        __props__.__dict__["visibility"] = visibility
        return User(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def active(self) -> pulumi.Output[Optional[bool]]:
        """
        Flag if this user should be active or not
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter
    def admin(self) -> pulumi.Output[Optional[bool]]:
        """
        Flag if this user should be an administrator or not
        """
        return pulumi.get(self, "admin")

    @property
    @pulumi.getter(name="allowCreateOrganization")
    def allow_create_organization(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "allow_create_organization")

    @property
    @pulumi.getter(name="allowGitHook")
    def allow_git_hook(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "allow_git_hook")

    @property
    @pulumi.getter(name="allowImportLocal")
    def allow_import_local(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "allow_import_local")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        A description of the user
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def email(self) -> pulumi.Output[str]:
        """
        E-Mail Address of the user
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="forcePasswordChange")
    def force_password_change(self) -> pulumi.Output[Optional[bool]]:
        """
        Flag if the user defined password should be overwritten or not
        """
        return pulumi.get(self, "force_password_change")

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> pulumi.Output[str]:
        """
        Full name of the user
        """
        return pulumi.get(self, "full_name")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="loginName")
    def login_name(self) -> pulumi.Output[str]:
        """
        The login name can differ from the username
        """
        return pulumi.get(self, "login_name")

    @property
    @pulumi.getter(name="maxRepoCreation")
    def max_repo_creation(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "max_repo_creation")

    @property
    @pulumi.getter(name="mustChangePassword")
    def must_change_password(self) -> pulumi.Output[Optional[bool]]:
        """
        Flag if the user should change the password after first login
        """
        return pulumi.get(self, "must_change_password")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[str]:
        """
        Password to be set for the user
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="prohibitLogin")
    def prohibit_login(self) -> pulumi.Output[Optional[bool]]:
        """
        Flag if the user should not be allowed to log in (bot user)
        """
        return pulumi.get(self, "prohibit_login")

    @property
    @pulumi.getter
    def restricted(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "restricted")

    @property
    @pulumi.getter(name="sendNotification")
    def send_notification(self) -> pulumi.Output[Optional[bool]]:
        """
        Flag to send a notification about the user creation to the defined `email`
        """
        return pulumi.get(self, "send_notification")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[str]:
        """
        Username of the user to be created
        """
        return pulumi.get(self, "username")

    @property
    @pulumi.getter
    def visibility(self) -> pulumi.Output[Optional[str]]:
        """
        Visibility of the user. Can be `public`, `limited` or `private`
        """
        return pulumi.get(self, "visibility")

