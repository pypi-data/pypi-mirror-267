# coding: utf-8

"""
    flatastic API Schema

    This schema was generated by the reverse-engineered-apis project with the help of alufers/mitmproxy2swagger and openapitools/openapi-generator. It is not guaranteed to be complete or correct.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class GetShouts200ResponseInner(BaseModel):
    """
    GetShouts200ResponseInner
    """ # noqa: E501
    id: Optional[Union[StrictFloat, StrictInt]] = None
    creator_id: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="creatorId")
    insert_date: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="insertDate")
    shout: Optional[StrictStr] = None
    shout_type: Optional[StrictStr] = Field(default=None, alias="shoutType")
    num_likes: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="numLikes")
    num_comments: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="numComments")
    comments_unread: Optional[Dict[str, Any]] = Field(default=None, alias="commentsUnread")
    comments: Optional[List[Any]] = None
    last_activity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="lastActivity")
    reference_id: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="referenceId")
    liked: Optional[StrictBool] = None
    likes: Optional[List[Any]] = None
    __properties: ClassVar[List[str]] = ["id", "creatorId", "insertDate", "shout", "shoutType", "numLikes", "numComments", "commentsUnread", "comments", "lastActivity", "referenceId", "liked", "likes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetShouts200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if comments_unread (nullable) is None
        # and model_fields_set contains the field
        if self.comments_unread is None and "comments_unread" in self.model_fields_set:
            _dict['commentsUnread'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetShouts200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "creatorId": obj.get("creatorId"),
            "insertDate": obj.get("insertDate"),
            "shout": obj.get("shout"),
            "shoutType": obj.get("shoutType"),
            "numLikes": obj.get("numLikes"),
            "numComments": obj.get("numComments"),
            "commentsUnread": obj.get("commentsUnread"),
            "comments": obj.get("comments"),
            "lastActivity": obj.get("lastActivity"),
            "referenceId": obj.get("referenceId"),
            "liked": obj.get("liked"),
            "likes": obj.get("likes")
        })
        return _obj


