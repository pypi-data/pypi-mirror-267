# coding: utf-8

"""
    flatastic API Schema

    This schema was generated by the reverse-engineered-apis project with the help of alufers/mitmproxy2swagger and openapitools/openapi-generator. It is not guaranteed to be complete or correct.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from reverse_engineered_apis.flatastic.models.post_subscriptions_request_data import PostSubscriptionsRequestData
from typing import Optional, Set
from typing_extensions import Self

class PostSubscriptionsRequest(BaseModel):
    """
    PostSubscriptionsRequest
    """ # noqa: E501
    title: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    cycle: Optional[StrictStr] = None
    first_bill: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="firstBill")
    payer: Optional[StrictStr] = None
    price: Optional[Union[StrictFloat, StrictInt]] = None
    icon: Optional[StrictStr] = None
    data: Optional[PostSubscriptionsRequestData] = None
    is_proposal: Optional[StrictBool] = Field(default=None, alias="isProposal")
    proposal_id: Optional[StrictStr] = Field(default=None, alias="proposalId")
    id: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["title", "description", "cycle", "firstBill", "payer", "price", "icon", "data", "isProposal", "proposalId", "id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostSubscriptionsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of data
        if self.data:
            _dict['data'] = self.data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostSubscriptionsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "title": obj.get("title"),
            "description": obj.get("description"),
            "cycle": obj.get("cycle"),
            "firstBill": obj.get("firstBill"),
            "payer": obj.get("payer"),
            "price": obj.get("price"),
            "icon": obj.get("icon"),
            "data": PostSubscriptionsRequestData.from_dict(obj["data"]) if obj.get("data") is not None else None,
            "isProposal": obj.get("isProposal"),
            "proposalId": obj.get("proposalId"),
            "id": obj.get("id")
        })
        return _obj


