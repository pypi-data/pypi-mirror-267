# coding: utf-8

"""
    flatastic API Schema

    This schema was generated by the reverse-engineered-apis project with the help of alufers/mitmproxy2swagger and openapitools/openapi-generator. It is not guaranteed to be complete or correct.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class PostSubscriptions200ResponseData(BaseModel):
    """
    PostSubscriptions200ResponseData
    """ # noqa: E501
    icon: Optional[StrictStr] = None
    duration: Optional[StrictStr] = None
    remind_me: Optional[Dict[str, Any]] = None
    color: Optional[Dict[str, Any]] = None
    settlement: Optional[Dict[str, Any]] = None
    sharers: Optional[Dict[str, Any]] = None
    provider: Optional[Dict[str, Any]] = None
    created_at: Optional[Union[StrictFloat, StrictInt]] = None
    updated_at: Optional[Union[StrictFloat, StrictInt]] = None
    is_proposal: Optional[StrictBool] = None
    proposal_id: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["icon", "duration", "remind_me", "color", "settlement", "sharers", "provider", "created_at", "updated_at", "is_proposal", "proposal_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostSubscriptions200ResponseData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if remind_me (nullable) is None
        # and model_fields_set contains the field
        if self.remind_me is None and "remind_me" in self.model_fields_set:
            _dict['remind_me'] = None

        # set to None if color (nullable) is None
        # and model_fields_set contains the field
        if self.color is None and "color" in self.model_fields_set:
            _dict['color'] = None

        # set to None if settlement (nullable) is None
        # and model_fields_set contains the field
        if self.settlement is None and "settlement" in self.model_fields_set:
            _dict['settlement'] = None

        # set to None if sharers (nullable) is None
        # and model_fields_set contains the field
        if self.sharers is None and "sharers" in self.model_fields_set:
            _dict['sharers'] = None

        # set to None if provider (nullable) is None
        # and model_fields_set contains the field
        if self.provider is None and "provider" in self.model_fields_set:
            _dict['provider'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostSubscriptions200ResponseData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "icon": obj.get("icon"),
            "duration": obj.get("duration"),
            "remind_me": obj.get("remind_me"),
            "color": obj.get("color"),
            "settlement": obj.get("settlement"),
            "sharers": obj.get("sharers"),
            "provider": obj.get("provider"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "is_proposal": obj.get("is_proposal"),
            "proposal_id": obj.get("proposal_id")
        })
        return _obj


