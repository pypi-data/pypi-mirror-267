# coding: utf-8

"""
    flatastic API Schema

    This schema was generated by the reverse-engineered-apis project with the help of alufers/mitmproxy2swagger and openapitools/openapi-generator. It is not guaranteed to be complete or correct.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from reverse_engineered_apis.flatastic.models.post_login200_response_wg_flatmates_inner_wg_code import PostLogin200ResponseWgFlatmatesInnerWgCode
from typing import Optional, Set
from typing_extensions import Self

class PostLogin200ResponseWgFlatmatesInner(BaseModel):
    """
    PostLogin200ResponseWgFlatmatesInner
    """ # noqa: E501
    email: Optional[StrictStr] = None
    phone: Optional[StrictStr] = None
    dob: Optional[StrictStr] = None
    language: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    group_id: Optional[StrictStr] = Field(default=None, alias="groupId")
    created_on: Optional[StrictStr] = Field(default=None, alias="createdOn")
    last_login: Optional[StrictStr] = Field(default=None, alias="lastLogin")
    first_name: Optional[StrictStr] = Field(default=None, alias="firstName")
    last_name: Optional[StrictStr] = Field(default=None, alias="lastName")
    profile_image: Optional[StrictStr] = Field(default=None, alias="profileImage")
    wg_code: Optional[PostLogin200ResponseWgFlatmatesInnerWgCode] = Field(default=None, alias="wgCode")
    chore_points: Optional[StrictStr] = Field(default=None, alias="chorePoints")
    premium_until: Optional[StrictStr] = Field(default=None, alias="premiumUntil")
    is_premium: Optional[StrictBool] = Field(default=None, alias="isPremium")
    subscriptions: Optional[List[Any]] = None
    __properties: ClassVar[List[str]] = ["email", "phone", "dob", "language", "id", "groupId", "createdOn", "lastLogin", "firstName", "lastName", "profileImage", "wgCode", "chorePoints", "premiumUntil", "isPremium", "subscriptions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostLogin200ResponseWgFlatmatesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of wg_code
        if self.wg_code:
            _dict['wgCode'] = self.wg_code.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostLogin200ResponseWgFlatmatesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "email": obj.get("email"),
            "phone": obj.get("phone"),
            "dob": obj.get("dob"),
            "language": obj.get("language"),
            "id": obj.get("id"),
            "groupId": obj.get("groupId"),
            "createdOn": obj.get("createdOn"),
            "lastLogin": obj.get("lastLogin"),
            "firstName": obj.get("firstName"),
            "lastName": obj.get("lastName"),
            "profileImage": obj.get("profileImage"),
            "wgCode": PostLogin200ResponseWgFlatmatesInnerWgCode.from_dict(obj["wgCode"]) if obj.get("wgCode") is not None else None,
            "chorePoints": obj.get("chorePoints"),
            "premiumUntil": obj.get("premiumUntil"),
            "isPremium": obj.get("isPremium"),
            "subscriptions": obj.get("subscriptions")
        })
        return _obj


