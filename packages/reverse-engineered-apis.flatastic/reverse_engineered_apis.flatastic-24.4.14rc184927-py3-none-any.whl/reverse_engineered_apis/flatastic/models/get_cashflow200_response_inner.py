# coding: utf-8

"""
    flatastic API Schema

    This schema was generated by the reverse-engineered-apis project with the help of alufers/mitmproxy2swagger and openapitools/openapi-generator. It is not guaranteed to be complete or correct.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from reverse_engineered_apis.flatastic.models.get_cashflow200_response_inner_items_inner import GetCashflow200ResponseInnerItemsInner
from typing import Optional, Set
from typing_extensions import Self

class GetCashflow200ResponseInner(BaseModel):
    """
    GetCashflow200ResponseInner
    """ # noqa: E501
    id: Optional[Union[StrictFloat, StrictInt]] = None
    name: Optional[StrictStr] = None
    var_date: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="date")
    creator_id: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="creatorId")
    paid_by: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="paidBy")
    created_by: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="createdBy")
    total_sum: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalSum")
    sum: Optional[Union[StrictFloat, StrictInt]] = None
    insert_date: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="insertDate")
    involved_users: Optional[List[Union[StrictFloat, StrictInt]]] = Field(default=None, alias="involvedUsers")
    items: Optional[List[GetCashflow200ResponseInnerItemsInner]] = None
    attachments: Optional[List[Any]] = None
    __properties: ClassVar[List[str]] = ["id", "name", "date", "creatorId", "paidBy", "createdBy", "totalSum", "sum", "insertDate", "involvedUsers", "items", "attachments"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetCashflow200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item in self.items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['items'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetCashflow200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "date": obj.get("date"),
            "creatorId": obj.get("creatorId"),
            "paidBy": obj.get("paidBy"),
            "createdBy": obj.get("createdBy"),
            "totalSum": obj.get("totalSum"),
            "sum": obj.get("sum"),
            "insertDate": obj.get("insertDate"),
            "involvedUsers": obj.get("involvedUsers"),
            "items": [GetCashflow200ResponseInnerItemsInner.from_dict(_item) for _item in obj["items"]] if obj.get("items") is not None else None,
            "attachments": obj.get("attachments")
        })
        return _obj


