# coding: utf-8

"""
    flatastic API Schema

    This schema was generated by the reverse-engineered-apis project with the help of alufers/mitmproxy2swagger and openapitools/openapi-generator. It is not guaranteed to be complete or correct.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from reverse_engineered_apis.flatastic.models.post_wg200_response_flatmates_inner import PostWg200ResponseFlatmatesInner
from typing import Optional, Set
from typing_extensions import Self

class PostWg200Response(BaseModel):
    """
    PostWg200Response
    """ # noqa: E501
    id: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    city: Optional[StrictStr] = None
    street: Optional[StrictStr] = None
    country: Optional[StrictStr] = None
    var_date: Optional[StrictStr] = Field(default=None, alias="date")
    image: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    founder_id: Optional[StrictStr] = Field(default=None, alias="founderId")
    post_code: Optional[StrictStr] = Field(default=None, alias="postCode")
    currency: Optional[StrictStr] = None
    country_code: Optional[Dict[str, Any]] = Field(default=None, alias="countryCode")
    flatmates: Optional[List[PostWg200ResponseFlatmatesInner]] = None
    __properties: ClassVar[List[str]] = ["id", "name", "city", "street", "country", "date", "image", "type", "founderId", "postCode", "currency", "countryCode", "flatmates"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostWg200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in flatmates (list)
        _items = []
        if self.flatmates:
            for _item in self.flatmates:
                if _item:
                    _items.append(_item.to_dict())
            _dict['flatmates'] = _items
        # set to None if country_code (nullable) is None
        # and model_fields_set contains the field
        if self.country_code is None and "country_code" in self.model_fields_set:
            _dict['countryCode'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostWg200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "city": obj.get("city"),
            "street": obj.get("street"),
            "country": obj.get("country"),
            "date": obj.get("date"),
            "image": obj.get("image"),
            "type": obj.get("type"),
            "founderId": obj.get("founderId"),
            "postCode": obj.get("postCode"),
            "currency": obj.get("currency"),
            "countryCode": obj.get("countryCode"),
            "flatmates": [PostWg200ResponseFlatmatesInner.from_dict(_item) for _item in obj["flatmates"]] if obj.get("flatmates") is not None else None
        })
        return _obj


