# coding: utf-8

"""
    flatastic API Schema

    This schema was generated by the reverse-engineered-apis project with the help of alufers/mitmproxy2swagger and openapitools/openapi-generator. It is not guaranteed to be complete or correct.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class PostShoppinglist200Response(BaseModel):
    """
    PostShoppinglist200Response
    """ # noqa: E501
    id: Optional[Union[StrictFloat, StrictInt]] = None
    inserter_id: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="inserterId")
    item_name: Optional[StrictStr] = Field(default=None, alias="itemName")
    details: Optional[Dict[str, Any]] = None
    category_id: Optional[Dict[str, Any]] = Field(default=None, alias="categoryId")
    for_all: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="forAll")
    bought: Optional[Union[StrictFloat, StrictInt]] = None
    priority: Optional[Dict[str, Any]] = None
    var_date: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="date")
    buyer_id: Optional[Dict[str, Any]] = Field(default=None, alias="buyerId")
    attachments: Optional[List[Any]] = None
    __properties: ClassVar[List[str]] = ["id", "inserterId", "itemName", "details", "categoryId", "forAll", "bought", "priority", "date", "buyerId", "attachments"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostShoppinglist200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if details (nullable) is None
        # and model_fields_set contains the field
        if self.details is None and "details" in self.model_fields_set:
            _dict['details'] = None

        # set to None if category_id (nullable) is None
        # and model_fields_set contains the field
        if self.category_id is None and "category_id" in self.model_fields_set:
            _dict['categoryId'] = None

        # set to None if priority (nullable) is None
        # and model_fields_set contains the field
        if self.priority is None and "priority" in self.model_fields_set:
            _dict['priority'] = None

        # set to None if buyer_id (nullable) is None
        # and model_fields_set contains the field
        if self.buyer_id is None and "buyer_id" in self.model_fields_set:
            _dict['buyerId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostShoppinglist200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "inserterId": obj.get("inserterId"),
            "itemName": obj.get("itemName"),
            "details": obj.get("details"),
            "categoryId": obj.get("categoryId"),
            "forAll": obj.get("forAll"),
            "bought": obj.get("bought"),
            "priority": obj.get("priority"),
            "date": obj.get("date"),
            "buyerId": obj.get("buyerId"),
            "attachments": obj.get("attachments")
        })
        return _obj


