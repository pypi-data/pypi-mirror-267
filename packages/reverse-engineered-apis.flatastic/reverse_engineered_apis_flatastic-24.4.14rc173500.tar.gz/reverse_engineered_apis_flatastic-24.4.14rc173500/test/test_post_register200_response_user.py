# coding: utf-8

"""
    flatastic API Schema

    This schema was generated by the reverse-engineered-apis project with the help of alufers/mitmproxy2swagger and openapitools/openapi-generator. It is not guaranteed to be complete or correct.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from reverse_engineered_apis.flatastic.models.post_register200_response_user import PostRegister200ResponseUser

class TestPostRegister200ResponseUser(unittest.TestCase):
    """PostRegister200ResponseUser unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PostRegister200ResponseUser:
        """Test PostRegister200ResponseUser
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PostRegister200ResponseUser`
        """
        model = PostRegister200ResponseUser()
        if include_optional:
            return PostRegister200ResponseUser(
                email = '',
                phone = '',
                dob = '',
                language = '',
                id = '',
                group_id = '',
                created_on = '',
                last_login = '',
                first_name = '',
                last_name = '',
                profile_image = '',
                wg_code = reverse_engineered_apis.flatastic.models.wg_code.wgCode(),
                chore_points = '',
                premium_until = reverse_engineered_apis.flatastic.models.premium_until.premiumUntil(),
                is_premium = True,
                bic = reverse_engineered_apis.flatastic.models.bic.bic(),
                iban = reverse_engineered_apis.flatastic.models.iban.iban(),
                has_active_subscription = True
            )
        else:
            return PostRegister200ResponseUser(
        )
        """

    def testPostRegister200ResponseUser(self):
        """Test PostRegister200ResponseUser"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
