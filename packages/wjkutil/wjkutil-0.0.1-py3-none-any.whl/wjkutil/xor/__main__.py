
import unittest
class Tester(unittest.TestCase):
    def single_xor_cases(self):
        test_cases = []
        import codecs
        enc = '1e5d4c055104471c6f234f5501555b5a014e5d001c2a54470555064c443e235b4c0e590356542a130a4242335a47551a590a136f1d5d4d440b0956773613180b5f184015210e4f541c075a47064e5f001e2a4f711844430c473e2413011a100556153d1e4f45061441151901470a196f035b0c4443185b322e130806431d5a072a46385901555c5b550a541c1a2600564d5f054c453e32444c0a434d43182a0b1c540a55415a550a5e1b0f613a5c1f10021e56773a5a0206100852063c4a18581a1d15411d17111b052113460850104c472239564c0755015a13271e0a55553b5a47551a54010e2a06130b5506005a393013180c100f52072a4a1b5e1b165d50064e411d0521111f235f114c47362447094f10035c066f19025402191915110b4206182a544702100109133e394505175509671b6f0b01484e06505b061b50034a2911521e44431b5a233f13180b5508131523050154403740415503484f0c2602564d470a18407b775d031110004a54290319544e06505b060b424f092e1a770443101952333213030d554d551b2006064206555d50141c454f0c3d1b5e4d43061e453e39544c17580856581802001102105443101d111a043c03521455074c473f3213000a5b085d113c194f5e08555415180f5f433e270d131d420c1957773f560d11440d40543c060e470b55545b114e470e193c155f4d47110947343f13180c100f565a000403484e184c15050250081f2a54470545104c5536251325435302461a3b4a02484e12545c1b4265070b3b5440055543185b36231301025b084054220f4f42071b1554020f430b196f19564d4002055d79'
        b = codecs.decode(enc, 'hex')
        key_len = 30
        answer = b'W3lc0m3tOjo1nu55un1ojOt3m0cl3W'
        test_cases.append((b,key_len,answer))
        return test_cases

    def single_xor_func_test(self, break_xor):
        from .util import hamming_distance_iter
        for b, key_len, answer in self.single_xor_cases():
            assert(len(answer) == key_len)
            # 分组
            single_xors = [[] for i in range(key_len)]
            for i, by in enumerate(b):
                single_xors[i % key_len].append(by)
            # 测试
            res = b''
            for bys in single_xors:
                res += break_xor(bys)
            incorrect = hamming_distance_iter(res, answer) # 不相同的数量
            # print(res)
            print('testing function {}...'.format(break_xor.__name__), end='')
            print('{}/{} correct!'.format(key_len - incorrect, key_len))

    def test_single_breaker(self):
        from .single_char_xor import freq_only
        from .single_char_xor import space_only
        funcs = [space_only, freq_only]
        for f in funcs:
            self.single_xor_func_test(f)

    def test_old_guess(self):
        from .guess_len import old_guess_len
        import codecs
        enc = '1e5d4c055104471c6f234f5501555b5a014e5d001c2a54470555064c443e235b4c0e590356542a130a4242335a47551a590a136f1d5d4d440b0956773613180b5f184015210e4f541c075a47064e5f001e2a4f711844430c473e2413011a100556153d1e4f45061441151901470a196f035b0c4443185b322e130806431d5a072a46385901555c5b550a541c1a2600564d5f054c453e32444c0a434d43182a0b1c540a55415a550a5e1b0f613a5c1f10021e56773a5a0206100852063c4a18581a1d15411d17111b052113460850104c472239564c0755015a13271e0a55553b5a47551a54010e2a06130b5506005a393013180c100f52072a4a1b5e1b165d50064e411d0521111f235f114c47362447094f10035c066f19025402191915110b4206182a544702100109133e394505175509671b6f0b01484e06505b061b50034a2911521e44431b5a233f13180b5508131523050154403740415503484f0c2602564d470a18407b775d031110004a54290319544e06505b060b424f092e1a770443101952333213030d554d551b2006064206555d50141c454f0c3d1b5e4d43061e453e39544c17580856581802001102105443101d111a043c03521455074c473f3213000a5b085d113c194f5e08555415180f5f433e270d131d420c1957773f560d11440d40543c060e470b55545b114e470e193c155f4d47110947343f13180c100f565a000403484e184c15050250081f2a54470545104c5536251325435302461a3b4a02484e12545c1b4265070b3b5440055543185b36231301025b084054220f4f42071b1554020f430b196f19564d4002055d79'
        b = codecs.decode(enc, 'hex')
        old_output = [(30, 2.62), (9, 2.888888888888889), (2, 3.0), (7, 3.0), (19, 3.1157894736842104), (22, 3.1363636363636362), (38, 3.142105263157895), (18, 3.1444444444444444), (33, 3.1636363636363636), (14, 3.1714285714285713), (13, 3.2153846153846155), (21, 3.2285714285714286), (39, 3.230769230769231), (5, 3.24), (25, 3.24), (27, 3.2444444444444445), (17, 3.2470588235294118), (3, 3.2666666666666666), (35, 3.2857142857142856), (32, 3.29375), (16, 3.3375), (37, 3.345945945945946), (4, 3.35), (28, 3.357142857142857), (36, 3.3777777777777778), (6, 3.4), (12, 3.4), (15, 3.4), (34, 3.4235294117647057), (24, 3.425), (20, 3.43), (31, 3.432258064516129), (26, 3.4384615384615387), (23, 3.4434782608695653), (11, 3.4545454545454546), (29, 3.462068965517241), (10, 3.54), (8, 3.55)]
        self.assertEqual(old_output, old_guess_len(b))

    def test_guess(self):
        from .guess_len import guess_len
        import codecs
        enc = '1e5d4c055104471c6f234f5501555b5a014e5d001c2a54470555064c443e235b4c0e590356542a130a4242335a47551a590a136f1d5d4d440b0956773613180b5f184015210e4f541c075a47064e5f001e2a4f711844430c473e2413011a100556153d1e4f45061441151901470a196f035b0c4443185b322e130806431d5a072a46385901555c5b550a541c1a2600564d5f054c453e32444c0a434d43182a0b1c540a55415a550a5e1b0f613a5c1f10021e56773a5a0206100852063c4a18581a1d15411d17111b052113460850104c472239564c0755015a13271e0a55553b5a47551a54010e2a06130b5506005a393013180c100f52072a4a1b5e1b165d50064e411d0521111f235f114c47362447094f10035c066f19025402191915110b4206182a544702100109133e394505175509671b6f0b01484e06505b061b50034a2911521e44431b5a233f13180b5508131523050154403740415503484f0c2602564d470a18407b775d031110004a54290319544e06505b060b424f092e1a770443101952333213030d554d551b2006064206555d50141c454f0c3d1b5e4d43061e453e39544c17580856581802001102105443101d111a043c03521455074c473f3213000a5b085d113c194f5e08555415180f5f433e270d131d420c1957773f560d11440d40543c060e470b55545b114e470e193c155f4d47110947343f13180c100f565a000403484e184c15050250081f2a54470545104c5536251325435302461a3b4a02484e12545c1b4265070b3b5440055543185b36231301025b084054220f4f42071b1554020f430b196f19564d4002055d79'
        b = codecs.decode(enc, 'hex')
        output = [(30, 2.6222222222222222), (15, 3.025925925925926), (20, 3.113888888888889), (7, 3.126984126984127), (10, 3.1277777777777778), (3, 3.1296296296296298), (9, 3.191358024691358), (24, 3.2268518518518516), (35, 3.226984126984127), (22, 3.2373737373737375), (25, 3.24), (12, 3.240740740740741), (18, 3.243827160493827), (13, 3.247863247863248), (27, 3.253086419753086), (33, 3.2542087542087543), (5, 3.2555555555555555), (23, 3.256038647342995), (37, 3.25975975975976), (38, 3.2690058479532165), (39, 3.2720797720797723), (19, 3.2748538011695905), (36, 3.2762345679012346), (11, 3.2777777777777777), (31, 3.2795698924731185), (32, 3.28125), (34, 3.2892156862745097), (17, 3.2973856209150325), (2, 3.3055555555555554), (29, 3.3295019157088124), (26, 3.3461538461538463), (14, 3.3531746031746033), (16, 3.3645833333333335), (28, 3.367063492063492), (6, 3.3703703703703702), (21, 3.373015873015873), (4, 3.388888888888889), (8, 3.4097222222222223)]
        # print(guess_len(b))
        self.assertEqual(output, guess_len(b))


if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument("file", help='path to xor enc file')
    parser.add_argument('-t', '--test', action='store_true', help='perform unit test')
    parser.add_argument('-f', '--format', help='specify format: base64/hex/binary', default='binary')
    args = parser.parse_args()
    # print(args.echo)
    if args.test:
        import sys
        sys.argv = [sys.argv[0]]
        unittest.main()
        exit(0)

    if args.format == 'binary':
        b = b''
        with open(args.file,"rb") as f:
            for line in f:
                b += line
    elif args.format == 'hex':
        text = ''
        with open(args.file,"r") as f:
            for line in f:
                text += line
        import codecs
        b = codecs.decode(text, 'hex')
    elif arg.format == 'base64':
        import base64
        text = ''
        with open(args.file,"r") as f:
            for line in f:
                text += line
        b = base64.b64decode(text) # 就已经是bytes

    print('密文长度: ' + str(len(b)))
    print('最大长度为40时, 有{}组密文'.format(len(b) // 40))
    print('(密钥长度, 平均汉明距离)前十项: 平均汉明距离越小越好')
    print(guess_len(b)[:10])
