[metadata]
name = nafcodec
author = Martin Larralde
version = attr: nafcodec.__version__
author_email = martin.larralde@embl.de
home_page = https://github.com/althonos/nafcodec
description = PyO3 bindings and Python interface to nafcodec, an encoder/decoder for Nucleotide Archive Format (NAF) files.
long_description = file: nafcodec-py/README.md
long_description_content_type = text/markdown
license = MIT
platform = any
keywords = nucleotide, archive, biology, bioinformatics
classifiers = 
	Development Status :: 3 - Alpha
	Intended Audience :: Developers
	Intended Audience :: Science/Research
	License :: OSI Approved :: MIT License
	Operating System :: OS Independent
	Programming Language :: Rust
	Programming Language :: Python :: 3.7
	Programming Language :: Python :: 3.8
	Programming Language :: Python :: 3.9
	Programming Language :: Python :: 3.10
	Programming Language :: Python :: 3.11
	Programming Language :: Python :: 3.12
	Programming Language :: Python :: Implementation :: CPython
	Programming Language :: Python :: Implementation :: PyPy
	Topic :: Scientific/Engineering :: Bio-Informatics
	Topic :: Scientific/Engineering :: Medical Science Apps.
	Topic :: Software Development :: Libraries :: Python Modules
project_urls = 
	Bug Tracker = https://github.com/althonos/nafcodec/issues
	Changelog = https://github.com/althonos/nafcodec/blob/master/CHANGELOG.md
	Coverage = https://codecov.io/gh/althonos/nafcodec/
	Builds = https://github.com/althonos/nafcodec/actions/
	PyPI = https://pypi.org/project/nafcodec

[options]
zip_safe = true
packages = 
	nafcodec
	nafcodec.tests
	nafcodec.tests.data
test_suite = nafcodec.tests
include_package_data = true
python_requires = >=3.7
setup_requires = 
	setuptools >=39.2
	setuptools-rust >=1.0
tests_require = 
	importlib-resources ; python_version < '3.9'

[options.package_data]
nafcodec = 
	py.typed
	*.pyi
	*.py
nafcodec.lib = 
	*.rs
nafcodec.tests = 
	*.rs
	requirements.txt
nafcodec.tests.data = 
	*.naf

[bdist_wheel]
universal = false

[build_rust]
release = true

[coverage:report]
show_missing = true
exclude_lines = 
	pragma: no cover
	if typing.TYPE_CHECKING:
	@abc.abstractmethod
	@abc.abstractproperty
	raise NotImplementedError
	return NotImplemented
	raise UnexpectedError
	raise AllocationError

[mypy]
disallow_any_decorated = true
disallow_any_generics = true
disallow_any_unimported = false
disallow_subclassing_any = false
disallow_untyped_calls = true
disallow_untyped_defs = true
ignore_missing_imports = true
warn_unused_ignores = true
warn_return_any = true

[mypy-nafcodec.tests.*]
ignore_errors = True

[egg_info]
tag_build = 
tag_date = 0

