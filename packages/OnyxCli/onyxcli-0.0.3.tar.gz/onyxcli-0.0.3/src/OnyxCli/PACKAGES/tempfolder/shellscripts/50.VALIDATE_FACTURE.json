{
    "oShellScript": {
        "name": "50.VALIDATE_FACTURE",
        "script": "import json\r\nimport requests\r\nimport pymssql\r\nimport re\r\nimport logging\r\nfrom datetime import datetime\r\nimport uuid\r\nimport sys\r\n\r\n{{nxAddons}}\r\n\r\nbase_url = nxContext.API_Gateway_baseUrl\r\nheaders = {\"Ocp-Apim-Subscription-Key\":nxContext.API_Gateway_Subscription_Key}\r\n\r\ndbserver = nxContext.BDD_Onyx_host\r\ndbuser = nxContext.BDD_Onyx_user\r\ndbpwd = nxContext.BDD_Onyx_password\r\ndbname = nxContext.BDD_Onyx_database\r\n\r\ntotal = 0\r\nnb_error = 0\r\n\r\nmerge_query = \"\"\"\r\nMERGE INTO [AG_to_OC].[invoice_validate_result] AS Target\r\nUSING (VALUES (%s, %s, %s, %s, %s, %s, %s, %s)) AS Source(\r\n    [energie],\r\n    [code_client],\r\n    [code_prm],\r\n    [id_facture],\r\n    [invoice_id],\r\n    [payload],\r\n    [result],\r\n    [issuccess]\r\n)\r\nON Target.energie = Source.energie and Target.code_client = Source.code_client and Target.code_prm = Source.code_prm and Target.id_facture = Source.id_facture\r\nWHEN MATCHED THEN\r\n    UPDATE SET\r\n        Target.payload = Source.payload, \r\n        Target.result = Source.result,\r\n        Target.invoice_id = Source.invoice_id,\r\n        Target.issuccess = Source.issuccess,\r\n        Target.dt = getdate()\r\nWHEN NOT MATCHED THEN\r\n    INSERT (\r\n        [energie],\r\n        [code_client],\r\n        [code_prm],\r\n        [id_facture],\r\n        [invoice_id],\r\n        [payload],\r\n        [result],\r\n        [issuccess]\r\n    )\r\n    VALUES (\r\n        Source.[energie],\r\n        Source.[code_client],\r\n        Source.[code_prm],\r\n        Source.[id_facture],\r\n        Source.[invoice_id],\r\n        Source.[payload],\r\n        Source.[result],\r\n        Source.[issuccess]\r\n    );\r\n\"\"\"\r\n\r\nurl= f\"{base_url}/opencell/api/rest/invoice/validate\"\r\n\r\n# Create a connection to the database met-onyx to insert/depose the data after processing\r\nprint(\"Connecting to the database\")\r\nwith pymssql.connect(server=dbserver, port='1433', user=dbuser, password=dbpwd, database=dbname) as conn_onyx:\r\n    with conn_onyx.cursor(as_dict=True) as cursor:\r\n        cursor.execute(\"select * from  AG_TO_OC.invoice_validate\")\r\n        rows = cursor.fetchall()\r\n\r\n        for row in rows:\r\n\r\n            try:\r\n                total += 1\r\n                invoice_id = row['invoice_id']\r\n                payload = row['payload'].encode('utf-8')\r\n                result=\"\"\r\n                isSuccess = 0\r\n\r\n                response = requests.put(url, data=payload, headers=headers)\r\n                result= response.text\r\n\r\n                # Make the API call to adjust the invoice\r\n                if response.status_code == 200:\r\n                    issuccess = True\r\n\r\n                if issuccess:\r\n                    url_get_invoice = f\"{base_url}/opencell/api/rest/v2/billing/invoices/{invoice_id}\"\r\n                    reponse_get_invoice = requests.get(url_get_invoice, headers=headers)\r\n                    result = reponse_get_invoice.text\r\n\r\n                    if reponse_get_invoice.status_code == 200:\r\n                        issuccess = True\r\n                    else:\r\n                        issuccess = False\r\n\r\n                if not issuccess:\r\n                    nb_error += 1\r\n\r\n                with conn_onyx.cursor() as write_cursor:\r\n                    write_cursor.execute(merge_query, (row['energie'], row['CODE_CLIENT'], row['CODE_PRM'], row['ID_FACTURE'], invoice_id, payload, result, issuccess))\r\n                    conn_onyx.commit()\r\n\r\n            except Exception as e:\r\n                logging.error(f\"Error processing energy {row['energie']}, code_client {row['CODE_CLIENT']}, code_prm {row['CODE_PRM']}, id_facture {row['ID_FACTURE']}: {str(e)}\")\r\n\r\nprint(f\"Total invoices processed: {total}\")\r\nprint(f\"Number of errors: {nb_error}\")\r\nprint(\"Job finished\")\r\n\r\n",
        "documentation": null,
        "oProjectId": "7316024d-7485-4b92-87b3-fce9be27f367",
        "isScheduled": false,
        "isInAWorkflow": true,
        "type": 1,
        "packages": "pymssql==2.2.8\r\nrequests==2.31.0\r\ncryptography==41.0.4",
        "id": "5248d688-7a98-464c-8cb0-8bfff396a7c2"
    },
    "numberOfSchedules": 0,
    "oProjectName": "AG - invoice"
}