{
    "oShellScript": {
        "name": "30_CREATE_FACTURE_ELEC_GAZ",
        "script": "import json\r\nimport requests\r\nimport pymssql\r\nimport re\r\nimport logging\r\nfrom datetime import datetime\r\nimport uuid\r\nimport sys\r\n\r\n{{nxAddons}}\r\n\r\nbase_url = nxContext.API_Gateway_baseUrl\r\nheaders = {\"Ocp-Apim-Subscription-Key\":nxContext.API_Gateway_Subscription_Key}\r\nurl_invoice =  f\"{base_url}/opencell/api/rest/v2/billing/invoices/basicInvoices\"\r\n\r\ndbserver = nxContext.BDD_Onyx_host\r\ndbuser = nxContext.BDD_Onyx_user\r\ndbpwd = nxContext.BDD_Onyx_password\r\ndbname = nxContext.BDD_Onyx_database\r\n\r\ntotal = 0\r\nnb_error = 0\r\n\r\nmerge_query = \"\"\"\r\nMERGE INTO [AG_to_OC].[invoice_result] AS Target\r\nUSING (values (%s, %s, %s, %s, %s, %s, %s, %s, %s)) AS Source(energie, code_client, code_prm, id_facture, payload_invoice, payload_lines, result_invoice, result_lines, issuccess)\r\nON Target.energie = Source.energie and Target.code_client = Source.code_client and Target.code_prm = Source.code_prm and Target.id_facture = Source.id_facture\r\nWHEN MATCHED THEN\r\n    UPDATE SET \r\n                Target.payload_invoice = Source.payload_invoice, \r\n                Target.payload_lines = Source.payload_lines, \r\n                Target.result_invoice = Source.result_invoice,\r\n                Target.result_lines = Source.result_lines, \r\n                Target.issuccess = Source.issuccess,\r\n                Target.dt = getdate()\r\nWHEN NOT MATCHED THEN\r\n    INSERT (energie, code_client, code_prm, id_facture, payload_invoice, payload_lines, result_invoice, result_lines, issuccess)\r\n    VALUES (\r\n        Source.energie,\r\n        Source.code_client,\r\n        Source.code_prm,\r\n        Source.id_facture,\r\n        Source.payload_invoice, \r\n        Source.payload_lines, \r\n        Source.result_invoice,\r\n        Source.result_lines, \r\n        Source.issuccess\r\n    );\r\n\"\"\"\r\n\r\n# Create a connection to the database met-onyx to insert/depose the data after processing\r\nprint(\"Connecting to the database\")\r\nwith pymssql.connect(server=dbserver, port='1433', user=dbuser,password=dbpwd, database=dbname) as conn_onyx:\r\n    with conn_onyx.cursor(as_dict=True) as cursor:\r\n        cursor.execute(\"select * from  AG_TO_OC.invoice_union\")\r\n        rows = cursor.fetchall()\r\n\r\n        for row in rows: \r\n\r\n            try:\r\n                total += 1\r\n                response_data_body = None\r\n                response_lines_body = None\r\n                invoice_id = None\r\n                issuccess = False\r\n\r\n                payload_invoice = row['payload_invoice'].encode('utf-8')\r\n                response_body = requests.post(url_invoice, data=payload_invoice, headers=headers)\r\n                response_data_body = response_body.text\r\n\r\n                if response_body.status_code == 201:\r\n                    response_data_body = response_body.json()\r\n                    invoice_id = response_data_body.get(\"id\")\r\n                    issuccess = True\r\n\r\n                if issuccess:\r\n                    url_lines = f\"{base_url}/opencell/api/rest/v2/billing/invoices/{invoice_id}/invoiceLines\"\r\n                    payload_lines = row['payload_lines'].encode('utf-8')\r\n                    response_lines = requests.post(url_lines, data=payload_lines, headers=headers)\r\n                    response_lines_body = response_lines.text\r\n\r\n                    if response_lines.status_code == 200:           \r\n                        issuccess = True\r\n                    else:\r\n                        issuccess = False\r\n\r\n                if issuccess:\r\n                    url_get_invoice = f\"{base_url}/opencell/api/rest/v2/billing/invoices/{invoice_id}\"\r\n                    reponse_get_invoice = requests.get(url_get_invoice, headers=headers)\r\n                    response_data_body = reponse_get_invoice.text\r\n\r\n                    if reponse_get_invoice.status_code == 200:\r\n                        issuccess = True\r\n                    else:\r\n                        issuccess = False\r\n\r\n                if not issuccess:\r\n                    nb_error += 1\r\n\r\n                with conn_onyx.cursor() as write_cursor:\r\n                    write_cursor.execute(merge_query,(row['energy'] , row['CODE_CLIENT'], row['CODE_PRM'], row['ID_FACTURE'], row['payload_invoice'], row['payload_lines'], str(response_data_body), str(response_lines_body), issuccess))\r\n                    conn_onyx.commit()\r\n\r\n            except Exception as e:\r\n                # Log any exceptions and roll back the transaction\r\n                logging.error(f\"Error processing energy {row['energy']}, code_client {row['CODE_CLIENT']}, code_prm {row['CODE_PRM']}, id_facture {row['ID_FACTURE']}: {str(e)}\")\r\n\r\n                    \r\nprint(f\"Nombre de facture: {total}\")\r\nprint(f\"Nombre de facture en erreur: {nb_error}\")\r\nprint(\"Job finished\")",
        "documentation": null,
        "oProjectId": "7316024d-7485-4b92-87b3-fce9be27f367",
        "isScheduled": false,
        "isInAWorkflow": true,
        "type": 1,
        "packages": "pymssql==2.2.8\r\nrequests==2.31.0\r\ncryptography==41.0.4",
        "id": "ffa57d95-bec5-4b99-9b5e-8aecb741a0fb"
    },
    "numberOfSchedules": 0,
    "oProjectName": "AG - invoice"
}