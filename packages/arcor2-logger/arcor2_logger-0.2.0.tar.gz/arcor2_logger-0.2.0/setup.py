
# DO NOT EDIT THIS FILE -- AUTOGENERATED BY PANTS
# Target: src/python/arcor2_logger:arcor2_logger_dist

from setuptools import setup

setup(**{
    'author': 'Robo@FIT',
    'author_email': 'imaterna@fit.vut.cz',
    'classifiers': [
        'Development Status :: 3 - Alpha',
        'Intended Audience :: Developers',
        'Topic :: Software Development :: Build Tools',
        'License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)',
        'Programming Language :: Python :: 3.11',
        'Natural Language :: English',
        'Topic :: Scientific/Engineering',
    ],
    'description': 'ARCOR2 Logger service.',
    'entry_points': {
        'console_scripts': [
            'arcor2_logger = arcor2_logger.scripts.logger:main',
        ],
    },
    'install_requires': (
        'aiologger~=0.7.0',
        'aiorun~=2023.7.2',
        'arcor2~=1.3.0',
        'dataclasses-jsonschema[apispec,fast-dateparsing,fast-validation]~=2.16.0',
        'websocket-client~=1.7.0',
        'websockets~=12.0',
    ),
    'license': 'LGPL',
    'long_description': """# arcor2_logger

The service provides logging capabilities through the network. Logging-related methods are added to ObjectTypes using a mixin class.

- Messages are sent using the websockets protocol.
- Calls to `log_` methods are non-blocking.

## Example usage

```python
from typing import Optional

from arcor2.object_types.abstract import Generic, Settings

try:
    from .logging_mixin import LoggingMixin  # this is used within an execution package
except ImportError:
    from arcor2_logger.object_types.logging_mixin import LoggingMixin  # this is used during development
    
class MyObject(LoggingMixin, Generic):

    _ABSTRACT = False

    def __init__(self, obj_id: str, name: str, settings: Optional[Settings] = None) -> None:
        super().__init__(obj_id, name, settings)
        self.logger = self.get_logger()
        self.logger.info("Initialized.")
```

## Environment variables

- `ARCOR2_LOGGER_URL=ws://0.0.0.0:8765` - by default, the service listens on port 8765.
- `ARCOR2_LOGGER_LEVEL=info` - by default, messages from objects with level `info` and higher are logged.
  - Other possible values are `warning`, `error` and `debug`. 
- `ARCOR2_LOGGER_DEBUG=1` - switches logger to the `DEBUG` level.
- `ARCOR2_LOGGER_ASYNCIO_DEBUG=1` - turns on `asyncio` debug output (helpful to debug problems related to concurrency).
# Changelog

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),

## [0.2.0] - 2024-04-11

### Changed

- Updated dependencies, switched to Python 3.11.

## [0.1.0] - 2022-10-28

### Changed
- First version of the package.""",
    'long_description_content_type': 'text/markdown',
    'name': 'arcor2_logger',
    'namespace_packages': (
    ),
    'package_data': {
        'arcor2_logger': (
            'VERSION',
            'py.typed',
        ),
    },
    'packages': (
        'arcor2_logger',
        'arcor2_logger.object_types',
        'arcor2_logger.scripts',
    ),
    'python_requires': '==3.11.*',
    'version': '0.2.0',
})
