Metadata-Version: 2.1
Name: sundash
Version: 0.0.7
Summary: Python & JS micro framework for realtime web UI applications
Home-page: https://github.com/ruthus18/sundash
License: MIT
Keywords: backend,frontend,server,client,ws,framework
Author: Danil Tryapchev
Author-email: ruthus18@gmail.com
Requires-Python: >=3.12,<4.0
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.12
Requires-Dist: colorlog (>=6.8.2,<7.0.0)
Requires-Dist: starlette (>=0.37.2,<0.38.0)
Requires-Dist: uvicorn (>=0.29.0,<0.30.0)
Requires-Dist: websockets (>=12.0,<13.0)
Project-URL: Repository, https://github.com/ruthus18/sundash
Description-Content-Type: text/markdown

# Sundash

**Python & JS micro framework for realtime web UI applications**

* **ASGI-based** -- minimal 3rd party dependencies and clean core part
* **Flexible and extensible** -- easy to customize, add 3rd party integrations
* **Realtime** -- operating through websockets bus, client & backend in app
* **Crafted with ‚ù§Ô∏è**

Link to project on PyPi: https://pypi.org/project/sundash/


### Installation

```bash
    pip install sundash
```


### Examples

```bash
    python -m examples <num | name>
```

To run Hello World example:

```bash
    python -m examples hello  # passing 01 also works
```

Available examples:

* `01 hello` - show plain HTML string
* `02 buttons` - counter with clickable buttons
* `03 clock` - realtime clock (scheduler events)
* `04 menu` - simple page routing
* `05 search` - handling signle form input
* `06 tables` - static tables


**Client interaction example:**

```python
from dataclasses import dataclass

from sundash import App
from sundash import Component
from sundash import on
from sundash.app import ButtonClick

app = App()


class Counter(Component):
    html = '''
        <button id="minus">-</button>
        <b>{{ count }}</b>
        <button id="plus">+</button>
    '''

    @dataclass
    class Vars:
        count: int = 0

    @on(ButtonClick)
    async def on_click(self, event: ButtonClick):
        if 'plus' == event.button_id:
            self.vars.count += 1

        elif 'minus' == event.button_id:
            self.vars.count -= 1

        await self.update_var('count')


app.run_sync(['<h1>üßÆ Counter</h1>', Counter])
```


**Server Interaction Example:**

```python
import dataclasses as dc
import datetime as dt

from sundash import Component
from sundash import on
from sundash.scheduler import EverySecond
from sundash.scheduler import SchedulerApp

app = SchedulerApp()


now = lambda: dt.datetime.now().strftime('%H:%M:%S')


class Clock(Component):
    html = '<p><b>Time:</b> {{ time }}<p/>'

    @dc.dataclass
    class Vars:
        time: str = dc.field(default_factory=now)

    @on(EverySecond)
    async def update(self, _):
        self.vars.time = now()
        await self.update_var('time')


app.run_sync(['<h1>üï∞Ô∏è Clock</h1>', Clock])
```


### –í —á–µ–º –∏–¥–µ—è?

–•–æ—á—É –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞—Ç—å real-time –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫ JS –ª–∏–±–∞–º, —á—Ç–æ–±—ã –±—ã–ª–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å
–Ω–∞–ø–∏—Å–∞—Ç—å –ª—é–±—É—é –≤–µ–±-–º–æ—Ä–¥—É –¥–ª—è –ª—é–±—ã—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.

**–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:** –ª—é–±—ã–µ –∞–¥–º–∏–Ω–∫–∏, —Ç–æ—Ä–≥–æ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω–∞–ª—ã, –¥–∞—à–±–æ—Ä–¥—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞, —Ç—É–ª–∑—ã –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.
–í—Å–µ –∫–∞—Å—Ç–æ–º–Ω–æ–µ –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ, —á—Ç–æ —Ö–æ—á–µ—Ç—Å—è –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å, –Ω–æ —Ç—ã –±—ç–∫–µ–Ω–¥–µ—Ä –∏ —Ö–æ—á–µ—à—å –ø–∏—Å–∞—Ç—å
–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ –Ω–∞ Python —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º JavaScript-–∞,
–±–µ–∑ —Ç—è–∂–µ–ª–æ–≤–µ—Å–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ä–∏—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ—Ä–æ–≤ (React –∏ –ø—Ä).


### Development

* Required: python 3.12, poetry, virtualenv
* Install Python dependencies: `poetry install --with=dev`
* Run local linters: `poe q`
* Publish package: `poetry publish --build`

