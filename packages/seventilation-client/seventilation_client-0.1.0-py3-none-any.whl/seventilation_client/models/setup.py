# coding: utf-8

"""
    SEC Smart API

    This is the API for the <b>SEC Smart System</b>.<br><font color=\"#ff0000\"><b>ACHTUNG:</b> Diese API ist noch nicht f√ºr den produktiven Einsatz freigegeben!</font>  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Setup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'systems': 'SetupSystems',
        'areas': 'SetupAreas',
        'input_di': 'DigitalInput',
        'output_do': 'DigitalOutput',
        'input_ai': 'AnalogInput'
    }

    attribute_map = {
        'systems': 'systems',
        'areas': 'areas',
        'input_di': 'inputDi',
        'output_do': 'outputDo',
        'input_ai': 'inputAi'
    }

    def __init__(self, systems=None, areas=None, input_di=None, output_do=None, input_ai=None):  # noqa: E501
        """Setup - a model defined in Swagger"""  # noqa: E501
        self._systems = None
        self._areas = None
        self._input_di = None
        self._output_do = None
        self._input_ai = None
        self.discriminator = None
        if systems is not None:
            self.systems = systems
        if areas is not None:
            self.areas = areas
        if input_di is not None:
            self.input_di = input_di
        if output_do is not None:
            self.output_do = output_do
        if input_ai is not None:
            self.input_ai = input_ai

    @property
    def systems(self):
        """Gets the systems of this Setup.  # noqa: E501


        :return: The systems of this Setup.  # noqa: E501
        :rtype: SetupSystems
        """
        return self._systems

    @systems.setter
    def systems(self, systems):
        """Sets the systems of this Setup.


        :param systems: The systems of this Setup.  # noqa: E501
        :type: SetupSystems
        """

        self._systems = systems

    @property
    def areas(self):
        """Gets the areas of this Setup.  # noqa: E501


        :return: The areas of this Setup.  # noqa: E501
        :rtype: SetupAreas
        """
        return self._areas

    @areas.setter
    def areas(self, areas):
        """Sets the areas of this Setup.


        :param areas: The areas of this Setup.  # noqa: E501
        :type: SetupAreas
        """

        self._areas = areas

    @property
    def input_di(self):
        """Gets the input_di of this Setup.  # noqa: E501


        :return: The input_di of this Setup.  # noqa: E501
        :rtype: DigitalInput
        """
        return self._input_di

    @input_di.setter
    def input_di(self, input_di):
        """Sets the input_di of this Setup.


        :param input_di: The input_di of this Setup.  # noqa: E501
        :type: DigitalInput
        """

        self._input_di = input_di

    @property
    def output_do(self):
        """Gets the output_do of this Setup.  # noqa: E501


        :return: The output_do of this Setup.  # noqa: E501
        :rtype: DigitalOutput
        """
        return self._output_do

    @output_do.setter
    def output_do(self, output_do):
        """Sets the output_do of this Setup.


        :param output_do: The output_do of this Setup.  # noqa: E501
        :type: DigitalOutput
        """

        self._output_do = output_do

    @property
    def input_ai(self):
        """Gets the input_ai of this Setup.  # noqa: E501


        :return: The input_ai of this Setup.  # noqa: E501
        :rtype: AnalogInput
        """
        return self._input_ai

    @input_ai.setter
    def input_ai(self, input_ai):
        """Sets the input_ai of this Setup.


        :param input_ai: The input_ai of this Setup.  # noqa: E501
        :type: AnalogInput
        """

        self._input_ai = input_ai

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Setup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Setup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
