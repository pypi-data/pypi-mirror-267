# coding: utf-8

"""
    SEC Smart API

    This is the API for the <b>SEC Smart System</b>.<br><font color=\"#ff0000\"><b>ACHTUNG:</b> Diese API ist noch nicht f√ºr den produktiven Einsatz freigegeben!</font>  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ErrorSetupErrors(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'systems_errors': 'str',
        'areas_boosts_errors': 'str',
        'digital_input_errors': 'str',
        'analog_input_errors': 'str',
        'digital_output_errors': 'str',
        'factory_reset_errors': 'str'
    }

    attribute_map = {
        'systems_errors': 'SystemsErrors',
        'areas_boosts_errors': 'AreasBoostsErrors',
        'digital_input_errors': 'DigitalInputErrors',
        'analog_input_errors': 'AnalogInputErrors',
        'digital_output_errors': 'DigitalOutputErrors',
        'factory_reset_errors': 'FactoryResetErrors'
    }

    def __init__(self, systems_errors=None, areas_boosts_errors=None, digital_input_errors=None, analog_input_errors=None, digital_output_errors=None, factory_reset_errors=None):  # noqa: E501
        """ErrorSetupErrors - a model defined in Swagger"""  # noqa: E501
        self._systems_errors = None
        self._areas_boosts_errors = None
        self._digital_input_errors = None
        self._analog_input_errors = None
        self._digital_output_errors = None
        self._factory_reset_errors = None
        self.discriminator = None
        if systems_errors is not None:
            self.systems_errors = systems_errors
        if areas_boosts_errors is not None:
            self.areas_boosts_errors = areas_boosts_errors
        if digital_input_errors is not None:
            self.digital_input_errors = digital_input_errors
        if analog_input_errors is not None:
            self.analog_input_errors = analog_input_errors
        if digital_output_errors is not None:
            self.digital_output_errors = digital_output_errors
        if factory_reset_errors is not None:
            self.factory_reset_errors = factory_reset_errors

    @property
    def systems_errors(self):
        """Gets the systems_errors of this ErrorSetupErrors.  # noqa: E501


        :return: The systems_errors of this ErrorSetupErrors.  # noqa: E501
        :rtype: str
        """
        return self._systems_errors

    @systems_errors.setter
    def systems_errors(self, systems_errors):
        """Sets the systems_errors of this ErrorSetupErrors.


        :param systems_errors: The systems_errors of this ErrorSetupErrors.  # noqa: E501
        :type: str
        """
        allowed_values = ["Field 'systems' is mandatory.", "Sub field '1' of 'systems' is mandatory.", "Sub field '2' of 'systems' is mandatory.", "Sub field '3' of 'systems' is mandatory.", "Sub field '4' of 'systems' is mandatory.", "Sub field '5' of 'systems' is mandatory.", "Sub field '6' of 'systems' is mandatory.", "Sub field 'type' of '1' of 'systems' is mandatory and must contain a string of one of this arrays entries: [${systemsArray}]", "Sub field 'type' of '2' of 'systems' is mandatory and must contain a string of one of this arrays entries: [${systemsArray}]", "Sub field 'type' of '3' of 'systems' is mandatory and must contain a string of one of this arrays entries: [${systemsArray}]", "Sub field 'type' of '4' of 'systems' is mandatory and must contain a string of one of this arrays entries: [${systemsArray}]", "Sub field 'type' of '5' of 'systems' is mandatory and must contain a string of one of this arrays entries: [${systemsArray}]", "Sub field 'type' of '6' of 'systems' is mandatory and must contain a string of one of this arrays entries: [${systemsArray}]", "Sub field 'installed' of '1' of 'systems' is mandatory and must contain a string of one of this arrays entries: [${areasArray}]", "Sub field 'installed' of '2' of 'systems' is mandatory and must contain a string of one of this arrays entries: [${areasArray}]", "Sub field 'installed' of '3' of 'systems' is mandatory and must contain a string of one of this arrays entries: [${areasArray}]", "Sub field 'installed' of '4' of 'systems' is mandatory and must contain a string of one of this arrays entries: [${areasArray}]", "Sub field 'installed' of '5' of 'systems' is mandatory and must contain a string of one of this arrays entries: [${areasArray}]", "Sub field 'installed' of '6' of 'systems' is mandatory and must contain a string of one of this arrays entries: [${areasArray}]"]  # noqa: E501
        if systems_errors not in allowed_values:
            raise ValueError(
                "Invalid value for `systems_errors` ({0}), must be one of {1}"  # noqa: E501
                .format(systems_errors, allowed_values)
            )

        self._systems_errors = systems_errors

    @property
    def areas_boosts_errors(self):
        """Gets the areas_boosts_errors of this ErrorSetupErrors.  # noqa: E501


        :return: The areas_boosts_errors of this ErrorSetupErrors.  # noqa: E501
        :rtype: str
        """
        return self._areas_boosts_errors

    @areas_boosts_errors.setter
    def areas_boosts_errors(self, areas_boosts_errors):
        """Sets the areas_boosts_errors of this ErrorSetupErrors.


        :param areas_boosts_errors: The areas_boosts_errors of this ErrorSetupErrors.  # noqa: E501
        :type: str
        """
        allowed_values = ["Field 'areas' is mandatory.", "Sub field '1' of 'areas' is mandatory and must contain a string of one of this arrays entries: [${boostModesArray}]", "Sub field '2' of 'areas' is mandatory and must contain a string of one of this arrays entries: [${boostModesArray}]", "Sub field '3' of 'areas' is mandatory and must contain a string of one of this arrays entries: [${boostModesArray}]", "Sub field '4' of 'areas' is mandatory and must contain a string of one of this arrays entries: [${boostModesArray}]", "Sub field '5' of 'areas' is mandatory and must contain a string of one of this arrays entries: [${boostModesArray}]", "Sub field '6' of 'areas' is mandatory and must contain a string of one of this arrays entries: [${boostModesArray}]"]  # noqa: E501
        if areas_boosts_errors not in allowed_values:
            raise ValueError(
                "Invalid value for `areas_boosts_errors` ({0}), must be one of {1}"  # noqa: E501
                .format(areas_boosts_errors, allowed_values)
            )

        self._areas_boosts_errors = areas_boosts_errors

    @property
    def digital_input_errors(self):
        """Gets the digital_input_errors of this ErrorSetupErrors.  # noqa: E501


        :return: The digital_input_errors of this ErrorSetupErrors.  # noqa: E501
        :rtype: str
        """
        return self._digital_input_errors

    @digital_input_errors.setter
    def digital_input_errors(self, digital_input_errors):
        """Sets the digital_input_errors of this ErrorSetupErrors.


        :param digital_input_errors: The digital_input_errors of this ErrorSetupErrors.  # noqa: E501
        :type: str
        """
        allowed_values = ["Field 'digitalInput' is mandatory.", "Sub field 'function' of 'digitalInput' is mandatory and must contain a string of one of this arrays entries: [${diFunctionsArray}]", "Sub field 'areas' of 'digitalInput' is mandatory.", "Sub field '1' of 'areas' is mandatory and must contain a boolean value.", "Sub field '2' of 'areas' is mandatory and must contain a boolean value.", "Sub field '3' of 'areas' is mandatory and must contain a boolean value.", "Sub field '4' of 'areas' is mandatory and must contain a boolean value.", "Sub field '5' of 'areas' is mandatory and must contain a boolean value.", "Sub field '6' of 'areas' is mandatory and must contain a boolean value."]  # noqa: E501
        if digital_input_errors not in allowed_values:
            raise ValueError(
                "Invalid value for `digital_input_errors` ({0}), must be one of {1}"  # noqa: E501
                .format(digital_input_errors, allowed_values)
            )

        self._digital_input_errors = digital_input_errors

    @property
    def analog_input_errors(self):
        """Gets the analog_input_errors of this ErrorSetupErrors.  # noqa: E501


        :return: The analog_input_errors of this ErrorSetupErrors.  # noqa: E501
        :rtype: str
        """
        return self._analog_input_errors

    @analog_input_errors.setter
    def analog_input_errors(self, analog_input_errors):
        """Sets the analog_input_errors of this ErrorSetupErrors.


        :param analog_input_errors: The analog_input_errors of this ErrorSetupErrors.  # noqa: E501
        :type: str
        """
        allowed_values = ["Field 'analogInput' is mandatory.", "Sub field 'function' of 'digitaanalogInputlInput' is mandatory and must contain a string of one of this arrays entries: [${aiFunctionsArray}]", "Sub field 'function' of 'analogInput' is mandatory and must contain a string of one of this arrays entries: [${aiFunctionsArray}]", "Sub field 'areas' of 'analogInput' is mandatory.", "Sub field '1' of 'areas' is mandatory and must contain a boolean value.", "Sub field '2' of 'areas' is mandatory and must contain a boolean value.", "Sub field '3' of 'areas' is mandatory and must contain a boolean value.", "Sub field '4' of 'areas' is mandatory and must contain a boolean value.", "Sub field '5' of 'areas' is mandatory and must contain a boolean value.", "Sub field '6' of 'areas' is mandatory and must contain a boolean value.", "Sub field 'curveParameters' of 'analogInput' is mandatory.", "Sub field 'x' of 'curveParameters' is mandatory.", "Sub field 'yFanlevel' of 'curveParameters' is mandatory.", "Sub field 'yHumidity' of 'curveParameters' is mandatory.", "Sub field 'yCO2' of 'curveParameters' is mandatory.", "Sub field 'yTemp' of 'curveParameters' is mandatory.", "Sub field '1' of 'x' is mandatory and must contain an integer between 0 and 50.", "Sub field '2' of 'x' is mandatory and must contain an integer between 50 and 100.", "Sub field '1' of 'yFanlevel' is mandatory and must contain an integer between 0 and 3.", "Sub field '2' of 'yFanlevel' is mandatory and must contain an integer between 3 and 6.", "Sub field '1' of 'yHumidity' is mandatory and must contain an integer between 0 and 50.", "Sub field '2' of 'yHumidity' is mandatory and must contain an integer between 50 and 100.", "Sub field '1' of 'yCO2' is mandatory and must contain an integer between 0 and 1500 with a step size of 10.", "Sub field '2' of 'yCO2' is mandatory and must contain an integer between 1500 and 5000 with a step size of 10.", "Sub field '1' of 'yTemp' is mandatory and must contain an integer between -50 and 0.", "Sub field '2' of 'yTemp' is mandatory and must contain an integer between 0 and 50."]  # noqa: E501
        if analog_input_errors not in allowed_values:
            raise ValueError(
                "Invalid value for `analog_input_errors` ({0}), must be one of {1}"  # noqa: E501
                .format(analog_input_errors, allowed_values)
            )

        self._analog_input_errors = analog_input_errors

    @property
    def digital_output_errors(self):
        """Gets the digital_output_errors of this ErrorSetupErrors.  # noqa: E501


        :return: The digital_output_errors of this ErrorSetupErrors.  # noqa: E501
        :rtype: str
        """
        return self._digital_output_errors

    @digital_output_errors.setter
    def digital_output_errors(self, digital_output_errors):
        """Sets the digital_output_errors of this ErrorSetupErrors.


        :param digital_output_errors: The digital_output_errors of this ErrorSetupErrors.  # noqa: E501
        :type: str
        """
        allowed_values = ["Field 'digitalOuput' is mandatory.", "Sub field 'function' of 'digitalOuput' is mandatory and must contain a string of one of this arrays entries: [${doFunctionsArray}]", "Sub field 'areas' of 'digitalOuput' is mandatory.", "Sub field '1' of 'areas' is mandatory and must contain a boolean value.", "Sub field '2' of 'areas' is mandatory and must contain a boolean value.", "Sub field '3' of 'areas' is mandatory and must contain a boolean value.", "Sub field '4' of 'areas' is mandatory and must contain a boolean value.", "Sub field '5' of 'areas' is mandatory and must contain a boolean value.", "Sub field '6' of 'areas' is mandatory and must contain a boolean value."]  # noqa: E501
        if digital_output_errors not in allowed_values:
            raise ValueError(
                "Invalid value for `digital_output_errors` ({0}), must be one of {1}"  # noqa: E501
                .format(digital_output_errors, allowed_values)
            )

        self._digital_output_errors = digital_output_errors

    @property
    def factory_reset_errors(self):
        """Gets the factory_reset_errors of this ErrorSetupErrors.  # noqa: E501


        :return: The factory_reset_errors of this ErrorSetupErrors.  # noqa: E501
        :rtype: str
        """
        return self._factory_reset_errors

    @factory_reset_errors.setter
    def factory_reset_errors(self, factory_reset_errors):
        """Sets the factory_reset_errors of this ErrorSetupErrors.


        :param factory_reset_errors: The factory_reset_errors of this ErrorSetupErrors.  # noqa: E501
        :type: str
        """
        allowed_values = ["Field 'nonce' is mandatory and must be 'I REALLY know what I do!'."]  # noqa: E501
        if factory_reset_errors not in allowed_values:
            raise ValueError(
                "Invalid value for `factory_reset_errors` ({0}), must be one of {1}"  # noqa: E501
                .format(factory_reset_errors, allowed_values)
            )

        self._factory_reset_errors = factory_reset_errors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ErrorSetupErrors, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ErrorSetupErrors):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
