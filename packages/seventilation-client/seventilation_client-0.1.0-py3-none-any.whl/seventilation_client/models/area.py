# coding: utf-8

"""
    SEC Smart API

    This is the API for the <b>SEC Smart System</b>.<br><font color=\"#ff0000\"><b>ACHTUNG:</b> Diese API ist noch nicht f√ºr den produktiven Einsatz freigegeben!</font>  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Area(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'label': 'str',
        'mode': 'str',
        'timers': 'AreaTimers'
    }

    attribute_map = {
        'label': 'label',
        'mode': 'mode',
        'timers': 'timers'
    }

    def __init__(self, label=None, mode=None, timers=None):  # noqa: E501
        """Area - a model defined in Swagger"""  # noqa: E501
        self._label = None
        self._mode = None
        self._timers = None
        self.discriminator = None
        if label is not None:
            self.label = label
        if mode is not None:
            self.mode = mode
        if timers is not None:
            self.timers = timers

    @property
    def label(self):
        """Gets the label of this Area.  # noqa: E501


        :return: The label of this Area.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Area.


        :param label: The label of this Area.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "Area 1", "Area 2", "Area 3", "Area 4", "Area 5", "Area 6", "Sitting room", "Sitting room 1", "Sitting room 2", "Dining room", "Dining room 1", "Dining room 2", "Master bedroom", "Bedroom 1", "Bedroom 2", "Childs room", "Childs room 1", "Childs room 2", "Childs room 3", "Childs room 4", "Kitchen", "Kitchen 1", "Kitchen 2", "Bathroom", "Master bathroom", "Guest bathroom", "WC", "Guest WC", "Study", "Study 1", "Study 2", "Hobby room", "Multi purpose room", "Store room", "Cellar room", "Cellar room 1", "Cellar room 2", "Cellar room 3", "Attic", "Attic 1", "Attic 2", "Attic 3", "Office", "Office 1", "Office 2", "Office 3", "Office 4", "Office 6", "Executives office", "Department managers office", "Purchase dept office", "Order Processing office", "Development office", "Construction office", "Accounting office", "Dining area", "Conference room", "Conference room 1", "Conference room 2", "Conference room 3", "Lounge", "Library", "Fitness room", "Winter garden", "Craft room", "Dressing room", "Utility room"]  # noqa: E501
        if label not in allowed_values:
            raise ValueError(
                "Invalid value for `label` ({0}), must be one of {1}"  # noqa: E501
                .format(label, allowed_values)
            )

        self._label = label

    @property
    def mode(self):
        """Gets the mode of this Area.  # noqa: E501


        :return: The mode of this Area.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this Area.


        :param mode: The mode of this Area.  # noqa: E501
        :type: str
        """
        allowed_values = ["Fans off", "Manual 1", "Manual 2", "Manual 3", "Manual 4", "Manual 5", "Manual 6", "Boost ventilation", "Humidity regulation", "CO2 regulation", "Timed program", "Snooze", "INACTIVE"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"  # noqa: E501
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def timers(self):
        """Gets the timers of this Area.  # noqa: E501


        :return: The timers of this Area.  # noqa: E501
        :rtype: AreaTimers
        """
        return self._timers

    @timers.setter
    def timers(self, timers):
        """Sets the timers of this Area.


        :param timers: The timers of this Area.  # noqa: E501
        :type: AreaTimers
        """

        self._timers = timers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Area, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Area):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
