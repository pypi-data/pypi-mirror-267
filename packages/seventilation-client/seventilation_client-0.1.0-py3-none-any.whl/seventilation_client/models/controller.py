# coding: utf-8

"""
    SEC Smart API

    This is the API for the <b>SEC Smart System</b>.<br><font color=\"#ff0000\"><b>ACHTUNG:</b> Diese API ist noch nicht f√ºr den produktiven Einsatz freigegeben!</font>  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Controller(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'article_code': 'str',
        'article_code_touch_panel1': 'str',
        'article_code_touch_panel2': 'str',
        'article_code_touch_panel3': 'str'
    }

    attribute_map = {
        'article_code': 'articleCode',
        'article_code_touch_panel1': 'articleCodeTouchPanel1',
        'article_code_touch_panel2': 'articleCodeTouchPanel2',
        'article_code_touch_panel3': 'articleCodeTouchPanel3'
    }

    def __init__(self, article_code=None, article_code_touch_panel1=None, article_code_touch_panel2=None, article_code_touch_panel3=None):  # noqa: E501
        """Controller - a model defined in Swagger"""  # noqa: E501
        self._article_code = None
        self._article_code_touch_panel1 = None
        self._article_code_touch_panel2 = None
        self._article_code_touch_panel3 = None
        self.discriminator = None
        if article_code is not None:
            self.article_code = article_code
        if article_code_touch_panel1 is not None:
            self.article_code_touch_panel1 = article_code_touch_panel1
        if article_code_touch_panel2 is not None:
            self.article_code_touch_panel2 = article_code_touch_panel2
        if article_code_touch_panel3 is not None:
            self.article_code_touch_panel3 = article_code_touch_panel3

    @property
    def article_code(self):
        """Gets the article_code of this Controller.  # noqa: E501

        Article Code of the Central Control Unit. Please always refer to it if you are reporting issues with your system.  # noqa: E501

        :return: The article_code of this Controller.  # noqa: E501
        :rtype: str
        """
        return self._article_code

    @article_code.setter
    def article_code(self, article_code):
        """Sets the article_code of this Controller.

        Article Code of the Central Control Unit. Please always refer to it if you are reporting issues with your system.  # noqa: E501

        :param article_code: The article_code of this Controller.  # noqa: E501
        :type: str
        """

        self._article_code = article_code

    @property
    def article_code_touch_panel1(self):
        """Gets the article_code_touch_panel1 of this Controller.  # noqa: E501

        Article Code of the first touch panel. Only shown if connected.  # noqa: E501

        :return: The article_code_touch_panel1 of this Controller.  # noqa: E501
        :rtype: str
        """
        return self._article_code_touch_panel1

    @article_code_touch_panel1.setter
    def article_code_touch_panel1(self, article_code_touch_panel1):
        """Sets the article_code_touch_panel1 of this Controller.

        Article Code of the first touch panel. Only shown if connected.  # noqa: E501

        :param article_code_touch_panel1: The article_code_touch_panel1 of this Controller.  # noqa: E501
        :type: str
        """

        self._article_code_touch_panel1 = article_code_touch_panel1

    @property
    def article_code_touch_panel2(self):
        """Gets the article_code_touch_panel2 of this Controller.  # noqa: E501

        Article Code of the second touch panel. Only shown if connected.  # noqa: E501

        :return: The article_code_touch_panel2 of this Controller.  # noqa: E501
        :rtype: str
        """
        return self._article_code_touch_panel2

    @article_code_touch_panel2.setter
    def article_code_touch_panel2(self, article_code_touch_panel2):
        """Sets the article_code_touch_panel2 of this Controller.

        Article Code of the second touch panel. Only shown if connected.  # noqa: E501

        :param article_code_touch_panel2: The article_code_touch_panel2 of this Controller.  # noqa: E501
        :type: str
        """

        self._article_code_touch_panel2 = article_code_touch_panel2

    @property
    def article_code_touch_panel3(self):
        """Gets the article_code_touch_panel3 of this Controller.  # noqa: E501

        Article Code of the third touch panel. Only shown if connected.  # noqa: E501

        :return: The article_code_touch_panel3 of this Controller.  # noqa: E501
        :rtype: str
        """
        return self._article_code_touch_panel3

    @article_code_touch_panel3.setter
    def article_code_touch_panel3(self, article_code_touch_panel3):
        """Sets the article_code_touch_panel3 of this Controller.

        Article Code of the third touch panel. Only shown if connected.  # noqa: E501

        :param article_code_touch_panel3: The article_code_touch_panel3 of this Controller.  # noqa: E501
        :type: str
        """

        self._article_code_touch_panel3 = article_code_touch_panel3

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Controller, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Controller):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
