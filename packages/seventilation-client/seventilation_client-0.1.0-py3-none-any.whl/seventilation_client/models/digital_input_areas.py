# coding: utf-8

"""
    SEC Smart API

    This is the API for the <b>SEC Smart System</b>.<br><font color=\"#ff0000\"><b>ACHTUNG:</b> Diese API ist noch nicht f√ºr den produktiven Einsatz freigegeben!</font>  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DigitalInputAreas(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'area1': 'bool',
        'area2': 'bool',
        'area3': 'bool',
        'area4': 'bool',
        'area5': 'bool',
        'area6': 'bool'
    }

    attribute_map = {
        'area1': 'area1',
        'area2': 'area2',
        'area3': 'area3',
        'area4': 'area4',
        'area5': 'area5',
        'area6': 'area6'
    }

    def __init__(self, area1=None, area2=None, area3=None, area4=None, area5=None, area6=None):  # noqa: E501
        """DigitalInputAreas - a model defined in Swagger"""  # noqa: E501
        self._area1 = None
        self._area2 = None
        self._area3 = None
        self._area4 = None
        self._area5 = None
        self._area6 = None
        self.discriminator = None
        if area1 is not None:
            self.area1 = area1
        if area2 is not None:
            self.area2 = area2
        if area3 is not None:
            self.area3 = area3
        if area4 is not None:
            self.area4 = area4
        if area5 is not None:
            self.area5 = area5
        if area6 is not None:
            self.area6 = area6

    @property
    def area1(self):
        """Gets the area1 of this DigitalInputAreas.  # noqa: E501


        :return: The area1 of this DigitalInputAreas.  # noqa: E501
        :rtype: bool
        """
        return self._area1

    @area1.setter
    def area1(self, area1):
        """Sets the area1 of this DigitalInputAreas.


        :param area1: The area1 of this DigitalInputAreas.  # noqa: E501
        :type: bool
        """

        self._area1 = area1

    @property
    def area2(self):
        """Gets the area2 of this DigitalInputAreas.  # noqa: E501


        :return: The area2 of this DigitalInputAreas.  # noqa: E501
        :rtype: bool
        """
        return self._area2

    @area2.setter
    def area2(self, area2):
        """Sets the area2 of this DigitalInputAreas.


        :param area2: The area2 of this DigitalInputAreas.  # noqa: E501
        :type: bool
        """

        self._area2 = area2

    @property
    def area3(self):
        """Gets the area3 of this DigitalInputAreas.  # noqa: E501


        :return: The area3 of this DigitalInputAreas.  # noqa: E501
        :rtype: bool
        """
        return self._area3

    @area3.setter
    def area3(self, area3):
        """Sets the area3 of this DigitalInputAreas.


        :param area3: The area3 of this DigitalInputAreas.  # noqa: E501
        :type: bool
        """

        self._area3 = area3

    @property
    def area4(self):
        """Gets the area4 of this DigitalInputAreas.  # noqa: E501


        :return: The area4 of this DigitalInputAreas.  # noqa: E501
        :rtype: bool
        """
        return self._area4

    @area4.setter
    def area4(self, area4):
        """Sets the area4 of this DigitalInputAreas.


        :param area4: The area4 of this DigitalInputAreas.  # noqa: E501
        :type: bool
        """

        self._area4 = area4

    @property
    def area5(self):
        """Gets the area5 of this DigitalInputAreas.  # noqa: E501


        :return: The area5 of this DigitalInputAreas.  # noqa: E501
        :rtype: bool
        """
        return self._area5

    @area5.setter
    def area5(self, area5):
        """Sets the area5 of this DigitalInputAreas.


        :param area5: The area5 of this DigitalInputAreas.  # noqa: E501
        :type: bool
        """

        self._area5 = area5

    @property
    def area6(self):
        """Gets the area6 of this DigitalInputAreas.  # noqa: E501


        :return: The area6 of this DigitalInputAreas.  # noqa: E501
        :rtype: bool
        """
        return self._area6

    @area6.setter
    def area6(self, area6):
        """Sets the area6 of this DigitalInputAreas.


        :param area6: The area6 of this DigitalInputAreas.  # noqa: E501
        :type: bool
        """

        self._area6 = area6

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DigitalInputAreas, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DigitalInputAreas):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
