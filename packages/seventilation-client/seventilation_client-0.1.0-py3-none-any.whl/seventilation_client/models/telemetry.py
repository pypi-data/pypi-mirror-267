# coding: utf-8

"""
    SEC Smart API

    This is the API for the <b>SEC Smart System</b>.<br><font color=\"#ff0000\"><b>ACHTUNG:</b> Diese API ist noch nicht für den produktiven Einsatz freigegeben!</font>  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Telemetry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rest_sleep_time': 'TelemetryRestSleepTime',
        'rest_filter_time': 'int',
        'co2': 'int',
        'humidity': 'int',
        'ti': 'str',
        'ta': 'str',
        'uptime': 'str'
    }

    attribute_map = {
        'rest_sleep_time': 'restSleepTime',
        'rest_filter_time': 'restFilterTime',
        'co2': 'co2',
        'humidity': 'humidity',
        'ti': 'Ti',
        'ta': 'Ta',
        'uptime': 'uptime'
    }

    def __init__(self, rest_sleep_time=None, rest_filter_time=None, co2=None, humidity=None, ti=None, ta=None, uptime=None):  # noqa: E501
        """Telemetry - a model defined in Swagger"""  # noqa: E501
        self._rest_sleep_time = None
        self._rest_filter_time = None
        self._co2 = None
        self._humidity = None
        self._ti = None
        self._ta = None
        self._uptime = None
        self.discriminator = None
        if rest_sleep_time is not None:
            self.rest_sleep_time = rest_sleep_time
        if rest_filter_time is not None:
            self.rest_filter_time = rest_filter_time
        if co2 is not None:
            self.co2 = co2
        if humidity is not None:
            self.humidity = humidity
        if ti is not None:
            self.ti = ti
        if ta is not None:
            self.ta = ta
        if uptime is not None:
            self.uptime = uptime

    @property
    def rest_sleep_time(self):
        """Gets the rest_sleep_time of this Telemetry.  # noqa: E501


        :return: The rest_sleep_time of this Telemetry.  # noqa: E501
        :rtype: TelemetryRestSleepTime
        """
        return self._rest_sleep_time

    @rest_sleep_time.setter
    def rest_sleep_time(self, rest_sleep_time):
        """Sets the rest_sleep_time of this Telemetry.


        :param rest_sleep_time: The rest_sleep_time of this Telemetry.  # noqa: E501
        :type: TelemetryRestSleepTime
        """

        self._rest_sleep_time = rest_sleep_time

    @property
    def rest_filter_time(self):
        """Gets the rest_filter_time of this Telemetry.  # noqa: E501

        Remaining filter run time in days.  # noqa: E501

        :return: The rest_filter_time of this Telemetry.  # noqa: E501
        :rtype: int
        """
        return self._rest_filter_time

    @rest_filter_time.setter
    def rest_filter_time(self, rest_filter_time):
        """Sets the rest_filter_time of this Telemetry.

        Remaining filter run time in days.  # noqa: E501

        :param rest_filter_time: The rest_filter_time of this Telemetry.  # noqa: E501
        :type: int
        """

        self._rest_filter_time = rest_filter_time

    @property
    def co2(self):
        """Gets the co2 of this Telemetry.  # noqa: E501

        Actual sensor value of CO² in ppm.  # noqa: E501

        :return: The co2 of this Telemetry.  # noqa: E501
        :rtype: int
        """
        return self._co2

    @co2.setter
    def co2(self, co2):
        """Sets the co2 of this Telemetry.

        Actual sensor value of CO² in ppm.  # noqa: E501

        :param co2: The co2 of this Telemetry.  # noqa: E501
        :type: int
        """

        self._co2 = co2

    @property
    def humidity(self):
        """Gets the humidity of this Telemetry.  # noqa: E501

        Actual sensor value of humidity in %.  # noqa: E501

        :return: The humidity of this Telemetry.  # noqa: E501
        :rtype: int
        """
        return self._humidity

    @humidity.setter
    def humidity(self, humidity):
        """Sets the humidity of this Telemetry.

        Actual sensor value of humidity in %.  # noqa: E501

        :param humidity: The humidity of this Telemetry.  # noqa: E501
        :type: int
        """

        self._humidity = humidity

    @property
    def ti(self):
        """Gets the ti of this Telemetry.  # noqa: E501

        Actual sensor value of room temperature in °C.  # noqa: E501

        :return: The ti of this Telemetry.  # noqa: E501
        :rtype: str
        """
        return self._ti

    @ti.setter
    def ti(self, ti):
        """Sets the ti of this Telemetry.

        Actual sensor value of room temperature in °C.  # noqa: E501

        :param ti: The ti of this Telemetry.  # noqa: E501
        :type: str
        """

        self._ti = ti

    @property
    def ta(self):
        """Gets the ta of this Telemetry.  # noqa: E501

        Actual sensor value of outside temperature in °C.  # noqa: E501

        :return: The ta of this Telemetry.  # noqa: E501
        :rtype: str
        """
        return self._ta

    @ta.setter
    def ta(self, ta):
        """Sets the ta of this Telemetry.

        Actual sensor value of outside temperature in °C.  # noqa: E501

        :param ta: The ta of this Telemetry.  # noqa: E501
        :type: str
        """

        self._ta = ta

    @property
    def uptime(self):
        """Gets the uptime of this Telemetry.  # noqa: E501

        Uptime of the SEC Smart system.  # noqa: E501

        :return: The uptime of this Telemetry.  # noqa: E501
        :rtype: str
        """
        return self._uptime

    @uptime.setter
    def uptime(self, uptime):
        """Sets the uptime of this Telemetry.

        Uptime of the SEC Smart system.  # noqa: E501

        :param uptime: The uptime of this Telemetry.  # noqa: E501
        :type: str
        """

        self._uptime = uptime

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Telemetry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Telemetry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
