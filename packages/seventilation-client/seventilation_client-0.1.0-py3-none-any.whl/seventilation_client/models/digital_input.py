# coding: utf-8

"""
    SEC Smart API

    This is the API for the <b>SEC Smart System</b>.<br><font color=\"#ff0000\"><b>ACHTUNG:</b> Diese API ist noch nicht f√ºr den produktiven Einsatz freigegeben!</font>  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DigitalInput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'function': 'str',
        'areas': 'DigitalInputAreas'
    }

    attribute_map = {
        'function': 'function',
        'areas': 'areas'
    }

    def __init__(self, function=None, areas=None):  # noqa: E501
        """DigitalInput - a model defined in Swagger"""  # noqa: E501
        self._function = None
        self._areas = None
        self.discriminator = None
        if function is not None:
            self.function = function
        if areas is not None:
            self.areas = areas

    @property
    def function(self):
        """Gets the function of this DigitalInput.  # noqa: E501


        :return: The function of this DigitalInput.  # noqa: E501
        :rtype: str
        """
        return self._function

    @function.setter
    def function(self, function):
        """Sets the function of this DigitalInput.


        :param function: The function of this DigitalInput.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "Set fan stage 0", "Set fan stage 1", "Set fan stage 2", "Set fan stage 3", "Set fan stage 4", "Set fan stage 5", "Set fan stage 6", "Set boost ventilation", "Set to snooze", "Set to automatic timer", "Set to CO2", "Set to humidity", "Reset filter", "Keep fan stage 0", "Keep fan stage 1", "Keep fan stage 2", "Keep fan stage 3", "Keep fan stage 4", "Keep fan stage 5", "Keep fan stage 6", "Keep boost ventilation", "Keep at automatic timer", "Keep at CO2", "Keep at humidity"]  # noqa: E501
        if function not in allowed_values:
            raise ValueError(
                "Invalid value for `function` ({0}), must be one of {1}"  # noqa: E501
                .format(function, allowed_values)
            )

        self._function = function

    @property
    def areas(self):
        """Gets the areas of this DigitalInput.  # noqa: E501


        :return: The areas of this DigitalInput.  # noqa: E501
        :rtype: DigitalInputAreas
        """
        return self._areas

    @areas.setter
    def areas(self, areas):
        """Sets the areas of this DigitalInput.


        :param areas: The areas of this DigitalInput.  # noqa: E501
        :type: DigitalInputAreas
        """

        self._areas = areas

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DigitalInput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DigitalInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
