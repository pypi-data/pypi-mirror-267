# coding: utf-8

"""
    SEC Smart API

    This is the API for the <b>SEC Smart System</b>.<br><font color=\"#ff0000\"><b>ACHTUNG:</b> Diese API ist noch nicht f√ºr den produktiven Einsatz freigegeben!</font>  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AnalogInputCurveParameters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'x': 'AnalogInputCurveParametersX',
        'y_fanlevel': 'AnalogInputCurveParametersYFanlevel',
        'y_humidity': 'AnalogInputCurveParametersYHumidity',
        'y_co2': 'AnalogInputCurveParametersYCO2',
        'y_temp': 'AnalogInputCurveParametersYTemp'
    }

    attribute_map = {
        'x': 'x',
        'y_fanlevel': 'yFanlevel',
        'y_humidity': 'yHumidity',
        'y_co2': 'yCO2',
        'y_temp': 'yTemp'
    }

    def __init__(self, x=None, y_fanlevel=None, y_humidity=None, y_co2=None, y_temp=None):  # noqa: E501
        """AnalogInputCurveParameters - a model defined in Swagger"""  # noqa: E501
        self._x = None
        self._y_fanlevel = None
        self._y_humidity = None
        self._y_co2 = None
        self._y_temp = None
        self.discriminator = None
        if x is not None:
            self.x = x
        if y_fanlevel is not None:
            self.y_fanlevel = y_fanlevel
        if y_humidity is not None:
            self.y_humidity = y_humidity
        if y_co2 is not None:
            self.y_co2 = y_co2
        if y_temp is not None:
            self.y_temp = y_temp

    @property
    def x(self):
        """Gets the x of this AnalogInputCurveParameters.  # noqa: E501


        :return: The x of this AnalogInputCurveParameters.  # noqa: E501
        :rtype: AnalogInputCurveParametersX
        """
        return self._x

    @x.setter
    def x(self, x):
        """Sets the x of this AnalogInputCurveParameters.


        :param x: The x of this AnalogInputCurveParameters.  # noqa: E501
        :type: AnalogInputCurveParametersX
        """

        self._x = x

    @property
    def y_fanlevel(self):
        """Gets the y_fanlevel of this AnalogInputCurveParameters.  # noqa: E501


        :return: The y_fanlevel of this AnalogInputCurveParameters.  # noqa: E501
        :rtype: AnalogInputCurveParametersYFanlevel
        """
        return self._y_fanlevel

    @y_fanlevel.setter
    def y_fanlevel(self, y_fanlevel):
        """Sets the y_fanlevel of this AnalogInputCurveParameters.


        :param y_fanlevel: The y_fanlevel of this AnalogInputCurveParameters.  # noqa: E501
        :type: AnalogInputCurveParametersYFanlevel
        """

        self._y_fanlevel = y_fanlevel

    @property
    def y_humidity(self):
        """Gets the y_humidity of this AnalogInputCurveParameters.  # noqa: E501


        :return: The y_humidity of this AnalogInputCurveParameters.  # noqa: E501
        :rtype: AnalogInputCurveParametersYHumidity
        """
        return self._y_humidity

    @y_humidity.setter
    def y_humidity(self, y_humidity):
        """Sets the y_humidity of this AnalogInputCurveParameters.


        :param y_humidity: The y_humidity of this AnalogInputCurveParameters.  # noqa: E501
        :type: AnalogInputCurveParametersYHumidity
        """

        self._y_humidity = y_humidity

    @property
    def y_co2(self):
        """Gets the y_co2 of this AnalogInputCurveParameters.  # noqa: E501


        :return: The y_co2 of this AnalogInputCurveParameters.  # noqa: E501
        :rtype: AnalogInputCurveParametersYCO2
        """
        return self._y_co2

    @y_co2.setter
    def y_co2(self, y_co2):
        """Sets the y_co2 of this AnalogInputCurveParameters.


        :param y_co2: The y_co2 of this AnalogInputCurveParameters.  # noqa: E501
        :type: AnalogInputCurveParametersYCO2
        """

        self._y_co2 = y_co2

    @property
    def y_temp(self):
        """Gets the y_temp of this AnalogInputCurveParameters.  # noqa: E501


        :return: The y_temp of this AnalogInputCurveParameters.  # noqa: E501
        :rtype: AnalogInputCurveParametersYTemp
        """
        return self._y_temp

    @y_temp.setter
    def y_temp(self, y_temp):
        """Sets the y_temp of this AnalogInputCurveParameters.


        :param y_temp: The y_temp of this AnalogInputCurveParameters.  # noqa: E501
        :type: AnalogInputCurveParametersYTemp
        """

        self._y_temp = y_temp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnalogInputCurveParameters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalogInputCurveParameters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
