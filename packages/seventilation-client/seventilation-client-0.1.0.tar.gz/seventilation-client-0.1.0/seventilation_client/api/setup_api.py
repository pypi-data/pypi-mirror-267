# coding: utf-8

"""
    SEC Smart API

    This is the API for the <b>SEC Smart System</b>.<br><font color=\"#ff0000\"><b>ACHTUNG:</b> Diese API ist noch nicht f√ºr den produktiven Einsatz freigegeben!</font>  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from seventilation_client.api_client import ApiClient


class SetupApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def devices_id_setup_areas_put(self, body, id, **kwargs):  # noqa: E501
        """Set up the assignment what kind of boost mode shall be used in the particular areas  # noqa: E501

        Set up the assignment what kind of boost mode shall be used in the particular areas.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_id_setup_areas_put(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SetupAreasBody body: (required)
        :param str id: 6-digit-long alphanumerical ID of the device to be adressed (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.devices_id_setup_areas_put_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.devices_id_setup_areas_put_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def devices_id_setup_areas_put_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Set up the assignment what kind of boost mode shall be used in the particular areas  # noqa: E501

        Set up the assignment what kind of boost mode shall be used in the particular areas.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_id_setup_areas_put_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SetupAreasBody body: (required)
        :param str id: 6-digit-long alphanumerical ID of the device to be adressed (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devices_id_setup_areas_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `devices_id_setup_areas_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `devices_id_setup_areas_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['myTokenScheme']  # noqa: E501

        return self.api_client.call_api(
            '/devices/{id}/setup/areas', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def devices_id_setup_factory_reset_put(self, body, id, **kwargs):  # noqa: E501
        """Perform a factory reset of the SEC Smart System  # noqa: E501

        Perform a factory reset of the SEC Smart System.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_id_setup_factory_reset_put(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SetupFactoryresetBody body: (required)
        :param str id: 6-digit-long alphanumerical ID of the device to be adressed (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.devices_id_setup_factory_reset_put_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.devices_id_setup_factory_reset_put_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def devices_id_setup_factory_reset_put_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Perform a factory reset of the SEC Smart System  # noqa: E501

        Perform a factory reset of the SEC Smart System.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_id_setup_factory_reset_put_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SetupFactoryresetBody body: (required)
        :param str id: 6-digit-long alphanumerical ID of the device to be adressed (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devices_id_setup_factory_reset_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `devices_id_setup_factory_reset_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `devices_id_setup_factory_reset_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['myTokenScheme']  # noqa: E501

        return self.api_client.call_api(
            '/devices/{id}/setup/factory-reset', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def devices_id_setup_get(self, id, **kwargs):  # noqa: E501
        """Returns a device' setup data object  # noqa: E501

        Returns the device subobject setup for the URL-encoded device ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_id_setup_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 6-digit-long alphanumerical ID of the device to be adressed (required)
        :return: Setup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.devices_id_setup_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.devices_id_setup_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def devices_id_setup_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns a device' setup data object  # noqa: E501

        Returns the device subobject setup for the URL-encoded device ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_id_setup_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: 6-digit-long alphanumerical ID of the device to be adressed (required)
        :return: Setup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devices_id_setup_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `devices_id_setup_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['myTokenScheme']  # noqa: E501

        return self.api_client.call_api(
            '/devices/{id}/setup', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Setup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def devices_id_setup_input_ai_put(self, body, id, **kwargs):  # noqa: E501
        """Set up the configuration for the analog input  # noqa: E501

        Set up the configuration for the analog input.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_id_setup_input_ai_put(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SetupInputaiBody body: (required)
        :param str id: 6-digit-long alphanumerical ID of the device to be adressed (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.devices_id_setup_input_ai_put_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.devices_id_setup_input_ai_put_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def devices_id_setup_input_ai_put_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Set up the configuration for the analog input  # noqa: E501

        Set up the configuration for the analog input.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_id_setup_input_ai_put_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SetupInputaiBody body: (required)
        :param str id: 6-digit-long alphanumerical ID of the device to be adressed (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devices_id_setup_input_ai_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `devices_id_setup_input_ai_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `devices_id_setup_input_ai_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['myTokenScheme']  # noqa: E501

        return self.api_client.call_api(
            '/devices/{id}/setup/input-ai', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def devices_id_setup_input_di_put(self, body, id, **kwargs):  # noqa: E501
        """Set up the configuration for the digital input  # noqa: E501

        Set up the configuration for the digital input.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_id_setup_input_di_put(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SetupInputdiBody body: (required)
        :param str id: 6-digit-long alphanumerical ID of the device to be adressed (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.devices_id_setup_input_di_put_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.devices_id_setup_input_di_put_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def devices_id_setup_input_di_put_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Set up the configuration for the digital input  # noqa: E501

        Set up the configuration for the digital input.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_id_setup_input_di_put_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SetupInputdiBody body: (required)
        :param str id: 6-digit-long alphanumerical ID of the device to be adressed (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devices_id_setup_input_di_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `devices_id_setup_input_di_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `devices_id_setup_input_di_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['myTokenScheme']  # noqa: E501

        return self.api_client.call_api(
            '/devices/{id}/setup/input-di', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def devices_id_setup_output_do_put(self, body, id, **kwargs):  # noqa: E501
        """Set up the configuration for the digital output  # noqa: E501

        Set up the configuration for the digital output.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_id_setup_output_do_put(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SetupOutputdoBody body: (required)
        :param str id: 6-digit-long alphanumerical ID of the device to be adressed (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.devices_id_setup_output_do_put_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.devices_id_setup_output_do_put_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def devices_id_setup_output_do_put_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Set up the configuration for the digital output  # noqa: E501

        Set up the configuration for the digital output.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_id_setup_output_do_put_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SetupOutputdoBody body: (required)
        :param str id: 6-digit-long alphanumerical ID of the device to be adressed (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devices_id_setup_output_do_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `devices_id_setup_output_do_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `devices_id_setup_output_do_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['myTokenScheme']  # noqa: E501

        return self.api_client.call_api(
            '/devices/{id}/setup/output-do', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def devices_id_setup_systems_put(self, body, id, **kwargs):  # noqa: E501
        """Set up the assignment what systems are installed in the particular areas  # noqa: E501

        Set up the assignment what systems are installed in the particular areas.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_id_setup_systems_put(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SetupSystemsBody body: (required)
        :param str id: 6-digit-long alphanumerical ID of the device to be adressed (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.devices_id_setup_systems_put_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.devices_id_setup_systems_put_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def devices_id_setup_systems_put_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Set up the assignment what systems are installed in the particular areas  # noqa: E501

        Set up the assignment what systems are installed in the particular areas.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_id_setup_systems_put_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SetupSystemsBody body: (required)
        :param str id: 6-digit-long alphanumerical ID of the device to be adressed (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devices_id_setup_systems_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `devices_id_setup_systems_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `devices_id_setup_systems_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['myTokenScheme']  # noqa: E501

        return self.api_client.call_api(
            '/devices/{id}/setup/systems', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
