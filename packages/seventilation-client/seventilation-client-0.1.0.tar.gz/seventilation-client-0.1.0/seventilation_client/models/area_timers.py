# coding: utf-8

"""
    SEC Smart API

    This is the API for the <b>SEC Smart System</b>.<br><font color=\"#ff0000\"><b>ACHTUNG:</b> Diese API ist noch nicht f√ºr den produktiven Einsatz freigegeben!</font>  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AreaTimers(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'timer1': 'Timer',
        'timer2': 'Timer',
        'timer3': 'Timer',
        'timer4': 'Timer',
        'timer5': 'Timer'
    }

    attribute_map = {
        'timer1': 'timer1',
        'timer2': 'timer2',
        'timer3': 'timer3',
        'timer4': 'timer4',
        'timer5': 'timer5'
    }

    def __init__(self, timer1=None, timer2=None, timer3=None, timer4=None, timer5=None):  # noqa: E501
        """AreaTimers - a model defined in Swagger"""  # noqa: E501
        self._timer1 = None
        self._timer2 = None
        self._timer3 = None
        self._timer4 = None
        self._timer5 = None
        self.discriminator = None
        if timer1 is not None:
            self.timer1 = timer1
        if timer2 is not None:
            self.timer2 = timer2
        if timer3 is not None:
            self.timer3 = timer3
        if timer4 is not None:
            self.timer4 = timer4
        if timer5 is not None:
            self.timer5 = timer5

    @property
    def timer1(self):
        """Gets the timer1 of this AreaTimers.  # noqa: E501


        :return: The timer1 of this AreaTimers.  # noqa: E501
        :rtype: Timer
        """
        return self._timer1

    @timer1.setter
    def timer1(self, timer1):
        """Sets the timer1 of this AreaTimers.


        :param timer1: The timer1 of this AreaTimers.  # noqa: E501
        :type: Timer
        """

        self._timer1 = timer1

    @property
    def timer2(self):
        """Gets the timer2 of this AreaTimers.  # noqa: E501


        :return: The timer2 of this AreaTimers.  # noqa: E501
        :rtype: Timer
        """
        return self._timer2

    @timer2.setter
    def timer2(self, timer2):
        """Sets the timer2 of this AreaTimers.


        :param timer2: The timer2 of this AreaTimers.  # noqa: E501
        :type: Timer
        """

        self._timer2 = timer2

    @property
    def timer3(self):
        """Gets the timer3 of this AreaTimers.  # noqa: E501


        :return: The timer3 of this AreaTimers.  # noqa: E501
        :rtype: Timer
        """
        return self._timer3

    @timer3.setter
    def timer3(self, timer3):
        """Sets the timer3 of this AreaTimers.


        :param timer3: The timer3 of this AreaTimers.  # noqa: E501
        :type: Timer
        """

        self._timer3 = timer3

    @property
    def timer4(self):
        """Gets the timer4 of this AreaTimers.  # noqa: E501


        :return: The timer4 of this AreaTimers.  # noqa: E501
        :rtype: Timer
        """
        return self._timer4

    @timer4.setter
    def timer4(self, timer4):
        """Sets the timer4 of this AreaTimers.


        :param timer4: The timer4 of this AreaTimers.  # noqa: E501
        :type: Timer
        """

        self._timer4 = timer4

    @property
    def timer5(self):
        """Gets the timer5 of this AreaTimers.  # noqa: E501


        :return: The timer5 of this AreaTimers.  # noqa: E501
        :rtype: Timer
        """
        return self._timer5

    @timer5.setter
    def timer5(self, timer5):
        """Sets the timer5 of this AreaTimers.


        :param timer5: The timer5 of this AreaTimers.  # noqa: E501
        :type: Timer
        """

        self._timer5 = timer5

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AreaTimers, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AreaTimers):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
