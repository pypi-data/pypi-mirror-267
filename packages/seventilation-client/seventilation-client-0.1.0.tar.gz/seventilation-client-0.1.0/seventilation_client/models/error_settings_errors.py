# coding: utf-8

"""
    SEC Smart API

    This is the API for the <b>SEC Smart System</b>.<br><font color=\"#ff0000\"><b>ACHTUNG:</b> Diese API ist noch nicht f√ºr den produktiven Einsatz freigegeben!</font>  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ErrorSettingsErrors(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'filter_errors': 'str',
        'thresholds_errors': 'str',
        'sleep_time_errors': 'str',
        'device_time_errors': 'str',
        'summer_mode_errors': 'str'
    }

    attribute_map = {
        'filter_errors': 'FilterErrors',
        'thresholds_errors': 'ThresholdsErrors',
        'sleep_time_errors': 'SleepTimeErrors',
        'device_time_errors': 'DeviceTimeErrors',
        'summer_mode_errors': 'SummerModeErrors'
    }

    def __init__(self, filter_errors=None, thresholds_errors=None, sleep_time_errors=None, device_time_errors=None, summer_mode_errors=None):  # noqa: E501
        """ErrorSettingsErrors - a model defined in Swagger"""  # noqa: E501
        self._filter_errors = None
        self._thresholds_errors = None
        self._sleep_time_errors = None
        self._device_time_errors = None
        self._summer_mode_errors = None
        self.discriminator = None
        if filter_errors is not None:
            self.filter_errors = filter_errors
        if thresholds_errors is not None:
            self.thresholds_errors = thresholds_errors
        if sleep_time_errors is not None:
            self.sleep_time_errors = sleep_time_errors
        if device_time_errors is not None:
            self.device_time_errors = device_time_errors
        if summer_mode_errors is not None:
            self.summer_mode_errors = summer_mode_errors

    @property
    def filter_errors(self):
        """Gets the filter_errors of this ErrorSettingsErrors.  # noqa: E501


        :return: The filter_errors of this ErrorSettingsErrors.  # noqa: E501
        :rtype: str
        """
        return self._filter_errors

    @filter_errors.setter
    def filter_errors(self, filter_errors):
        """Sets the filter_errors of this ErrorSettingsErrors.


        :param filter_errors: The filter_errors of this ErrorSettingsErrors.  # noqa: E501
        :type: str
        """
        allowed_values = ["Field 'filter' is mandatory.", "Sub field 'maxRunTime' of 'filter' is mandatory and must be an integer between 90 and 270 with a step size of 10.", "Sub field 'reset' of 'filter' is mandatory and must be a boolean representing the command to perform a filter reset or not."]  # noqa: E501
        if filter_errors not in allowed_values:
            raise ValueError(
                "Invalid value for `filter_errors` ({0}), must be one of {1}"  # noqa: E501
                .format(filter_errors, allowed_values)
            )

        self._filter_errors = filter_errors

    @property
    def thresholds_errors(self):
        """Gets the thresholds_errors of this ErrorSettingsErrors.  # noqa: E501


        :return: The thresholds_errors of this ErrorSettingsErrors.  # noqa: E501
        :rtype: str
        """
        return self._thresholds_errors

    @thresholds_errors.setter
    def thresholds_errors(self, thresholds_errors):
        """Sets the thresholds_errors of this ErrorSettingsErrors.


        :param thresholds_errors: The thresholds_errors of this ErrorSettingsErrors.  # noqa: E501
        :type: str
        """
        allowed_values = ["Field 'thresholds' is mandatory.", "Sub field 'co2' of 'thresholds' is mandatory and must be an integer between 100 and 5000 with a step size of 10.", "Sub field 'humidity' of 'thresholds' is mandatory and must be an integer between 10 and 95."]  # noqa: E501
        if thresholds_errors not in allowed_values:
            raise ValueError(
                "Invalid value for `thresholds_errors` ({0}), must be one of {1}"  # noqa: E501
                .format(thresholds_errors, allowed_values)
            )

        self._thresholds_errors = thresholds_errors

    @property
    def sleep_time_errors(self):
        """Gets the sleep_time_errors of this ErrorSettingsErrors.  # noqa: E501


        :return: The sleep_time_errors of this ErrorSettingsErrors.  # noqa: E501
        :rtype: str
        """
        return self._sleep_time_errors

    @sleep_time_errors.setter
    def sleep_time_errors(self, sleep_time_errors):
        """Sets the sleep_time_errors of this ErrorSettingsErrors.


        :param sleep_time_errors: The sleep_time_errors of this ErrorSettingsErrors.  # noqa: E501
        :type: str
        """
        allowed_values = ["Field 'sleepTime' is mandatory and must be an integer between 10 and 250"]  # noqa: E501
        if sleep_time_errors not in allowed_values:
            raise ValueError(
                "Invalid value for `sleep_time_errors` ({0}), must be one of {1}"  # noqa: E501
                .format(sleep_time_errors, allowed_values)
            )

        self._sleep_time_errors = sleep_time_errors

    @property
    def device_time_errors(self):
        """Gets the device_time_errors of this ErrorSettingsErrors.  # noqa: E501


        :return: The device_time_errors of this ErrorSettingsErrors.  # noqa: E501
        :rtype: str
        """
        return self._device_time_errors

    @device_time_errors.setter
    def device_time_errors(self, device_time_errors):
        """Sets the device_time_errors of this ErrorSettingsErrors.


        :param device_time_errors: The device_time_errors of this ErrorSettingsErrors.  # noqa: E501
        :type: str
        """
        allowed_values = ["Field 'deviceTime' is mandatory.", "Sub field 'autoSynch' of 'deviceTime' is mandatory and must be a boolean value.", "Sub field 'date' of 'deviceTime' is mandatory and must be a ISO8601 compliant string: 'yyyy-mm-dd'.", "Sub field 'time' of 'deviceTime' is mandatory and must contain a string encoding a time value in 'hh:mm'"]  # noqa: E501
        if device_time_errors not in allowed_values:
            raise ValueError(
                "Invalid value for `device_time_errors` ({0}), must be one of {1}"  # noqa: E501
                .format(device_time_errors, allowed_values)
            )

        self._device_time_errors = device_time_errors

    @property
    def summer_mode_errors(self):
        """Gets the summer_mode_errors of this ErrorSettingsErrors.  # noqa: E501


        :return: The summer_mode_errors of this ErrorSettingsErrors.  # noqa: E501
        :rtype: str
        """
        return self._summer_mode_errors

    @summer_mode_errors.setter
    def summer_mode_errors(self, summer_mode_errors):
        """Sets the summer_mode_errors of this ErrorSettingsErrors.


        :param summer_mode_errors: The summer_mode_errors of this ErrorSettingsErrors.  # noqa: E501
        :type: str
        """
        allowed_values = ["Field 'summermode' is mandatory and must be a booelan value."]  # noqa: E501
        if summer_mode_errors not in allowed_values:
            raise ValueError(
                "Invalid value for `summer_mode_errors` ({0}), must be one of {1}"  # noqa: E501
                .format(summer_mode_errors, allowed_values)
            )

        self._summer_mode_errors = summer_mode_errors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ErrorSettingsErrors, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ErrorSettingsErrors):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
