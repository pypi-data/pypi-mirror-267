# coding: utf-8

"""
    SEC Smart API

    This is the API for the <b>SEC Smart System</b>.<br><font color=\"#ff0000\"><b>ACHTUNG:</b> Diese API ist noch nicht f√ºr den produktiven Einsatz freigegeben!</font>  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SetupSystems(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'system1': 'System',
        'system2': 'System',
        'system3': 'System',
        'system4': 'System',
        'system5': 'System',
        'system6': 'System'
    }

    attribute_map = {
        'system1': 'system1',
        'system2': 'system2',
        'system3': 'system3',
        'system4': 'system4',
        'system5': 'system5',
        'system6': 'system6'
    }

    def __init__(self, system1=None, system2=None, system3=None, system4=None, system5=None, system6=None):  # noqa: E501
        """SetupSystems - a model defined in Swagger"""  # noqa: E501
        self._system1 = None
        self._system2 = None
        self._system3 = None
        self._system4 = None
        self._system5 = None
        self._system6 = None
        self.discriminator = None
        if system1 is not None:
            self.system1 = system1
        if system2 is not None:
            self.system2 = system2
        if system3 is not None:
            self.system3 = system3
        if system4 is not None:
            self.system4 = system4
        if system5 is not None:
            self.system5 = system5
        if system6 is not None:
            self.system6 = system6

    @property
    def system1(self):
        """Gets the system1 of this SetupSystems.  # noqa: E501


        :return: The system1 of this SetupSystems.  # noqa: E501
        :rtype: System
        """
        return self._system1

    @system1.setter
    def system1(self, system1):
        """Sets the system1 of this SetupSystems.


        :param system1: The system1 of this SetupSystems.  # noqa: E501
        :type: System
        """

        self._system1 = system1

    @property
    def system2(self):
        """Gets the system2 of this SetupSystems.  # noqa: E501


        :return: The system2 of this SetupSystems.  # noqa: E501
        :rtype: System
        """
        return self._system2

    @system2.setter
    def system2(self, system2):
        """Sets the system2 of this SetupSystems.


        :param system2: The system2 of this SetupSystems.  # noqa: E501
        :type: System
        """

        self._system2 = system2

    @property
    def system3(self):
        """Gets the system3 of this SetupSystems.  # noqa: E501


        :return: The system3 of this SetupSystems.  # noqa: E501
        :rtype: System
        """
        return self._system3

    @system3.setter
    def system3(self, system3):
        """Sets the system3 of this SetupSystems.


        :param system3: The system3 of this SetupSystems.  # noqa: E501
        :type: System
        """

        self._system3 = system3

    @property
    def system4(self):
        """Gets the system4 of this SetupSystems.  # noqa: E501


        :return: The system4 of this SetupSystems.  # noqa: E501
        :rtype: System
        """
        return self._system4

    @system4.setter
    def system4(self, system4):
        """Sets the system4 of this SetupSystems.


        :param system4: The system4 of this SetupSystems.  # noqa: E501
        :type: System
        """

        self._system4 = system4

    @property
    def system5(self):
        """Gets the system5 of this SetupSystems.  # noqa: E501


        :return: The system5 of this SetupSystems.  # noqa: E501
        :rtype: System
        """
        return self._system5

    @system5.setter
    def system5(self, system5):
        """Sets the system5 of this SetupSystems.


        :param system5: The system5 of this SetupSystems.  # noqa: E501
        :type: System
        """

        self._system5 = system5

    @property
    def system6(self):
        """Gets the system6 of this SetupSystems.  # noqa: E501


        :return: The system6 of this SetupSystems.  # noqa: E501
        :rtype: System
        """
        return self._system6

    @system6.setter
    def system6(self, system6):
        """Sets the system6 of this SetupSystems.


        :param system6: The system6 of this SetupSystems.  # noqa: E501
        :type: System
        """

        self._system6 = system6

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SetupSystems, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SetupSystems):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
