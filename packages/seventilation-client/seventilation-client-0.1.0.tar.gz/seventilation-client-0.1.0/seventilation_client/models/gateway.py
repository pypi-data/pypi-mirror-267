# coding: utf-8

"""
    SEC Smart API

    This is the API for the <b>SEC Smart System</b>.<br><font color=\"#ff0000\"><b>ACHTUNG:</b> Diese API ist noch nicht f√ºr den produktiven Einsatz freigegeben!</font>  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Gateway(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'article_code': 'str',
        'id': 'str',
        'firmware_version': 'str'
    }

    attribute_map = {
        'article_code': 'articleCode',
        'id': 'id',
        'firmware_version': 'firmwareVersion'
    }

    def __init__(self, article_code=None, id=None, firmware_version=None):  # noqa: E501
        """Gateway - a model defined in Swagger"""  # noqa: E501
        self._article_code = None
        self._id = None
        self._firmware_version = None
        self.discriminator = None
        if article_code is not None:
            self.article_code = article_code
        if id is not None:
            self.id = id
        if firmware_version is not None:
            self.firmware_version = firmware_version

    @property
    def article_code(self):
        """Gets the article_code of this Gateway.  # noqa: E501

        Article Code of your gateway.  # noqa: E501

        :return: The article_code of this Gateway.  # noqa: E501
        :rtype: str
        """
        return self._article_code

    @article_code.setter
    def article_code(self, article_code):
        """Sets the article_code of this Gateway.

        Article Code of your gateway.  # noqa: E501

        :param article_code: The article_code of this Gateway.  # noqa: E501
        :type: str
        """

        self._article_code = article_code

    @property
    def id(self):
        """Gets the id of this Gateway.  # noqa: E501

        6-digit-long alphanumerical ID of the gateway. It is the same as the one of your system.  # noqa: E501

        :return: The id of this Gateway.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Gateway.

        6-digit-long alphanumerical ID of the gateway. It is the same as the one of your system.  # noqa: E501

        :param id: The id of this Gateway.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def firmware_version(self):
        """Gets the firmware_version of this Gateway.  # noqa: E501

        The version of the gateway's firmware in the format 'major.minor.fix'.  # noqa: E501

        :return: The firmware_version of this Gateway.  # noqa: E501
        :rtype: str
        """
        return self._firmware_version

    @firmware_version.setter
    def firmware_version(self, firmware_version):
        """Sets the firmware_version of this Gateway.

        The version of the gateway's firmware in the format 'major.minor.fix'.  # noqa: E501

        :param firmware_version: The firmware_version of this Gateway.  # noqa: E501
        :type: str
        """

        self._firmware_version = firmware_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Gateway, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Gateway):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
