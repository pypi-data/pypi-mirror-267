# coding: utf-8

"""
    SEC Smart API

    This is the API for the <b>SEC Smart System</b>.<br><font color=\"#ff0000\"><b>ACHTUNG:</b> Diese API ist noch nicht f√ºr den produktiven Einsatz freigegeben!</font>  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NotificationsLastMessage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'message': 'str',
        '_date': 'str',
        'time': 'str'
    }

    attribute_map = {
        'message': 'message',
        '_date': 'date',
        'time': 'time'
    }

    def __init__(self, message=None, _date=None, time=None):  # noqa: E501
        """NotificationsLastMessage - a model defined in Swagger"""  # noqa: E501
        self._message = None
        self.__date = None
        self._time = None
        self.discriminator = None
        if message is not None:
            self.message = message
        if _date is not None:
            self._date = _date
        if time is not None:
            self.time = time

    @property
    def message(self):
        """Gets the message of this NotificationsLastMessage.  # noqa: E501


        :return: The message of this NotificationsLastMessage.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this NotificationsLastMessage.


        :param message: The message of this NotificationsLastMessage.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def _date(self):
        """Gets the _date of this NotificationsLastMessage.  # noqa: E501


        :return: The _date of this NotificationsLastMessage.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this NotificationsLastMessage.


        :param _date: The _date of this NotificationsLastMessage.  # noqa: E501
        :type: str
        """

        self.__date = _date

    @property
    def time(self):
        """Gets the time of this NotificationsLastMessage.  # noqa: E501


        :return: The time of this NotificationsLastMessage.  # noqa: E501
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this NotificationsLastMessage.


        :param time: The time of this NotificationsLastMessage.  # noqa: E501
        :type: str
        """

        self._time = time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NotificationsLastMessage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NotificationsLastMessage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
