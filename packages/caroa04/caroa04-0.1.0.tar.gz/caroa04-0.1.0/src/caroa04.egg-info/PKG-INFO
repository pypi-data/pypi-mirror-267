Metadata-Version: 2.1
Name: caroa04
Version: 0.1.0
Summary: Library to control the CAROA04 CAN-IO expander device from eletechsup.
Author-email: Rodolphe Mete Soyding <r.soyding@gmail.com>
Maintainer-email: Rodolphe Mete Soyding <r.soyding@gmail.com>
License: MIT license
Project-URL: bugs, https://github.com/supermete/caroa04/issues
Project-URL: changelog, https://github.com/supermete/caroa04/blob/master/changelog.md
Project-URL: homepage, https://github.com/supermete/caroa04
Requires-Python: >=3.8
Description-Content-Type: text/x-rst
License-File: LICENSE
License-File: AUTHORS.rst
Requires-Dist: python-can>=3.3.0
Requires-Dist: numpy>=1.24.0
Provides-Extra: dev
Requires-Dist: coverage; extra == "dev"
Requires-Dist: mypy; extra == "dev"
Requires-Dist: pytest; extra == "dev"
Requires-Dist: ruff; extra == "dev"

=======
caroa04
=======


.. image:: https://img.shields.io/pypi/v/caroa04.svg
        :target: https://pypi.python.org/pypi/caroa04

.. image:: https://github.com/supermete/caroa04/actions/workflows/python-app.yml/badge.svg
    :target: https://github.com/supermete/caroa04/actions/workflows/python-app.yml
    :alt: See Build Status on GitHub Actions

.. image:: https://readthedocs.org/projects/caroa04/badge/?version=latest
        :target: https://caroa04.readthedocs.io/en/latest/?version=latest
        :alt: Documentation Status




Library to control the CAROA04 CAN-IO expander device from eletechsup.


* Free software: MIT license
* Documentation: https://caroa04.readthedocs.io.


Installation
------------

You can install "caroa04" via pip from PyPI:

    $ pip install caroao4


Usage
-----

.. code-block:: python

    from caroa04 import CaroA04

    caro = CaroA04()
    caro.start(0xE0, 'pcan', 250000, 'PCAN_USBBUS1')  # start communication

    caro.do1.phys = True  # set do1 state to True
    print(caro.do1.phys)  # read do1 state
    print(caro.di1.phys)  # read di1 state

    print(caro.bitrate.phys)  # read current bitrate
    caro.bitrate.phys = 500000  # set different baudrate (will require device power cycle)

    print(caro.node_id.phys)  # read current address code
    caro.node_id.phys = 0xE1  # set address code (will require device power cycle)

    caro.shutdown()  # free the bus

..

Features
--------

* TODO

Credits
-------

This package was created with Cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template.

.. _Cookiecutter: https://github.com/audreyr/cookiecutter
.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage
