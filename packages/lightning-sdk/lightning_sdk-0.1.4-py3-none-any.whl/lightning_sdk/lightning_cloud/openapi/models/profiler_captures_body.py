# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class ProfilerCapturesBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cloudspace_id': 'str',
        'display_name': 'str',
        'name': 'str',
        'number_of_processes': 'int'
    }

    attribute_map = {
        'cloudspace_id': 'cloudspaceId',
        'display_name': 'displayName',
        'name': 'name',
        'number_of_processes': 'numberOfProcesses'
    }

    def __init__(self, cloudspace_id: 'str' =None, display_name: 'str' =None, name: 'str' =None, number_of_processes: 'int' =None):  # noqa: E501
        """ProfilerCapturesBody - a model defined in Swagger"""  # noqa: E501
        self._cloudspace_id = None
        self._display_name = None
        self._name = None
        self._number_of_processes = None
        self.discriminator = None
        if cloudspace_id is not None:
            self.cloudspace_id = cloudspace_id
        if display_name is not None:
            self.display_name = display_name
        if name is not None:
            self.name = name
        if number_of_processes is not None:
            self.number_of_processes = number_of_processes

    @property
    def cloudspace_id(self) -> 'str':
        """Gets the cloudspace_id of this ProfilerCapturesBody.  # noqa: E501


        :return: The cloudspace_id of this ProfilerCapturesBody.  # noqa: E501
        :rtype: str
        """
        return self._cloudspace_id

    @cloudspace_id.setter
    def cloudspace_id(self, cloudspace_id: 'str'):
        """Sets the cloudspace_id of this ProfilerCapturesBody.


        :param cloudspace_id: The cloudspace_id of this ProfilerCapturesBody.  # noqa: E501
        :type: str
        """

        self._cloudspace_id = cloudspace_id

    @property
    def display_name(self) -> 'str':
        """Gets the display_name of this ProfilerCapturesBody.  # noqa: E501


        :return: The display_name of this ProfilerCapturesBody.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name: 'str'):
        """Sets the display_name of this ProfilerCapturesBody.


        :param display_name: The display_name of this ProfilerCapturesBody.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def name(self) -> 'str':
        """Gets the name of this ProfilerCapturesBody.  # noqa: E501


        :return: The name of this ProfilerCapturesBody.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this ProfilerCapturesBody.


        :param name: The name of this ProfilerCapturesBody.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def number_of_processes(self) -> 'int':
        """Gets the number_of_processes of this ProfilerCapturesBody.  # noqa: E501


        :return: The number_of_processes of this ProfilerCapturesBody.  # noqa: E501
        :rtype: int
        """
        return self._number_of_processes

    @number_of_processes.setter
    def number_of_processes(self, number_of_processes: 'int'):
        """Sets the number_of_processes of this ProfilerCapturesBody.


        :param number_of_processes: The number_of_processes of this ProfilerCapturesBody.  # noqa: E501
        :type: int
        """

        self._number_of_processes = number_of_processes

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProfilerCapturesBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'ProfilerCapturesBody') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, ProfilerCapturesBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'ProfilerCapturesBody') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
