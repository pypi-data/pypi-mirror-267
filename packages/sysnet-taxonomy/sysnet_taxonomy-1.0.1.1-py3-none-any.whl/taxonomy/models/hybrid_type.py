# coding: utf-8

"""
    API pro taxonomii CITES

    Toto je API pro taxonomii CITES  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: rjaeger@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HybridType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'source': 'list[str]',
        'comment': 'str'
    }

    attribute_map = {
        'name': 'name',
        'source': 'source',
        'comment': 'comment'
    }

    def __init__(self, name=None, source=None, comment=None):  # noqa: E501
        """HybridType - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._source = None
        self._comment = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if source is not None:
            self.source = source
        if comment is not None:
            self.comment = comment

    @property
    def name(self):
        """Gets the name of this HybridType.  # noqa: E501

        Název křížence  # noqa: E501

        :return: The name of this HybridType.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HybridType.

        Název křížence  # noqa: E501

        :param name: The name of this HybridType.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def source(self):
        """Gets the source of this HybridType.  # noqa: E501

        Seznam vědeckých názvů zdrojových druhů  # noqa: E501

        :return: The source of this HybridType.  # noqa: E501
        :rtype: list[str]
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this HybridType.

        Seznam vědeckých názvů zdrojových druhů  # noqa: E501

        :param source: The source of this HybridType.  # noqa: E501
        :type: list[str]
        """

        self._source = source

    @property
    def comment(self):
        """Gets the comment of this HybridType.  # noqa: E501

        Popis křížence  # noqa: E501

        :return: The comment of this HybridType.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this HybridType.

        Popis křížence  # noqa: E501

        :param comment: The comment of this HybridType.  # noqa: E501
        :type: str
        """

        self._comment = comment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HybridType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HybridType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
