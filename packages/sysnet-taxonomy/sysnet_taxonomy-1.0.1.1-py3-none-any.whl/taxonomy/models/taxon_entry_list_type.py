# coding: utf-8

"""
    API pro taxonomii CITES

    Toto je API pro taxonomii CITES  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: rjaeger@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TaxonEntryListType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'str',
        'start': 'int',
        'page_size': 'int',
        'page': 'int',
        'count': 'int',
        'entries': 'list[TaxonEntryType]'
    }

    attribute_map = {
        'key': 'key',
        'start': 'start',
        'page_size': 'page_size',
        'page': 'page',
        'count': 'count',
        'entries': 'entries'
    }

    def __init__(self, key=None, start=None, page_size=None, page=None, count=None, entries=None):  # noqa: E501
        """TaxonEntryListType - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._start = None
        self._page_size = None
        self._page = None
        self._count = None
        self._entries = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if start is not None:
            self.start = start
        if page_size is not None:
            self.page_size = page_size
        if page is not None:
            self.page = page
        if count is not None:
            self.count = count
        if entries is not None:
            self.entries = entries

    @property
    def key(self):
        """Gets the key of this TaxonEntryListType.  # noqa: E501

        Textový klíč (např. species)  # noqa: E501

        :return: The key of this TaxonEntryListType.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this TaxonEntryListType.

        Textový klíč (např. species)  # noqa: E501

        :param key: The key of this TaxonEntryListType.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def start(self):
        """Gets the start of this TaxonEntryListType.  # noqa: E501

        Počáteční dokument na stránce  # noqa: E501

        :return: The start of this TaxonEntryListType.  # noqa: E501
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this TaxonEntryListType.

        Počáteční dokument na stránce  # noqa: E501

        :param start: The start of this TaxonEntryListType.  # noqa: E501
        :type: int
        """

        self._start = start

    @property
    def page_size(self):
        """Gets the page_size of this TaxonEntryListType.  # noqa: E501

        Velikost stránky  # noqa: E501

        :return: The page_size of this TaxonEntryListType.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this TaxonEntryListType.

        Velikost stránky  # noqa: E501

        :param page_size: The page_size of this TaxonEntryListType.  # noqa: E501
        :type: int
        """

        self._page_size = page_size

    @property
    def page(self):
        """Gets the page of this TaxonEntryListType.  # noqa: E501

        Požadovaná stránka  # noqa: E501

        :return: The page of this TaxonEntryListType.  # noqa: E501
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this TaxonEntryListType.

        Požadovaná stránka  # noqa: E501

        :param page: The page of this TaxonEntryListType.  # noqa: E501
        :type: int
        """

        self._page = page

    @property
    def count(self):
        """Gets the count of this TaxonEntryListType.  # noqa: E501

        celkový počet vrácených položek  # noqa: E501

        :return: The count of this TaxonEntryListType.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this TaxonEntryListType.

        celkový počet vrácených položek  # noqa: E501

        :param count: The count of this TaxonEntryListType.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def entries(self):
        """Gets the entries of this TaxonEntryListType.  # noqa: E501


        :return: The entries of this TaxonEntryListType.  # noqa: E501
        :rtype: list[TaxonEntryType]
        """
        return self._entries

    @entries.setter
    def entries(self, entries):
        """Sets the entries of this TaxonEntryListType.


        :param entries: The entries of this TaxonEntryListType.  # noqa: E501
        :type: list[TaxonEntryType]
        """

        self._entries = entries

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaxonEntryListType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaxonEntryListType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
