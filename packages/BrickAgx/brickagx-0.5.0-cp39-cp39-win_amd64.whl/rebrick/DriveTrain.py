# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _DriveTrainSwig
else:
    import _DriveTrainSwig

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


SHARED_PTR_DISOWN = _DriveTrainSwig.SHARED_PTR_DISOWN

class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _DriveTrainSwig.delete_SwigPyIterator

    def value(self):
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _DriveTrainSwig.SwigPyIterator_value(self)

    def incr(self, n=1):
        r"""
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _DriveTrainSwig.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        r"""
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _DriveTrainSwig.SwigPyIterator_decr(self, n)

    def distance(self, x):
        r"""
        distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _DriveTrainSwig.SwigPyIterator_distance(self, x)

    def equal(self, x):
        r"""
        equal(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _DriveTrainSwig.SwigPyIterator_equal(self, x)

    def copy(self):
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _DriveTrainSwig.SwigPyIterator_copy(self)

    def next(self):
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _DriveTrainSwig.SwigPyIterator_next(self)

    def __next__(self):
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _DriveTrainSwig.SwigPyIterator___next__(self)

    def previous(self):
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _DriveTrainSwig.SwigPyIterator_previous(self)

    def advance(self, n):
        r"""
        advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _DriveTrainSwig.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        r"""
        __eq__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _DriveTrainSwig.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        r"""
        __ne__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _DriveTrainSwig.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        r"""
        __iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _DriveTrainSwig.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        r"""
        __isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _DriveTrainSwig.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        r"""
        __add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _DriveTrainSwig.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _DriveTrainSwig.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _DriveTrainSwig:
_DriveTrainSwig.SwigPyIterator_swigregister(SwigPyIterator)

import rebrick.Core
import rebrick.Math
import rebrick.Physics
import rebrick.Physics1D
import rebrick.Physics3D
class DriveTrain_Actuator_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(DriveTrain_Actuator_Vector self) -> SwigPyIterator"""
        return _DriveTrainSwig.DriveTrain_Actuator_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(DriveTrain_Actuator_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_Actuator_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(DriveTrain_Actuator_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_Actuator_Vector___bool__(self)

    def __len__(self):
        r"""__len__(DriveTrain_Actuator_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::size_type"""
        return _DriveTrainSwig.DriveTrain_Actuator_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(DriveTrain_Actuator_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::difference_type j) -> DriveTrain_Actuator_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::difference_type
        j: std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_Actuator_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(DriveTrain_Actuator_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::difference_type
        j: std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::difference_type

        __setslice__(DriveTrain_Actuator_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::difference_type j, DriveTrain_Actuator_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::difference_type
        j: std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::difference_type
        v: std::vector< std::shared_ptr< Brick::DriveTrain::Actuator >,std::allocator< std::shared_ptr< Brick::DriveTrain::Actuator > > > const &

        """
        return _DriveTrainSwig.DriveTrain_Actuator_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(DriveTrain_Actuator_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::difference_type
        j: std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_Actuator_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(DriveTrain_Actuator_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::difference_type

        __delitem__(DriveTrain_Actuator_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _DriveTrainSwig.DriveTrain_Actuator_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(DriveTrain_Actuator_Vector self, PySliceObject * slice) -> DriveTrain_Actuator_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(DriveTrain_Actuator_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::difference_type i) -> std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_Actuator_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(DriveTrain_Actuator_Vector self, PySliceObject * slice, DriveTrain_Actuator_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Brick::DriveTrain::Actuator >,std::allocator< std::shared_ptr< Brick::DriveTrain::Actuator > > > const &

        __setitem__(DriveTrain_Actuator_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(DriveTrain_Actuator_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::difference_type
        x: std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Actuator_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(DriveTrain_Actuator_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::value_type"""
        return _DriveTrainSwig.DriveTrain_Actuator_Vector_pop(self)

    def append(self, x):
        r"""
        append(DriveTrain_Actuator_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Actuator_Vector_append(self, x)

    def empty(self):
        r"""empty(DriveTrain_Actuator_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_Actuator_Vector_empty(self)

    def size(self):
        r"""size(DriveTrain_Actuator_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::size_type"""
        return _DriveTrainSwig.DriveTrain_Actuator_Vector_size(self)

    def swap(self, v):
        r"""
        swap(DriveTrain_Actuator_Vector self, DriveTrain_Actuator_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > > &

        """
        return _DriveTrainSwig.DriveTrain_Actuator_Vector_swap(self, v)

    def begin(self):
        r"""begin(DriveTrain_Actuator_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::iterator"""
        return _DriveTrainSwig.DriveTrain_Actuator_Vector_begin(self)

    def end(self):
        r"""end(DriveTrain_Actuator_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::iterator"""
        return _DriveTrainSwig.DriveTrain_Actuator_Vector_end(self)

    def rbegin(self):
        r"""rbegin(DriveTrain_Actuator_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_Actuator_Vector_rbegin(self)

    def rend(self):
        r"""rend(DriveTrain_Actuator_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_Actuator_Vector_rend(self)

    def clear(self):
        r"""clear(DriveTrain_Actuator_Vector self)"""
        return _DriveTrainSwig.DriveTrain_Actuator_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(DriveTrain_Actuator_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::allocator_type"""
        return _DriveTrainSwig.DriveTrain_Actuator_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(DriveTrain_Actuator_Vector self)"""
        return _DriveTrainSwig.DriveTrain_Actuator_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(DriveTrain_Actuator_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::iterator pos) -> std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::iterator

        erase(DriveTrain_Actuator_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::iterator first, std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::iterator last) -> std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::iterator
        last: std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::iterator

        """
        return _DriveTrainSwig.DriveTrain_Actuator_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(DriveTrain_Actuator_Vector self) -> DriveTrain_Actuator_Vector
        __init__(DriveTrain_Actuator_Vector self, DriveTrain_Actuator_Vector other) -> DriveTrain_Actuator_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > > const &

        __init__(DriveTrain_Actuator_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::size_type size) -> DriveTrain_Actuator_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::size_type

        __init__(DriveTrain_Actuator_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::size_type size, std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::value_type const & value) -> DriveTrain_Actuator_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::size_type
        value: std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::value_type const &

        """
        _DriveTrainSwig.DriveTrain_Actuator_Vector_swiginit(self, _DriveTrainSwig.new_DriveTrain_Actuator_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(DriveTrain_Actuator_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Actuator_Vector_push_back(self, x)

    def front(self):
        r"""front(DriveTrain_Actuator_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_Actuator_Vector_front(self)

    def back(self):
        r"""back(DriveTrain_Actuator_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_Actuator_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(DriveTrain_Actuator_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::size_type n, std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::size_type
        x: std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Actuator_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(DriveTrain_Actuator_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::size_type

        resize(DriveTrain_Actuator_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::size_type new_size, std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::size_type
        x: std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Actuator_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(DriveTrain_Actuator_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::iterator pos, std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::value_type const & x) -> std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::iterator
        x: std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::value_type const &

        insert(DriveTrain_Actuator_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::iterator pos, std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::size_type n, std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::iterator
        n: std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::size_type
        x: std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Actuator_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(DriveTrain_Actuator_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::size_type

        """
        return _DriveTrainSwig.DriveTrain_Actuator_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(DriveTrain_Actuator_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Actuator > >::size_type"""
        return _DriveTrainSwig.DriveTrain_Actuator_Vector_capacity(self)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_Actuator_Vector

# Register DriveTrain_Actuator_Vector in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_Actuator_Vector_swigregister(DriveTrain_Actuator_Vector)

class DriveTrain_Differential_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Brick::DriveTrain::Differential > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(DriveTrain_Differential_Vector self) -> SwigPyIterator"""
        return _DriveTrainSwig.DriveTrain_Differential_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(DriveTrain_Differential_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_Differential_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(DriveTrain_Differential_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_Differential_Vector___bool__(self)

    def __len__(self):
        r"""__len__(DriveTrain_Differential_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::size_type"""
        return _DriveTrainSwig.DriveTrain_Differential_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(DriveTrain_Differential_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::difference_type j) -> DriveTrain_Differential_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::difference_type
        j: std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_Differential_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(DriveTrain_Differential_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::difference_type
        j: std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::difference_type

        __setslice__(DriveTrain_Differential_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::difference_type j, DriveTrain_Differential_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::difference_type
        j: std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::difference_type
        v: std::vector< std::shared_ptr< Brick::DriveTrain::Differential >,std::allocator< std::shared_ptr< Brick::DriveTrain::Differential > > > const &

        """
        return _DriveTrainSwig.DriveTrain_Differential_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(DriveTrain_Differential_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::difference_type
        j: std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_Differential_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(DriveTrain_Differential_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::difference_type

        __delitem__(DriveTrain_Differential_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _DriveTrainSwig.DriveTrain_Differential_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(DriveTrain_Differential_Vector self, PySliceObject * slice) -> DriveTrain_Differential_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(DriveTrain_Differential_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::difference_type i) -> std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_Differential_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(DriveTrain_Differential_Vector self, PySliceObject * slice, DriveTrain_Differential_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Brick::DriveTrain::Differential >,std::allocator< std::shared_ptr< Brick::DriveTrain::Differential > > > const &

        __setitem__(DriveTrain_Differential_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(DriveTrain_Differential_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::difference_type
        x: std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Differential_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(DriveTrain_Differential_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::value_type"""
        return _DriveTrainSwig.DriveTrain_Differential_Vector_pop(self)

    def append(self, x):
        r"""
        append(DriveTrain_Differential_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Differential_Vector_append(self, x)

    def empty(self):
        r"""empty(DriveTrain_Differential_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_Differential_Vector_empty(self)

    def size(self):
        r"""size(DriveTrain_Differential_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::size_type"""
        return _DriveTrainSwig.DriveTrain_Differential_Vector_size(self)

    def swap(self, v):
        r"""
        swap(DriveTrain_Differential_Vector self, DriveTrain_Differential_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Brick::DriveTrain::Differential > > &

        """
        return _DriveTrainSwig.DriveTrain_Differential_Vector_swap(self, v)

    def begin(self):
        r"""begin(DriveTrain_Differential_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::iterator"""
        return _DriveTrainSwig.DriveTrain_Differential_Vector_begin(self)

    def end(self):
        r"""end(DriveTrain_Differential_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::iterator"""
        return _DriveTrainSwig.DriveTrain_Differential_Vector_end(self)

    def rbegin(self):
        r"""rbegin(DriveTrain_Differential_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_Differential_Vector_rbegin(self)

    def rend(self):
        r"""rend(DriveTrain_Differential_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_Differential_Vector_rend(self)

    def clear(self):
        r"""clear(DriveTrain_Differential_Vector self)"""
        return _DriveTrainSwig.DriveTrain_Differential_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(DriveTrain_Differential_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::allocator_type"""
        return _DriveTrainSwig.DriveTrain_Differential_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(DriveTrain_Differential_Vector self)"""
        return _DriveTrainSwig.DriveTrain_Differential_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(DriveTrain_Differential_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::iterator pos) -> std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::iterator

        erase(DriveTrain_Differential_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::iterator first, std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::iterator last) -> std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::iterator
        last: std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::iterator

        """
        return _DriveTrainSwig.DriveTrain_Differential_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(DriveTrain_Differential_Vector self) -> DriveTrain_Differential_Vector
        __init__(DriveTrain_Differential_Vector self, DriveTrain_Differential_Vector other) -> DriveTrain_Differential_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Brick::DriveTrain::Differential > > const &

        __init__(DriveTrain_Differential_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::size_type size) -> DriveTrain_Differential_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::size_type

        __init__(DriveTrain_Differential_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::size_type size, std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::value_type const & value) -> DriveTrain_Differential_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::size_type
        value: std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::value_type const &

        """
        _DriveTrainSwig.DriveTrain_Differential_Vector_swiginit(self, _DriveTrainSwig.new_DriveTrain_Differential_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(DriveTrain_Differential_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Differential_Vector_push_back(self, x)

    def front(self):
        r"""front(DriveTrain_Differential_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_Differential_Vector_front(self)

    def back(self):
        r"""back(DriveTrain_Differential_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_Differential_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(DriveTrain_Differential_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::size_type n, std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::size_type
        x: std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Differential_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(DriveTrain_Differential_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::size_type

        resize(DriveTrain_Differential_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::size_type new_size, std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::size_type
        x: std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Differential_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(DriveTrain_Differential_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::iterator pos, std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::value_type const & x) -> std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::iterator
        x: std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::value_type const &

        insert(DriveTrain_Differential_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::iterator pos, std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::size_type n, std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::iterator
        n: std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::size_type
        x: std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Differential_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(DriveTrain_Differential_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::size_type

        """
        return _DriveTrainSwig.DriveTrain_Differential_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(DriveTrain_Differential_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Differential > >::size_type"""
        return _DriveTrainSwig.DriveTrain_Differential_Vector_capacity(self)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_Differential_Vector

# Register DriveTrain_Differential_Vector in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_Differential_Vector_swigregister(DriveTrain_Differential_Vector)

class DriveTrain_Engine_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Brick::DriveTrain::Engine > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(DriveTrain_Engine_Vector self) -> SwigPyIterator"""
        return _DriveTrainSwig.DriveTrain_Engine_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(DriveTrain_Engine_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_Engine_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(DriveTrain_Engine_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_Engine_Vector___bool__(self)

    def __len__(self):
        r"""__len__(DriveTrain_Engine_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::size_type"""
        return _DriveTrainSwig.DriveTrain_Engine_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(DriveTrain_Engine_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::difference_type j) -> DriveTrain_Engine_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::difference_type
        j: std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_Engine_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(DriveTrain_Engine_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::difference_type
        j: std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::difference_type

        __setslice__(DriveTrain_Engine_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::difference_type j, DriveTrain_Engine_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::difference_type
        j: std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::difference_type
        v: std::vector< std::shared_ptr< Brick::DriveTrain::Engine >,std::allocator< std::shared_ptr< Brick::DriveTrain::Engine > > > const &

        """
        return _DriveTrainSwig.DriveTrain_Engine_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(DriveTrain_Engine_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::difference_type
        j: std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_Engine_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(DriveTrain_Engine_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::difference_type

        __delitem__(DriveTrain_Engine_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _DriveTrainSwig.DriveTrain_Engine_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(DriveTrain_Engine_Vector self, PySliceObject * slice) -> DriveTrain_Engine_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(DriveTrain_Engine_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::difference_type i) -> std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_Engine_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(DriveTrain_Engine_Vector self, PySliceObject * slice, DriveTrain_Engine_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Brick::DriveTrain::Engine >,std::allocator< std::shared_ptr< Brick::DriveTrain::Engine > > > const &

        __setitem__(DriveTrain_Engine_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(DriveTrain_Engine_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::difference_type
        x: std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Engine_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(DriveTrain_Engine_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::value_type"""
        return _DriveTrainSwig.DriveTrain_Engine_Vector_pop(self)

    def append(self, x):
        r"""
        append(DriveTrain_Engine_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Engine_Vector_append(self, x)

    def empty(self):
        r"""empty(DriveTrain_Engine_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_Engine_Vector_empty(self)

    def size(self):
        r"""size(DriveTrain_Engine_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::size_type"""
        return _DriveTrainSwig.DriveTrain_Engine_Vector_size(self)

    def swap(self, v):
        r"""
        swap(DriveTrain_Engine_Vector self, DriveTrain_Engine_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Brick::DriveTrain::Engine > > &

        """
        return _DriveTrainSwig.DriveTrain_Engine_Vector_swap(self, v)

    def begin(self):
        r"""begin(DriveTrain_Engine_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::iterator"""
        return _DriveTrainSwig.DriveTrain_Engine_Vector_begin(self)

    def end(self):
        r"""end(DriveTrain_Engine_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::iterator"""
        return _DriveTrainSwig.DriveTrain_Engine_Vector_end(self)

    def rbegin(self):
        r"""rbegin(DriveTrain_Engine_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_Engine_Vector_rbegin(self)

    def rend(self):
        r"""rend(DriveTrain_Engine_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_Engine_Vector_rend(self)

    def clear(self):
        r"""clear(DriveTrain_Engine_Vector self)"""
        return _DriveTrainSwig.DriveTrain_Engine_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(DriveTrain_Engine_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::allocator_type"""
        return _DriveTrainSwig.DriveTrain_Engine_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(DriveTrain_Engine_Vector self)"""
        return _DriveTrainSwig.DriveTrain_Engine_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(DriveTrain_Engine_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::iterator pos) -> std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::iterator

        erase(DriveTrain_Engine_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::iterator first, std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::iterator last) -> std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::iterator
        last: std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::iterator

        """
        return _DriveTrainSwig.DriveTrain_Engine_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(DriveTrain_Engine_Vector self) -> DriveTrain_Engine_Vector
        __init__(DriveTrain_Engine_Vector self, DriveTrain_Engine_Vector other) -> DriveTrain_Engine_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Brick::DriveTrain::Engine > > const &

        __init__(DriveTrain_Engine_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::size_type size) -> DriveTrain_Engine_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::size_type

        __init__(DriveTrain_Engine_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::size_type size, std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::value_type const & value) -> DriveTrain_Engine_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::size_type
        value: std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::value_type const &

        """
        _DriveTrainSwig.DriveTrain_Engine_Vector_swiginit(self, _DriveTrainSwig.new_DriveTrain_Engine_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(DriveTrain_Engine_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Engine_Vector_push_back(self, x)

    def front(self):
        r"""front(DriveTrain_Engine_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_Engine_Vector_front(self)

    def back(self):
        r"""back(DriveTrain_Engine_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_Engine_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(DriveTrain_Engine_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::size_type n, std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::size_type
        x: std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Engine_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(DriveTrain_Engine_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::size_type

        resize(DriveTrain_Engine_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::size_type new_size, std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::size_type
        x: std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Engine_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(DriveTrain_Engine_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::iterator pos, std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::value_type const & x) -> std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::iterator
        x: std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::value_type const &

        insert(DriveTrain_Engine_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::iterator pos, std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::size_type n, std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::iterator
        n: std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::size_type
        x: std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Engine_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(DriveTrain_Engine_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::size_type

        """
        return _DriveTrainSwig.DriveTrain_Engine_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(DriveTrain_Engine_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Engine > >::size_type"""
        return _DriveTrainSwig.DriveTrain_Engine_Vector_capacity(self)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_Engine_Vector

# Register DriveTrain_Engine_Vector in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_Engine_Vector_swigregister(DriveTrain_Engine_Vector)

class DriveTrain_Gear_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Brick::DriveTrain::Gear > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(DriveTrain_Gear_Vector self) -> SwigPyIterator"""
        return _DriveTrainSwig.DriveTrain_Gear_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(DriveTrain_Gear_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_Gear_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(DriveTrain_Gear_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_Gear_Vector___bool__(self)

    def __len__(self):
        r"""__len__(DriveTrain_Gear_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::size_type"""
        return _DriveTrainSwig.DriveTrain_Gear_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(DriveTrain_Gear_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::difference_type j) -> DriveTrain_Gear_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::difference_type
        j: std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_Gear_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(DriveTrain_Gear_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::difference_type
        j: std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::difference_type

        __setslice__(DriveTrain_Gear_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::difference_type j, DriveTrain_Gear_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::difference_type
        j: std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::difference_type
        v: std::vector< std::shared_ptr< Brick::DriveTrain::Gear >,std::allocator< std::shared_ptr< Brick::DriveTrain::Gear > > > const &

        """
        return _DriveTrainSwig.DriveTrain_Gear_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(DriveTrain_Gear_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::difference_type
        j: std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_Gear_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(DriveTrain_Gear_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::difference_type

        __delitem__(DriveTrain_Gear_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _DriveTrainSwig.DriveTrain_Gear_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(DriveTrain_Gear_Vector self, PySliceObject * slice) -> DriveTrain_Gear_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(DriveTrain_Gear_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::difference_type i) -> std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_Gear_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(DriveTrain_Gear_Vector self, PySliceObject * slice, DriveTrain_Gear_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Brick::DriveTrain::Gear >,std::allocator< std::shared_ptr< Brick::DriveTrain::Gear > > > const &

        __setitem__(DriveTrain_Gear_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(DriveTrain_Gear_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::difference_type
        x: std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Gear_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(DriveTrain_Gear_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::value_type"""
        return _DriveTrainSwig.DriveTrain_Gear_Vector_pop(self)

    def append(self, x):
        r"""
        append(DriveTrain_Gear_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Gear_Vector_append(self, x)

    def empty(self):
        r"""empty(DriveTrain_Gear_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_Gear_Vector_empty(self)

    def size(self):
        r"""size(DriveTrain_Gear_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::size_type"""
        return _DriveTrainSwig.DriveTrain_Gear_Vector_size(self)

    def swap(self, v):
        r"""
        swap(DriveTrain_Gear_Vector self, DriveTrain_Gear_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Brick::DriveTrain::Gear > > &

        """
        return _DriveTrainSwig.DriveTrain_Gear_Vector_swap(self, v)

    def begin(self):
        r"""begin(DriveTrain_Gear_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::iterator"""
        return _DriveTrainSwig.DriveTrain_Gear_Vector_begin(self)

    def end(self):
        r"""end(DriveTrain_Gear_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::iterator"""
        return _DriveTrainSwig.DriveTrain_Gear_Vector_end(self)

    def rbegin(self):
        r"""rbegin(DriveTrain_Gear_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_Gear_Vector_rbegin(self)

    def rend(self):
        r"""rend(DriveTrain_Gear_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_Gear_Vector_rend(self)

    def clear(self):
        r"""clear(DriveTrain_Gear_Vector self)"""
        return _DriveTrainSwig.DriveTrain_Gear_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(DriveTrain_Gear_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::allocator_type"""
        return _DriveTrainSwig.DriveTrain_Gear_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(DriveTrain_Gear_Vector self)"""
        return _DriveTrainSwig.DriveTrain_Gear_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(DriveTrain_Gear_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::iterator pos) -> std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::iterator

        erase(DriveTrain_Gear_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::iterator first, std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::iterator last) -> std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::iterator
        last: std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::iterator

        """
        return _DriveTrainSwig.DriveTrain_Gear_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(DriveTrain_Gear_Vector self) -> DriveTrain_Gear_Vector
        __init__(DriveTrain_Gear_Vector self, DriveTrain_Gear_Vector other) -> DriveTrain_Gear_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Brick::DriveTrain::Gear > > const &

        __init__(DriveTrain_Gear_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::size_type size) -> DriveTrain_Gear_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::size_type

        __init__(DriveTrain_Gear_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::size_type size, std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::value_type const & value) -> DriveTrain_Gear_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::size_type
        value: std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::value_type const &

        """
        _DriveTrainSwig.DriveTrain_Gear_Vector_swiginit(self, _DriveTrainSwig.new_DriveTrain_Gear_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(DriveTrain_Gear_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Gear_Vector_push_back(self, x)

    def front(self):
        r"""front(DriveTrain_Gear_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_Gear_Vector_front(self)

    def back(self):
        r"""back(DriveTrain_Gear_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_Gear_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(DriveTrain_Gear_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::size_type n, std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::size_type
        x: std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Gear_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(DriveTrain_Gear_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::size_type

        resize(DriveTrain_Gear_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::size_type new_size, std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::size_type
        x: std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Gear_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(DriveTrain_Gear_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::iterator pos, std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::value_type const & x) -> std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::iterator
        x: std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::value_type const &

        insert(DriveTrain_Gear_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::iterator pos, std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::size_type n, std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::iterator
        n: std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::size_type
        x: std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Gear_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(DriveTrain_Gear_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::size_type

        """
        return _DriveTrainSwig.DriveTrain_Gear_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(DriveTrain_Gear_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Gear > >::size_type"""
        return _DriveTrainSwig.DriveTrain_Gear_Vector_capacity(self)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_Gear_Vector

# Register DriveTrain_Gear_Vector in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_Gear_Vector_swigregister(DriveTrain_Gear_Vector)

class DriveTrain_HingeActuator_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(DriveTrain_HingeActuator_Vector self) -> SwigPyIterator"""
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(DriveTrain_HingeActuator_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(DriveTrain_HingeActuator_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector___bool__(self)

    def __len__(self):
        r"""__len__(DriveTrain_HingeActuator_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::size_type"""
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(DriveTrain_HingeActuator_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::difference_type j) -> DriveTrain_HingeActuator_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::difference_type
        j: std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(DriveTrain_HingeActuator_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::difference_type
        j: std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::difference_type

        __setslice__(DriveTrain_HingeActuator_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::difference_type j, DriveTrain_HingeActuator_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::difference_type
        j: std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::difference_type
        v: std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator >,std::allocator< std::shared_ptr< Brick::DriveTrain::HingeActuator > > > const &

        """
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(DriveTrain_HingeActuator_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::difference_type
        j: std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(DriveTrain_HingeActuator_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::difference_type

        __delitem__(DriveTrain_HingeActuator_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(DriveTrain_HingeActuator_Vector self, PySliceObject * slice) -> DriveTrain_HingeActuator_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(DriveTrain_HingeActuator_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::difference_type i) -> std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(DriveTrain_HingeActuator_Vector self, PySliceObject * slice, DriveTrain_HingeActuator_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator >,std::allocator< std::shared_ptr< Brick::DriveTrain::HingeActuator > > > const &

        __setitem__(DriveTrain_HingeActuator_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(DriveTrain_HingeActuator_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::difference_type
        x: std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(DriveTrain_HingeActuator_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::value_type"""
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector_pop(self)

    def append(self, x):
        r"""
        append(DriveTrain_HingeActuator_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector_append(self, x)

    def empty(self):
        r"""empty(DriveTrain_HingeActuator_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector_empty(self)

    def size(self):
        r"""size(DriveTrain_HingeActuator_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::size_type"""
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector_size(self)

    def swap(self, v):
        r"""
        swap(DriveTrain_HingeActuator_Vector self, DriveTrain_HingeActuator_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > > &

        """
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector_swap(self, v)

    def begin(self):
        r"""begin(DriveTrain_HingeActuator_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::iterator"""
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector_begin(self)

    def end(self):
        r"""end(DriveTrain_HingeActuator_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::iterator"""
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector_end(self)

    def rbegin(self):
        r"""rbegin(DriveTrain_HingeActuator_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector_rbegin(self)

    def rend(self):
        r"""rend(DriveTrain_HingeActuator_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector_rend(self)

    def clear(self):
        r"""clear(DriveTrain_HingeActuator_Vector self)"""
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(DriveTrain_HingeActuator_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::allocator_type"""
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(DriveTrain_HingeActuator_Vector self)"""
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(DriveTrain_HingeActuator_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::iterator pos) -> std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::iterator

        erase(DriveTrain_HingeActuator_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::iterator first, std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::iterator last) -> std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::iterator
        last: std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::iterator

        """
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(DriveTrain_HingeActuator_Vector self) -> DriveTrain_HingeActuator_Vector
        __init__(DriveTrain_HingeActuator_Vector self, DriveTrain_HingeActuator_Vector other) -> DriveTrain_HingeActuator_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > > const &

        __init__(DriveTrain_HingeActuator_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::size_type size) -> DriveTrain_HingeActuator_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::size_type

        __init__(DriveTrain_HingeActuator_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::size_type size, std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::value_type const & value) -> DriveTrain_HingeActuator_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::size_type
        value: std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::value_type const &

        """
        _DriveTrainSwig.DriveTrain_HingeActuator_Vector_swiginit(self, _DriveTrainSwig.new_DriveTrain_HingeActuator_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(DriveTrain_HingeActuator_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector_push_back(self, x)

    def front(self):
        r"""front(DriveTrain_HingeActuator_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector_front(self)

    def back(self):
        r"""back(DriveTrain_HingeActuator_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(DriveTrain_HingeActuator_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::size_type n, std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::size_type
        x: std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(DriveTrain_HingeActuator_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::size_type

        resize(DriveTrain_HingeActuator_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::size_type new_size, std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::size_type
        x: std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(DriveTrain_HingeActuator_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::iterator pos, std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::value_type const & x) -> std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::iterator
        x: std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::value_type const &

        insert(DriveTrain_HingeActuator_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::iterator pos, std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::size_type n, std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::iterator
        n: std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::size_type
        x: std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(DriveTrain_HingeActuator_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::size_type

        """
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(DriveTrain_HingeActuator_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::HingeActuator > >::size_type"""
        return _DriveTrainSwig.DriveTrain_HingeActuator_Vector_capacity(self)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_HingeActuator_Vector

# Register DriveTrain_HingeActuator_Vector in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_HingeActuator_Vector_swigregister(DriveTrain_HingeActuator_Vector)

class DriveTrain_PrismaticActuator_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(DriveTrain_PrismaticActuator_Vector self) -> SwigPyIterator"""
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(DriveTrain_PrismaticActuator_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(DriveTrain_PrismaticActuator_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector___bool__(self)

    def __len__(self):
        r"""__len__(DriveTrain_PrismaticActuator_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::size_type"""
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(DriveTrain_PrismaticActuator_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::difference_type j) -> DriveTrain_PrismaticActuator_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::difference_type
        j: std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(DriveTrain_PrismaticActuator_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::difference_type
        j: std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::difference_type

        __setslice__(DriveTrain_PrismaticActuator_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::difference_type j, DriveTrain_PrismaticActuator_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::difference_type
        j: std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::difference_type
        v: std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator >,std::allocator< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > > > const &

        """
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(DriveTrain_PrismaticActuator_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::difference_type
        j: std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(DriveTrain_PrismaticActuator_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::difference_type

        __delitem__(DriveTrain_PrismaticActuator_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(DriveTrain_PrismaticActuator_Vector self, PySliceObject * slice) -> DriveTrain_PrismaticActuator_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(DriveTrain_PrismaticActuator_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::difference_type i) -> std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(DriveTrain_PrismaticActuator_Vector self, PySliceObject * slice, DriveTrain_PrismaticActuator_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator >,std::allocator< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > > > const &

        __setitem__(DriveTrain_PrismaticActuator_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(DriveTrain_PrismaticActuator_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::difference_type
        x: std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(DriveTrain_PrismaticActuator_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::value_type"""
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector_pop(self)

    def append(self, x):
        r"""
        append(DriveTrain_PrismaticActuator_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector_append(self, x)

    def empty(self):
        r"""empty(DriveTrain_PrismaticActuator_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector_empty(self)

    def size(self):
        r"""size(DriveTrain_PrismaticActuator_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::size_type"""
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector_size(self)

    def swap(self, v):
        r"""
        swap(DriveTrain_PrismaticActuator_Vector self, DriveTrain_PrismaticActuator_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > > &

        """
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector_swap(self, v)

    def begin(self):
        r"""begin(DriveTrain_PrismaticActuator_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::iterator"""
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector_begin(self)

    def end(self):
        r"""end(DriveTrain_PrismaticActuator_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::iterator"""
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector_end(self)

    def rbegin(self):
        r"""rbegin(DriveTrain_PrismaticActuator_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector_rbegin(self)

    def rend(self):
        r"""rend(DriveTrain_PrismaticActuator_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector_rend(self)

    def clear(self):
        r"""clear(DriveTrain_PrismaticActuator_Vector self)"""
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(DriveTrain_PrismaticActuator_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::allocator_type"""
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(DriveTrain_PrismaticActuator_Vector self)"""
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(DriveTrain_PrismaticActuator_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::iterator pos) -> std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::iterator

        erase(DriveTrain_PrismaticActuator_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::iterator first, std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::iterator last) -> std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::iterator
        last: std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::iterator

        """
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(DriveTrain_PrismaticActuator_Vector self) -> DriveTrain_PrismaticActuator_Vector
        __init__(DriveTrain_PrismaticActuator_Vector self, DriveTrain_PrismaticActuator_Vector other) -> DriveTrain_PrismaticActuator_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > > const &

        __init__(DriveTrain_PrismaticActuator_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::size_type size) -> DriveTrain_PrismaticActuator_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::size_type

        __init__(DriveTrain_PrismaticActuator_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::size_type size, std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::value_type const & value) -> DriveTrain_PrismaticActuator_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::size_type
        value: std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::value_type const &

        """
        _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector_swiginit(self, _DriveTrainSwig.new_DriveTrain_PrismaticActuator_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(DriveTrain_PrismaticActuator_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector_push_back(self, x)

    def front(self):
        r"""front(DriveTrain_PrismaticActuator_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector_front(self)

    def back(self):
        r"""back(DriveTrain_PrismaticActuator_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(DriveTrain_PrismaticActuator_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::size_type n, std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::size_type
        x: std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(DriveTrain_PrismaticActuator_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::size_type

        resize(DriveTrain_PrismaticActuator_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::size_type new_size, std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::size_type
        x: std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(DriveTrain_PrismaticActuator_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::iterator pos, std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::value_type const & x) -> std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::iterator
        x: std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::value_type const &

        insert(DriveTrain_PrismaticActuator_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::iterator pos, std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::size_type n, std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::iterator
        n: std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::size_type
        x: std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(DriveTrain_PrismaticActuator_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::size_type

        """
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(DriveTrain_PrismaticActuator_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::PrismaticActuator > >::size_type"""
        return _DriveTrainSwig.DriveTrain_PrismaticActuator_Vector_capacity(self)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_PrismaticActuator_Vector

# Register DriveTrain_PrismaticActuator_Vector in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_PrismaticActuator_Vector_swigregister(DriveTrain_PrismaticActuator_Vector)

class DriveTrain_RPMTorquePair_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(DriveTrain_RPMTorquePair_Vector self) -> SwigPyIterator"""
        return _DriveTrainSwig.DriveTrain_RPMTorquePair_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(DriveTrain_RPMTorquePair_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_RPMTorquePair_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(DriveTrain_RPMTorquePair_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_RPMTorquePair_Vector___bool__(self)

    def __len__(self):
        r"""__len__(DriveTrain_RPMTorquePair_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::size_type"""
        return _DriveTrainSwig.DriveTrain_RPMTorquePair_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(DriveTrain_RPMTorquePair_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::difference_type j) -> DriveTrain_RPMTorquePair_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::difference_type
        j: std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_RPMTorquePair_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(DriveTrain_RPMTorquePair_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::difference_type
        j: std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::difference_type

        __setslice__(DriveTrain_RPMTorquePair_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::difference_type j, DriveTrain_RPMTorquePair_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::difference_type
        j: std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::difference_type
        v: std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair >,std::allocator< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > > > const &

        """
        return _DriveTrainSwig.DriveTrain_RPMTorquePair_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(DriveTrain_RPMTorquePair_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::difference_type
        j: std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_RPMTorquePair_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(DriveTrain_RPMTorquePair_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::difference_type

        __delitem__(DriveTrain_RPMTorquePair_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _DriveTrainSwig.DriveTrain_RPMTorquePair_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(DriveTrain_RPMTorquePair_Vector self, PySliceObject * slice) -> DriveTrain_RPMTorquePair_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(DriveTrain_RPMTorquePair_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::difference_type i) -> std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_RPMTorquePair_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(DriveTrain_RPMTorquePair_Vector self, PySliceObject * slice, DriveTrain_RPMTorquePair_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair >,std::allocator< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > > > const &

        __setitem__(DriveTrain_RPMTorquePair_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(DriveTrain_RPMTorquePair_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::difference_type
        x: std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_RPMTorquePair_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(DriveTrain_RPMTorquePair_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::value_type"""
        return _DriveTrainSwig.DriveTrain_RPMTorquePair_Vector_pop(self)

    def append(self, x):
        r"""
        append(DriveTrain_RPMTorquePair_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_RPMTorquePair_Vector_append(self, x)

    def empty(self):
        r"""empty(DriveTrain_RPMTorquePair_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_RPMTorquePair_Vector_empty(self)

    def size(self):
        r"""size(DriveTrain_RPMTorquePair_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::size_type"""
        return _DriveTrainSwig.DriveTrain_RPMTorquePair_Vector_size(self)

    def swap(self, v):
        r"""
        swap(DriveTrain_RPMTorquePair_Vector self, DriveTrain_RPMTorquePair_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > > &

        """
        return _DriveTrainSwig.DriveTrain_RPMTorquePair_Vector_swap(self, v)

    def begin(self):
        r"""begin(DriveTrain_RPMTorquePair_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::iterator"""
        return _DriveTrainSwig.DriveTrain_RPMTorquePair_Vector_begin(self)

    def end(self):
        r"""end(DriveTrain_RPMTorquePair_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::iterator"""
        return _DriveTrainSwig.DriveTrain_RPMTorquePair_Vector_end(self)

    def rbegin(self):
        r"""rbegin(DriveTrain_RPMTorquePair_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_RPMTorquePair_Vector_rbegin(self)

    def rend(self):
        r"""rend(DriveTrain_RPMTorquePair_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_RPMTorquePair_Vector_rend(self)

    def clear(self):
        r"""clear(DriveTrain_RPMTorquePair_Vector self)"""
        return _DriveTrainSwig.DriveTrain_RPMTorquePair_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(DriveTrain_RPMTorquePair_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::allocator_type"""
        return _DriveTrainSwig.DriveTrain_RPMTorquePair_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(DriveTrain_RPMTorquePair_Vector self)"""
        return _DriveTrainSwig.DriveTrain_RPMTorquePair_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(DriveTrain_RPMTorquePair_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::iterator pos) -> std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::iterator

        erase(DriveTrain_RPMTorquePair_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::iterator first, std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::iterator last) -> std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::iterator
        last: std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::iterator

        """
        return _DriveTrainSwig.DriveTrain_RPMTorquePair_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(DriveTrain_RPMTorquePair_Vector self) -> DriveTrain_RPMTorquePair_Vector
        __init__(DriveTrain_RPMTorquePair_Vector self, DriveTrain_RPMTorquePair_Vector other) -> DriveTrain_RPMTorquePair_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > > const &

        __init__(DriveTrain_RPMTorquePair_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::size_type size) -> DriveTrain_RPMTorquePair_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::size_type

        __init__(DriveTrain_RPMTorquePair_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::size_type size, std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::value_type const & value) -> DriveTrain_RPMTorquePair_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::size_type
        value: std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::value_type const &

        """
        _DriveTrainSwig.DriveTrain_RPMTorquePair_Vector_swiginit(self, _DriveTrainSwig.new_DriveTrain_RPMTorquePair_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(DriveTrain_RPMTorquePair_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_RPMTorquePair_Vector_push_back(self, x)

    def front(self):
        r"""front(DriveTrain_RPMTorquePair_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_RPMTorquePair_Vector_front(self)

    def back(self):
        r"""back(DriveTrain_RPMTorquePair_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_RPMTorquePair_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(DriveTrain_RPMTorquePair_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::size_type n, std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::size_type
        x: std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_RPMTorquePair_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(DriveTrain_RPMTorquePair_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::size_type

        resize(DriveTrain_RPMTorquePair_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::size_type new_size, std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::size_type
        x: std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_RPMTorquePair_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(DriveTrain_RPMTorquePair_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::iterator pos, std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::value_type const & x) -> std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::iterator
        x: std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::value_type const &

        insert(DriveTrain_RPMTorquePair_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::iterator pos, std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::size_type n, std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::iterator
        n: std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::size_type
        x: std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_RPMTorquePair_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(DriveTrain_RPMTorquePair_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::size_type

        """
        return _DriveTrainSwig.DriveTrain_RPMTorquePair_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(DriveTrain_RPMTorquePair_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::RPMTorquePair > >::size_type"""
        return _DriveTrainSwig.DriveTrain_RPMTorquePair_Vector_capacity(self)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_RPMTorquePair_Vector

# Register DriveTrain_RPMTorquePair_Vector in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_RPMTorquePair_Vector_swigregister(DriveTrain_RPMTorquePair_Vector)

class DriveTrain_Shaft_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(DriveTrain_Shaft_Vector self) -> SwigPyIterator"""
        return _DriveTrainSwig.DriveTrain_Shaft_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(DriveTrain_Shaft_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_Shaft_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(DriveTrain_Shaft_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_Shaft_Vector___bool__(self)

    def __len__(self):
        r"""__len__(DriveTrain_Shaft_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::size_type"""
        return _DriveTrainSwig.DriveTrain_Shaft_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(DriveTrain_Shaft_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::difference_type j) -> DriveTrain_Shaft_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::difference_type
        j: std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_Shaft_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(DriveTrain_Shaft_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::difference_type
        j: std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::difference_type

        __setslice__(DriveTrain_Shaft_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::difference_type j, DriveTrain_Shaft_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::difference_type
        j: std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::difference_type
        v: std::vector< std::shared_ptr< Brick::DriveTrain::Shaft >,std::allocator< std::shared_ptr< Brick::DriveTrain::Shaft > > > const &

        """
        return _DriveTrainSwig.DriveTrain_Shaft_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(DriveTrain_Shaft_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::difference_type
        j: std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_Shaft_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(DriveTrain_Shaft_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::difference_type

        __delitem__(DriveTrain_Shaft_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _DriveTrainSwig.DriveTrain_Shaft_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(DriveTrain_Shaft_Vector self, PySliceObject * slice) -> DriveTrain_Shaft_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(DriveTrain_Shaft_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::difference_type i) -> std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_Shaft_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(DriveTrain_Shaft_Vector self, PySliceObject * slice, DriveTrain_Shaft_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Brick::DriveTrain::Shaft >,std::allocator< std::shared_ptr< Brick::DriveTrain::Shaft > > > const &

        __setitem__(DriveTrain_Shaft_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(DriveTrain_Shaft_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::difference_type
        x: std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Shaft_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(DriveTrain_Shaft_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::value_type"""
        return _DriveTrainSwig.DriveTrain_Shaft_Vector_pop(self)

    def append(self, x):
        r"""
        append(DriveTrain_Shaft_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Shaft_Vector_append(self, x)

    def empty(self):
        r"""empty(DriveTrain_Shaft_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_Shaft_Vector_empty(self)

    def size(self):
        r"""size(DriveTrain_Shaft_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::size_type"""
        return _DriveTrainSwig.DriveTrain_Shaft_Vector_size(self)

    def swap(self, v):
        r"""
        swap(DriveTrain_Shaft_Vector self, DriveTrain_Shaft_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > > &

        """
        return _DriveTrainSwig.DriveTrain_Shaft_Vector_swap(self, v)

    def begin(self):
        r"""begin(DriveTrain_Shaft_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::iterator"""
        return _DriveTrainSwig.DriveTrain_Shaft_Vector_begin(self)

    def end(self):
        r"""end(DriveTrain_Shaft_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::iterator"""
        return _DriveTrainSwig.DriveTrain_Shaft_Vector_end(self)

    def rbegin(self):
        r"""rbegin(DriveTrain_Shaft_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_Shaft_Vector_rbegin(self)

    def rend(self):
        r"""rend(DriveTrain_Shaft_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_Shaft_Vector_rend(self)

    def clear(self):
        r"""clear(DriveTrain_Shaft_Vector self)"""
        return _DriveTrainSwig.DriveTrain_Shaft_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(DriveTrain_Shaft_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::allocator_type"""
        return _DriveTrainSwig.DriveTrain_Shaft_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(DriveTrain_Shaft_Vector self)"""
        return _DriveTrainSwig.DriveTrain_Shaft_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(DriveTrain_Shaft_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::iterator pos) -> std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::iterator

        erase(DriveTrain_Shaft_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::iterator first, std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::iterator last) -> std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::iterator
        last: std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::iterator

        """
        return _DriveTrainSwig.DriveTrain_Shaft_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(DriveTrain_Shaft_Vector self) -> DriveTrain_Shaft_Vector
        __init__(DriveTrain_Shaft_Vector self, DriveTrain_Shaft_Vector other) -> DriveTrain_Shaft_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > > const &

        __init__(DriveTrain_Shaft_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::size_type size) -> DriveTrain_Shaft_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::size_type

        __init__(DriveTrain_Shaft_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::size_type size, std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::value_type const & value) -> DriveTrain_Shaft_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::size_type
        value: std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::value_type const &

        """
        _DriveTrainSwig.DriveTrain_Shaft_Vector_swiginit(self, _DriveTrainSwig.new_DriveTrain_Shaft_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(DriveTrain_Shaft_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Shaft_Vector_push_back(self, x)

    def front(self):
        r"""front(DriveTrain_Shaft_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_Shaft_Vector_front(self)

    def back(self):
        r"""back(DriveTrain_Shaft_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_Shaft_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(DriveTrain_Shaft_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::size_type n, std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::size_type
        x: std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Shaft_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(DriveTrain_Shaft_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::size_type

        resize(DriveTrain_Shaft_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::size_type new_size, std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::size_type
        x: std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Shaft_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(DriveTrain_Shaft_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::iterator pos, std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::value_type const & x) -> std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::iterator
        x: std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::value_type const &

        insert(DriveTrain_Shaft_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::iterator pos, std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::size_type n, std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::iterator
        n: std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::size_type
        x: std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Shaft_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(DriveTrain_Shaft_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::size_type

        """
        return _DriveTrainSwig.DriveTrain_Shaft_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(DriveTrain_Shaft_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Shaft > >::size_type"""
        return _DriveTrainSwig.DriveTrain_Shaft_Vector_capacity(self)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_Shaft_Vector

# Register DriveTrain_Shaft_Vector in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_Shaft_Vector_swigregister(DriveTrain_Shaft_Vector)

class DriveTrain_Signals_GearTorqueOutput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(DriveTrain_Signals_GearTorqueOutput_Vector self) -> SwigPyIterator"""
        return _DriveTrainSwig.DriveTrain_Signals_GearTorqueOutput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(DriveTrain_Signals_GearTorqueOutput_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_Signals_GearTorqueOutput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(DriveTrain_Signals_GearTorqueOutput_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_Signals_GearTorqueOutput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(DriveTrain_Signals_GearTorqueOutput_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::size_type"""
        return _DriveTrainSwig.DriveTrain_Signals_GearTorqueOutput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(DriveTrain_Signals_GearTorqueOutput_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::difference_type j) -> DriveTrain_Signals_GearTorqueOutput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::difference_type
        j: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_Signals_GearTorqueOutput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(DriveTrain_Signals_GearTorqueOutput_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::difference_type
        j: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::difference_type

        __setslice__(DriveTrain_Signals_GearTorqueOutput_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::difference_type j, DriveTrain_Signals_GearTorqueOutput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::difference_type
        j: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::difference_type
        v: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput >,std::allocator< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > > > const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_GearTorqueOutput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(DriveTrain_Signals_GearTorqueOutput_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::difference_type
        j: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_Signals_GearTorqueOutput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(DriveTrain_Signals_GearTorqueOutput_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::difference_type

        __delitem__(DriveTrain_Signals_GearTorqueOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _DriveTrainSwig.DriveTrain_Signals_GearTorqueOutput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(DriveTrain_Signals_GearTorqueOutput_Vector self, PySliceObject * slice) -> DriveTrain_Signals_GearTorqueOutput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(DriveTrain_Signals_GearTorqueOutput_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::difference_type i) -> std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_Signals_GearTorqueOutput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(DriveTrain_Signals_GearTorqueOutput_Vector self, PySliceObject * slice, DriveTrain_Signals_GearTorqueOutput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput >,std::allocator< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > > > const &

        __setitem__(DriveTrain_Signals_GearTorqueOutput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(DriveTrain_Signals_GearTorqueOutput_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::difference_type
        x: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_GearTorqueOutput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(DriveTrain_Signals_GearTorqueOutput_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::value_type"""
        return _DriveTrainSwig.DriveTrain_Signals_GearTorqueOutput_Vector_pop(self)

    def append(self, x):
        r"""
        append(DriveTrain_Signals_GearTorqueOutput_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_GearTorqueOutput_Vector_append(self, x)

    def empty(self):
        r"""empty(DriveTrain_Signals_GearTorqueOutput_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_Signals_GearTorqueOutput_Vector_empty(self)

    def size(self):
        r"""size(DriveTrain_Signals_GearTorqueOutput_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::size_type"""
        return _DriveTrainSwig.DriveTrain_Signals_GearTorqueOutput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(DriveTrain_Signals_GearTorqueOutput_Vector self, DriveTrain_Signals_GearTorqueOutput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > > &

        """
        return _DriveTrainSwig.DriveTrain_Signals_GearTorqueOutput_Vector_swap(self, v)

    def begin(self):
        r"""begin(DriveTrain_Signals_GearTorqueOutput_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::iterator"""
        return _DriveTrainSwig.DriveTrain_Signals_GearTorqueOutput_Vector_begin(self)

    def end(self):
        r"""end(DriveTrain_Signals_GearTorqueOutput_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::iterator"""
        return _DriveTrainSwig.DriveTrain_Signals_GearTorqueOutput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(DriveTrain_Signals_GearTorqueOutput_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_Signals_GearTorqueOutput_Vector_rbegin(self)

    def rend(self):
        r"""rend(DriveTrain_Signals_GearTorqueOutput_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_Signals_GearTorqueOutput_Vector_rend(self)

    def clear(self):
        r"""clear(DriveTrain_Signals_GearTorqueOutput_Vector self)"""
        return _DriveTrainSwig.DriveTrain_Signals_GearTorqueOutput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(DriveTrain_Signals_GearTorqueOutput_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::allocator_type"""
        return _DriveTrainSwig.DriveTrain_Signals_GearTorqueOutput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(DriveTrain_Signals_GearTorqueOutput_Vector self)"""
        return _DriveTrainSwig.DriveTrain_Signals_GearTorqueOutput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(DriveTrain_Signals_GearTorqueOutput_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::iterator pos) -> std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::iterator

        erase(DriveTrain_Signals_GearTorqueOutput_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::iterator first, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::iterator last) -> std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::iterator
        last: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::iterator

        """
        return _DriveTrainSwig.DriveTrain_Signals_GearTorqueOutput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(DriveTrain_Signals_GearTorqueOutput_Vector self) -> DriveTrain_Signals_GearTorqueOutput_Vector
        __init__(DriveTrain_Signals_GearTorqueOutput_Vector self, DriveTrain_Signals_GearTorqueOutput_Vector other) -> DriveTrain_Signals_GearTorqueOutput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > > const &

        __init__(DriveTrain_Signals_GearTorqueOutput_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::size_type size) -> DriveTrain_Signals_GearTorqueOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::size_type

        __init__(DriveTrain_Signals_GearTorqueOutput_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::size_type size, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::value_type const & value) -> DriveTrain_Signals_GearTorqueOutput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::size_type
        value: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::value_type const &

        """
        _DriveTrainSwig.DriveTrain_Signals_GearTorqueOutput_Vector_swiginit(self, _DriveTrainSwig.new_DriveTrain_Signals_GearTorqueOutput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(DriveTrain_Signals_GearTorqueOutput_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_GearTorqueOutput_Vector_push_back(self, x)

    def front(self):
        r"""front(DriveTrain_Signals_GearTorqueOutput_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_Signals_GearTorqueOutput_Vector_front(self)

    def back(self):
        r"""back(DriveTrain_Signals_GearTorqueOutput_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_Signals_GearTorqueOutput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(DriveTrain_Signals_GearTorqueOutput_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::size_type n, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::size_type
        x: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_GearTorqueOutput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(DriveTrain_Signals_GearTorqueOutput_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::size_type

        resize(DriveTrain_Signals_GearTorqueOutput_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::size_type new_size, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::size_type
        x: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_GearTorqueOutput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(DriveTrain_Signals_GearTorqueOutput_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::iterator pos, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::value_type const & x) -> std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::iterator
        x: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::value_type const &

        insert(DriveTrain_Signals_GearTorqueOutput_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::iterator pos, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::size_type n, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::iterator
        n: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::size_type
        x: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_GearTorqueOutput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(DriveTrain_Signals_GearTorqueOutput_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::size_type

        """
        return _DriveTrainSwig.DriveTrain_Signals_GearTorqueOutput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(DriveTrain_Signals_GearTorqueOutput_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Signals::GearTorqueOutput > >::size_type"""
        return _DriveTrainSwig.DriveTrain_Signals_GearTorqueOutput_Vector_capacity(self)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_Signals_GearTorqueOutput_Vector

# Register DriveTrain_Signals_GearTorqueOutput_Vector in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_Signals_GearTorqueOutput_Vector_swigregister(DriveTrain_Signals_GearTorqueOutput_Vector)

class DriveTrain_Signals_TorqueMotorInput_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(DriveTrain_Signals_TorqueMotorInput_Vector self) -> SwigPyIterator"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueMotorInput_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(DriveTrain_Signals_TorqueMotorInput_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueMotorInput_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(DriveTrain_Signals_TorqueMotorInput_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueMotorInput_Vector___bool__(self)

    def __len__(self):
        r"""__len__(DriveTrain_Signals_TorqueMotorInput_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::size_type"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueMotorInput_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(DriveTrain_Signals_TorqueMotorInput_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::difference_type j) -> DriveTrain_Signals_TorqueMotorInput_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::difference_type
        j: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueMotorInput_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(DriveTrain_Signals_TorqueMotorInput_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::difference_type
        j: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::difference_type

        __setslice__(DriveTrain_Signals_TorqueMotorInput_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::difference_type j, DriveTrain_Signals_TorqueMotorInput_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::difference_type
        j: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::difference_type
        v: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput >,std::allocator< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > > > const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueMotorInput_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(DriveTrain_Signals_TorqueMotorInput_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::difference_type
        j: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueMotorInput_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(DriveTrain_Signals_TorqueMotorInput_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::difference_type

        __delitem__(DriveTrain_Signals_TorqueMotorInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueMotorInput_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(DriveTrain_Signals_TorqueMotorInput_Vector self, PySliceObject * slice) -> DriveTrain_Signals_TorqueMotorInput_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(DriveTrain_Signals_TorqueMotorInput_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::difference_type i) -> std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueMotorInput_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(DriveTrain_Signals_TorqueMotorInput_Vector self, PySliceObject * slice, DriveTrain_Signals_TorqueMotorInput_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput >,std::allocator< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > > > const &

        __setitem__(DriveTrain_Signals_TorqueMotorInput_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(DriveTrain_Signals_TorqueMotorInput_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::difference_type
        x: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueMotorInput_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(DriveTrain_Signals_TorqueMotorInput_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::value_type"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueMotorInput_Vector_pop(self)

    def append(self, x):
        r"""
        append(DriveTrain_Signals_TorqueMotorInput_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueMotorInput_Vector_append(self, x)

    def empty(self):
        r"""empty(DriveTrain_Signals_TorqueMotorInput_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueMotorInput_Vector_empty(self)

    def size(self):
        r"""size(DriveTrain_Signals_TorqueMotorInput_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::size_type"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueMotorInput_Vector_size(self)

    def swap(self, v):
        r"""
        swap(DriveTrain_Signals_TorqueMotorInput_Vector self, DriveTrain_Signals_TorqueMotorInput_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > > &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueMotorInput_Vector_swap(self, v)

    def begin(self):
        r"""begin(DriveTrain_Signals_TorqueMotorInput_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::iterator"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueMotorInput_Vector_begin(self)

    def end(self):
        r"""end(DriveTrain_Signals_TorqueMotorInput_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::iterator"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueMotorInput_Vector_end(self)

    def rbegin(self):
        r"""rbegin(DriveTrain_Signals_TorqueMotorInput_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueMotorInput_Vector_rbegin(self)

    def rend(self):
        r"""rend(DriveTrain_Signals_TorqueMotorInput_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueMotorInput_Vector_rend(self)

    def clear(self):
        r"""clear(DriveTrain_Signals_TorqueMotorInput_Vector self)"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueMotorInput_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(DriveTrain_Signals_TorqueMotorInput_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::allocator_type"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueMotorInput_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(DriveTrain_Signals_TorqueMotorInput_Vector self)"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueMotorInput_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(DriveTrain_Signals_TorqueMotorInput_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::iterator pos) -> std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::iterator

        erase(DriveTrain_Signals_TorqueMotorInput_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::iterator first, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::iterator last) -> std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::iterator
        last: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::iterator

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueMotorInput_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(DriveTrain_Signals_TorqueMotorInput_Vector self) -> DriveTrain_Signals_TorqueMotorInput_Vector
        __init__(DriveTrain_Signals_TorqueMotorInput_Vector self, DriveTrain_Signals_TorqueMotorInput_Vector other) -> DriveTrain_Signals_TorqueMotorInput_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > > const &

        __init__(DriveTrain_Signals_TorqueMotorInput_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::size_type size) -> DriveTrain_Signals_TorqueMotorInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::size_type

        __init__(DriveTrain_Signals_TorqueMotorInput_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::size_type size, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::value_type const & value) -> DriveTrain_Signals_TorqueMotorInput_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::size_type
        value: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::value_type const &

        """
        _DriveTrainSwig.DriveTrain_Signals_TorqueMotorInput_Vector_swiginit(self, _DriveTrainSwig.new_DriveTrain_Signals_TorqueMotorInput_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(DriveTrain_Signals_TorqueMotorInput_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueMotorInput_Vector_push_back(self, x)

    def front(self):
        r"""front(DriveTrain_Signals_TorqueMotorInput_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueMotorInput_Vector_front(self)

    def back(self):
        r"""back(DriveTrain_Signals_TorqueMotorInput_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueMotorInput_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(DriveTrain_Signals_TorqueMotorInput_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::size_type n, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::size_type
        x: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueMotorInput_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(DriveTrain_Signals_TorqueMotorInput_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::size_type

        resize(DriveTrain_Signals_TorqueMotorInput_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::size_type new_size, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::size_type
        x: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueMotorInput_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(DriveTrain_Signals_TorqueMotorInput_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::iterator pos, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::value_type const & x) -> std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::iterator
        x: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::value_type const &

        insert(DriveTrain_Signals_TorqueMotorInput_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::iterator pos, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::size_type n, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::iterator
        n: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::size_type
        x: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueMotorInput_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(DriveTrain_Signals_TorqueMotorInput_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::size_type

        """
        return _DriveTrainSwig.DriveTrain_Signals_TorqueMotorInput_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(DriveTrain_Signals_TorqueMotorInput_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::Signals::TorqueMotorInput > >::size_type"""
        return _DriveTrainSwig.DriveTrain_Signals_TorqueMotorInput_Vector_capacity(self)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_Signals_TorqueMotorInput_Vector

# Register DriveTrain_Signals_TorqueMotorInput_Vector in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_Signals_TorqueMotorInput_Vector_swigregister(DriveTrain_Signals_TorqueMotorInput_Vector)

class DriveTrain_TorqueLimitedSlipDifferential_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(DriveTrain_TorqueLimitedSlipDifferential_Vector self) -> SwigPyIterator"""
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(DriveTrain_TorqueLimitedSlipDifferential_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(DriveTrain_TorqueLimitedSlipDifferential_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector___bool__(self)

    def __len__(self):
        r"""__len__(DriveTrain_TorqueLimitedSlipDifferential_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::size_type"""
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(DriveTrain_TorqueLimitedSlipDifferential_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::difference_type j) -> DriveTrain_TorqueLimitedSlipDifferential_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::difference_type
        j: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(DriveTrain_TorqueLimitedSlipDifferential_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::difference_type
        j: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::difference_type

        __setslice__(DriveTrain_TorqueLimitedSlipDifferential_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::difference_type j, DriveTrain_TorqueLimitedSlipDifferential_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::difference_type
        j: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::difference_type
        v: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential >,std::allocator< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > > > const &

        """
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(DriveTrain_TorqueLimitedSlipDifferential_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::difference_type
        j: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(DriveTrain_TorqueLimitedSlipDifferential_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::difference_type

        __delitem__(DriveTrain_TorqueLimitedSlipDifferential_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(DriveTrain_TorqueLimitedSlipDifferential_Vector self, PySliceObject * slice) -> DriveTrain_TorqueLimitedSlipDifferential_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(DriveTrain_TorqueLimitedSlipDifferential_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::difference_type i) -> std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(DriveTrain_TorqueLimitedSlipDifferential_Vector self, PySliceObject * slice, DriveTrain_TorqueLimitedSlipDifferential_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential >,std::allocator< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > > > const &

        __setitem__(DriveTrain_TorqueLimitedSlipDifferential_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(DriveTrain_TorqueLimitedSlipDifferential_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::difference_type
        x: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(DriveTrain_TorqueLimitedSlipDifferential_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::value_type"""
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector_pop(self)

    def append(self, x):
        r"""
        append(DriveTrain_TorqueLimitedSlipDifferential_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector_append(self, x)

    def empty(self):
        r"""empty(DriveTrain_TorqueLimitedSlipDifferential_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector_empty(self)

    def size(self):
        r"""size(DriveTrain_TorqueLimitedSlipDifferential_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::size_type"""
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector_size(self)

    def swap(self, v):
        r"""
        swap(DriveTrain_TorqueLimitedSlipDifferential_Vector self, DriveTrain_TorqueLimitedSlipDifferential_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > > &

        """
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector_swap(self, v)

    def begin(self):
        r"""begin(DriveTrain_TorqueLimitedSlipDifferential_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::iterator"""
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector_begin(self)

    def end(self):
        r"""end(DriveTrain_TorqueLimitedSlipDifferential_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::iterator"""
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector_end(self)

    def rbegin(self):
        r"""rbegin(DriveTrain_TorqueLimitedSlipDifferential_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector_rbegin(self)

    def rend(self):
        r"""rend(DriveTrain_TorqueLimitedSlipDifferential_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector_rend(self)

    def clear(self):
        r"""clear(DriveTrain_TorqueLimitedSlipDifferential_Vector self)"""
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(DriveTrain_TorqueLimitedSlipDifferential_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::allocator_type"""
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(DriveTrain_TorqueLimitedSlipDifferential_Vector self)"""
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(DriveTrain_TorqueLimitedSlipDifferential_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::iterator pos) -> std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::iterator

        erase(DriveTrain_TorqueLimitedSlipDifferential_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::iterator first, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::iterator last) -> std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::iterator
        last: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::iterator

        """
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(DriveTrain_TorqueLimitedSlipDifferential_Vector self) -> DriveTrain_TorqueLimitedSlipDifferential_Vector
        __init__(DriveTrain_TorqueLimitedSlipDifferential_Vector self, DriveTrain_TorqueLimitedSlipDifferential_Vector other) -> DriveTrain_TorqueLimitedSlipDifferential_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > > const &

        __init__(DriveTrain_TorqueLimitedSlipDifferential_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::size_type size) -> DriveTrain_TorqueLimitedSlipDifferential_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::size_type

        __init__(DriveTrain_TorqueLimitedSlipDifferential_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::size_type size, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::value_type const & value) -> DriveTrain_TorqueLimitedSlipDifferential_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::size_type
        value: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::value_type const &

        """
        _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector_swiginit(self, _DriveTrainSwig.new_DriveTrain_TorqueLimitedSlipDifferential_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(DriveTrain_TorqueLimitedSlipDifferential_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector_push_back(self, x)

    def front(self):
        r"""front(DriveTrain_TorqueLimitedSlipDifferential_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector_front(self)

    def back(self):
        r"""back(DriveTrain_TorqueLimitedSlipDifferential_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(DriveTrain_TorqueLimitedSlipDifferential_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::size_type n, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::size_type
        x: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(DriveTrain_TorqueLimitedSlipDifferential_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::size_type

        resize(DriveTrain_TorqueLimitedSlipDifferential_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::size_type new_size, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::size_type
        x: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(DriveTrain_TorqueLimitedSlipDifferential_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::iterator pos, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::value_type const & x) -> std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::iterator
        x: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::value_type const &

        insert(DriveTrain_TorqueLimitedSlipDifferential_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::iterator pos, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::size_type n, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::iterator
        n: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::size_type
        x: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(DriveTrain_TorqueLimitedSlipDifferential_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::size_type

        """
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(DriveTrain_TorqueLimitedSlipDifferential_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::TorqueLimitedSlipDifferential > >::size_type"""
        return _DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector_capacity(self)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_TorqueLimitedSlipDifferential_Vector

# Register DriveTrain_TorqueLimitedSlipDifferential_Vector in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_TorqueLimitedSlipDifferential_Vector_swigregister(DriveTrain_TorqueLimitedSlipDifferential_Vector)

class DriveTrain_TorqueMotor_Vector(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(DriveTrain_TorqueMotor_Vector self) -> SwigPyIterator"""
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(DriveTrain_TorqueMotor_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(DriveTrain_TorqueMotor_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector___bool__(self)

    def __len__(self):
        r"""__len__(DriveTrain_TorqueMotor_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::size_type"""
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(DriveTrain_TorqueMotor_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::difference_type j) -> DriveTrain_TorqueMotor_Vector

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::difference_type
        j: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(DriveTrain_TorqueMotor_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::difference_type
        j: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::difference_type

        __setslice__(DriveTrain_TorqueMotor_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::difference_type j, DriveTrain_TorqueMotor_Vector v)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::difference_type
        j: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::difference_type
        v: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor >,std::allocator< std::shared_ptr< Brick::DriveTrain::TorqueMotor > > > const &

        """
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(DriveTrain_TorqueMotor_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::difference_type
        j: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(DriveTrain_TorqueMotor_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::difference_type

        __delitem__(DriveTrain_TorqueMotor_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(DriveTrain_TorqueMotor_Vector self, PySliceObject * slice) -> DriveTrain_TorqueMotor_Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(DriveTrain_TorqueMotor_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::difference_type i) -> std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::difference_type

        """
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(DriveTrain_TorqueMotor_Vector self, PySliceObject * slice, DriveTrain_TorqueMotor_Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor >,std::allocator< std::shared_ptr< Brick::DriveTrain::TorqueMotor > > > const &

        __setitem__(DriveTrain_TorqueMotor_Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(DriveTrain_TorqueMotor_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::difference_type i, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::difference_type
        x: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(DriveTrain_TorqueMotor_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::value_type"""
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector_pop(self)

    def append(self, x):
        r"""
        append(DriveTrain_TorqueMotor_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector_append(self, x)

    def empty(self):
        r"""empty(DriveTrain_TorqueMotor_Vector self) -> bool"""
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector_empty(self)

    def size(self):
        r"""size(DriveTrain_TorqueMotor_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::size_type"""
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector_size(self)

    def swap(self, v):
        r"""
        swap(DriveTrain_TorqueMotor_Vector self, DriveTrain_TorqueMotor_Vector v)

        Parameters
        ----------
        v: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > > &

        """
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector_swap(self, v)

    def begin(self):
        r"""begin(DriveTrain_TorqueMotor_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::iterator"""
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector_begin(self)

    def end(self):
        r"""end(DriveTrain_TorqueMotor_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::iterator"""
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector_end(self)

    def rbegin(self):
        r"""rbegin(DriveTrain_TorqueMotor_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector_rbegin(self)

    def rend(self):
        r"""rend(DriveTrain_TorqueMotor_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::reverse_iterator"""
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector_rend(self)

    def clear(self):
        r"""clear(DriveTrain_TorqueMotor_Vector self)"""
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(DriveTrain_TorqueMotor_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::allocator_type"""
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(DriveTrain_TorqueMotor_Vector self)"""
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(DriveTrain_TorqueMotor_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::iterator pos) -> std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::iterator

        erase(DriveTrain_TorqueMotor_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::iterator first, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::iterator last) -> std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::iterator

        Parameters
        ----------
        first: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::iterator
        last: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::iterator

        """
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(DriveTrain_TorqueMotor_Vector self) -> DriveTrain_TorqueMotor_Vector
        __init__(DriveTrain_TorqueMotor_Vector self, DriveTrain_TorqueMotor_Vector other) -> DriveTrain_TorqueMotor_Vector

        Parameters
        ----------
        other: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > > const &

        __init__(DriveTrain_TorqueMotor_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::size_type size) -> DriveTrain_TorqueMotor_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::size_type

        __init__(DriveTrain_TorqueMotor_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::size_type size, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::value_type const & value) -> DriveTrain_TorqueMotor_Vector

        Parameters
        ----------
        size: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::size_type
        value: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::value_type const &

        """
        _DriveTrainSwig.DriveTrain_TorqueMotor_Vector_swiginit(self, _DriveTrainSwig.new_DriveTrain_TorqueMotor_Vector(*args))

    def push_back(self, x):
        r"""
        push_back(DriveTrain_TorqueMotor_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector_push_back(self, x)

    def front(self):
        r"""front(DriveTrain_TorqueMotor_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector_front(self)

    def back(self):
        r"""back(DriveTrain_TorqueMotor_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::value_type const &"""
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(DriveTrain_TorqueMotor_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::size_type n, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::size_type
        x: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(DriveTrain_TorqueMotor_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::size_type

        resize(DriveTrain_TorqueMotor_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::size_type new_size, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::size_type
        x: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(DriveTrain_TorqueMotor_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::iterator pos, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::value_type const & x) -> std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::iterator

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::iterator
        x: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::value_type const &

        insert(DriveTrain_TorqueMotor_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::iterator pos, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::size_type n, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::iterator
        n: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::size_type
        x: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::value_type const &

        """
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(DriveTrain_TorqueMotor_Vector self, std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::size_type

        """
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(DriveTrain_TorqueMotor_Vector self) -> std::vector< std::shared_ptr< Brick::DriveTrain::TorqueMotor > >::size_type"""
        return _DriveTrainSwig.DriveTrain_TorqueMotor_Vector_capacity(self)
    __swig_destroy__ = _DriveTrainSwig.delete_DriveTrain_TorqueMotor_Vector

# Register DriveTrain_TorqueMotor_Vector in _DriveTrainSwig:
_DriveTrainSwig.DriveTrain_TorqueMotor_Vector_swigregister(DriveTrain_TorqueMotor_Vector)

class Actuator(rebrick.Core.Object):
    r"""Proxy of C++ Brick::DriveTrain::Actuator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Actuator self) -> Actuator"""
        _DriveTrainSwig.Actuator_swiginit(self, _DriveTrainSwig.new_Actuator())

    def connector_1d(self):
        r"""connector_1d(Actuator self) -> std::shared_ptr< Brick::Physics1D::Charges::MateConnector >"""
        return _DriveTrainSwig.Actuator_connector_1d(self)

    def mate_3d(self):
        r"""mate_3d(Actuator self) -> std::shared_ptr< Brick::Physics3D::Interactions::Mate >"""
        return _DriveTrainSwig.Actuator_mate_3d(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Actuator self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _DriveTrainSwig.Actuator_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Actuator self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _DriveTrainSwig.Actuator_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Actuator self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _DriveTrainSwig.Actuator_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Actuator self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _DriveTrainSwig.Actuator_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Actuator self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _DriveTrainSwig.Actuator_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Actuator self)"""
        return _DriveTrainSwig.Actuator_triggerOnInit(self)
    __swig_destroy__ = _DriveTrainSwig.delete_Actuator

# Register Actuator in _DriveTrainSwig:
_DriveTrainSwig.Actuator_swigregister(Actuator)

class Differential(rebrick.Physics1D.Interactions_Mate):
    r"""Proxy of C++ Brick::DriveTrain::Differential class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Differential self) -> Differential"""
        _DriveTrainSwig.Differential_swiginit(self, _DriveTrainSwig.new_Differential())

    def drive_shaft(self):
        r"""drive_shaft(Differential self) -> std::shared_ptr< Brick::DriveTrain::Shaft >"""
        return _DriveTrainSwig.Differential_drive_shaft(self)

    def left_axle_shaft(self):
        r"""left_axle_shaft(Differential self) -> std::shared_ptr< Brick::DriveTrain::Shaft >"""
        return _DriveTrainSwig.Differential_left_axle_shaft(self)

    def right_axle_shaft(self):
        r"""right_axle_shaft(Differential self) -> std::shared_ptr< Brick::DriveTrain::Shaft >"""
        return _DriveTrainSwig.Differential_right_axle_shaft(self)

    def gear_ratio(self):
        r"""gear_ratio(Differential self) -> double"""
        return _DriveTrainSwig.Differential_gear_ratio(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Differential self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _DriveTrainSwig.Differential_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Differential self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _DriveTrainSwig.Differential_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Differential self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _DriveTrainSwig.Differential_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Differential self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _DriveTrainSwig.Differential_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Differential self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _DriveTrainSwig.Differential_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Differential self)"""
        return _DriveTrainSwig.Differential_triggerOnInit(self)
    __swig_destroy__ = _DriveTrainSwig.delete_Differential

# Register Differential in _DriveTrainSwig:
_DriveTrainSwig.Differential_swigregister(Differential)

class Engine(rebrick.Physics.Interactions_Interaction1DOF):
    r"""Proxy of C++ Brick::DriveTrain::Engine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Engine self) -> Engine"""
        _DriveTrainSwig.Engine_swiginit(self, _DriveTrainSwig.new_Engine())

    def idleRPM(self):
        r"""idleRPM(Engine self) -> double"""
        return _DriveTrainSwig.Engine_idleRPM(self)

    def idleTorque(self):
        r"""idleTorque(Engine self) -> double"""
        return _DriveTrainSwig.Engine_idleTorque(self)

    def throttle(self):
        r"""throttle(Engine self) -> double"""
        return _DriveTrainSwig.Engine_throttle(self)

    def RPMTorqueList(self):
        r"""RPMTorqueList(Engine self) -> DriveTrain_RPMTorquePair_Vector"""
        return _DriveTrainSwig.Engine_RPMTorqueList(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Engine self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _DriveTrainSwig.Engine_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Engine self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _DriveTrainSwig.Engine_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Engine self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _DriveTrainSwig.Engine_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Engine self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _DriveTrainSwig.Engine_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Engine self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _DriveTrainSwig.Engine_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Engine self)"""
        return _DriveTrainSwig.Engine_triggerOnInit(self)
    __swig_destroy__ = _DriveTrainSwig.delete_Engine

# Register Engine in _DriveTrainSwig:
_DriveTrainSwig.Engine_swigregister(Engine)

class Gear(rebrick.Physics1D.Interactions_Mate):
    r"""Proxy of C++ Brick::DriveTrain::Gear class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Gear self) -> Gear"""
        _DriveTrainSwig.Gear_swiginit(self, _DriveTrainSwig.new_Gear())

    def ratio(self):
        r"""ratio(Gear self) -> double"""
        return _DriveTrainSwig.Gear_ratio(self)

    def damping(self):
        r"""damping(Gear self) -> double"""
        return _DriveTrainSwig.Gear_damping(self)

    def stiffness(self):
        r"""stiffness(Gear self) -> double"""
        return _DriveTrainSwig.Gear_stiffness(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Gear self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _DriveTrainSwig.Gear_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Gear self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _DriveTrainSwig.Gear_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Gear self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _DriveTrainSwig.Gear_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Gear self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _DriveTrainSwig.Gear_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Gear self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _DriveTrainSwig.Gear_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Gear self)"""
        return _DriveTrainSwig.Gear_triggerOnInit(self)
    __swig_destroy__ = _DriveTrainSwig.delete_Gear

# Register Gear in _DriveTrainSwig:
_DriveTrainSwig.Gear_swigregister(Gear)

class HingeActuator(rebrick.Core.Object):
    r"""Proxy of C++ Brick::DriveTrain::HingeActuator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(HingeActuator self) -> HingeActuator"""
        _DriveTrainSwig.HingeActuator_swiginit(self, _DriveTrainSwig.new_HingeActuator())

    def connector_1d(self):
        r"""connector_1d(HingeActuator self) -> std::shared_ptr< Brick::Physics1D::Charges::MateConnector >"""
        return _DriveTrainSwig.HingeActuator_connector_1d(self)

    def mate_3d(self):
        r"""mate_3d(HingeActuator self) -> std::shared_ptr< Brick::Physics3D::Interactions::Hinge >"""
        return _DriveTrainSwig.HingeActuator_mate_3d(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(HingeActuator self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _DriveTrainSwig.HingeActuator_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(HingeActuator self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _DriveTrainSwig.HingeActuator_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(HingeActuator self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _DriveTrainSwig.HingeActuator_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(HingeActuator self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _DriveTrainSwig.HingeActuator_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(HingeActuator self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _DriveTrainSwig.HingeActuator_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(HingeActuator self)"""
        return _DriveTrainSwig.HingeActuator_triggerOnInit(self)
    __swig_destroy__ = _DriveTrainSwig.delete_HingeActuator

# Register HingeActuator in _DriveTrainSwig:
_DriveTrainSwig.HingeActuator_swigregister(HingeActuator)

class PrismaticActuator(rebrick.Core.Object):
    r"""Proxy of C++ Brick::DriveTrain::PrismaticActuator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PrismaticActuator self) -> PrismaticActuator"""
        _DriveTrainSwig.PrismaticActuator_swiginit(self, _DriveTrainSwig.new_PrismaticActuator())

    def connector_1d(self):
        r"""connector_1d(PrismaticActuator self) -> std::shared_ptr< Brick::Physics1D::Charges::MateConnector >"""
        return _DriveTrainSwig.PrismaticActuator_connector_1d(self)

    def mate_3d(self):
        r"""mate_3d(PrismaticActuator self) -> std::shared_ptr< Brick::Physics3D::Interactions::Prismatic >"""
        return _DriveTrainSwig.PrismaticActuator_mate_3d(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(PrismaticActuator self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _DriveTrainSwig.PrismaticActuator_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(PrismaticActuator self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _DriveTrainSwig.PrismaticActuator_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(PrismaticActuator self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _DriveTrainSwig.PrismaticActuator_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(PrismaticActuator self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _DriveTrainSwig.PrismaticActuator_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(PrismaticActuator self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _DriveTrainSwig.PrismaticActuator_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(PrismaticActuator self)"""
        return _DriveTrainSwig.PrismaticActuator_triggerOnInit(self)
    __swig_destroy__ = _DriveTrainSwig.delete_PrismaticActuator

# Register PrismaticActuator in _DriveTrainSwig:
_DriveTrainSwig.PrismaticActuator_swigregister(PrismaticActuator)

class RPMTorquePair(rebrick.Core.Object):
    r"""Proxy of C++ Brick::DriveTrain::RPMTorquePair class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(RPMTorquePair self) -> RPMTorquePair"""
        _DriveTrainSwig.RPMTorquePair_swiginit(self, _DriveTrainSwig.new_RPMTorquePair())

    def rpm(self):
        r"""rpm(RPMTorquePair self) -> double"""
        return _DriveTrainSwig.RPMTorquePair_rpm(self)

    def torque(self):
        r"""torque(RPMTorquePair self) -> double"""
        return _DriveTrainSwig.RPMTorquePair_torque(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(RPMTorquePair self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _DriveTrainSwig.RPMTorquePair_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(RPMTorquePair self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _DriveTrainSwig.RPMTorquePair_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(RPMTorquePair self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _DriveTrainSwig.RPMTorquePair_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(RPMTorquePair self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _DriveTrainSwig.RPMTorquePair_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(RPMTorquePair self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _DriveTrainSwig.RPMTorquePair_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(RPMTorquePair self)"""
        return _DriveTrainSwig.RPMTorquePair_triggerOnInit(self)
    __swig_destroy__ = _DriveTrainSwig.delete_RPMTorquePair

# Register RPMTorquePair in _DriveTrainSwig:
_DriveTrainSwig.RPMTorquePair_swigregister(RPMTorquePair)

class Shaft(rebrick.Physics1D.Bodies_RotationalBody):
    r"""Proxy of C++ Brick::DriveTrain::Shaft class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Shaft self) -> Shaft"""
        _DriveTrainSwig.Shaft_swiginit(self, _DriveTrainSwig.new_Shaft())

    def input(self):
        r"""input(Shaft self) -> std::shared_ptr< Brick::Physics1D::Charges::MateConnector >"""
        return _DriveTrainSwig.Shaft_input(self)

    def output(self):
        r"""output(Shaft self) -> std::shared_ptr< Brick::Physics1D::Charges::MateConnector >"""
        return _DriveTrainSwig.Shaft_output(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Shaft self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _DriveTrainSwig.Shaft_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Shaft self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _DriveTrainSwig.Shaft_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Shaft self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _DriveTrainSwig.Shaft_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Shaft self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _DriveTrainSwig.Shaft_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Shaft self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _DriveTrainSwig.Shaft_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Shaft self)"""
        return _DriveTrainSwig.Shaft_triggerOnInit(self)
    __swig_destroy__ = _DriveTrainSwig.delete_Shaft

# Register Shaft in _DriveTrainSwig:
_DriveTrainSwig.Shaft_swigregister(Shaft)

class Signals_GearTorqueOutput(rebrick.Physics.Signals_Output):
    r"""Proxy of C++ Brick::DriveTrain::Signals::GearTorqueOutput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Signals_GearTorqueOutput self) -> Signals_GearTorqueOutput"""
        _DriveTrainSwig.Signals_GearTorqueOutput_swiginit(self, _DriveTrainSwig.new_Signals_GearTorqueOutput())

    def gear(self):
        r"""gear(Signals_GearTorqueOutput self) -> std::shared_ptr< Brick::DriveTrain::Gear >"""
        return _DriveTrainSwig.Signals_GearTorqueOutput_gear(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Signals_GearTorqueOutput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _DriveTrainSwig.Signals_GearTorqueOutput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Signals_GearTorqueOutput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _DriveTrainSwig.Signals_GearTorqueOutput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Signals_GearTorqueOutput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _DriveTrainSwig.Signals_GearTorqueOutput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Signals_GearTorqueOutput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _DriveTrainSwig.Signals_GearTorqueOutput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Signals_GearTorqueOutput self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _DriveTrainSwig.Signals_GearTorqueOutput_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Signals_GearTorqueOutput self)"""
        return _DriveTrainSwig.Signals_GearTorqueOutput_triggerOnInit(self)
    __swig_destroy__ = _DriveTrainSwig.delete_Signals_GearTorqueOutput

# Register Signals_GearTorqueOutput in _DriveTrainSwig:
_DriveTrainSwig.Signals_GearTorqueOutput_swigregister(Signals_GearTorqueOutput)

class Signals_TorqueMotorInput(rebrick.Physics.Signals_Input):
    r"""Proxy of C++ Brick::DriveTrain::Signals::TorqueMotorInput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Signals_TorqueMotorInput self) -> Signals_TorqueMotorInput"""
        _DriveTrainSwig.Signals_TorqueMotorInput_swiginit(self, _DriveTrainSwig.new_Signals_TorqueMotorInput())

    def motor(self):
        r"""motor(Signals_TorqueMotorInput self) -> std::shared_ptr< Brick::DriveTrain::TorqueMotor >"""
        return _DriveTrainSwig.Signals_TorqueMotorInput_motor(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(Signals_TorqueMotorInput self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _DriveTrainSwig.Signals_TorqueMotorInput_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(Signals_TorqueMotorInput self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _DriveTrainSwig.Signals_TorqueMotorInput_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(Signals_TorqueMotorInput self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _DriveTrainSwig.Signals_TorqueMotorInput_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(Signals_TorqueMotorInput self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _DriveTrainSwig.Signals_TorqueMotorInput_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(Signals_TorqueMotorInput self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _DriveTrainSwig.Signals_TorqueMotorInput_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(Signals_TorqueMotorInput self)"""
        return _DriveTrainSwig.Signals_TorqueMotorInput_triggerOnInit(self)
    __swig_destroy__ = _DriveTrainSwig.delete_Signals_TorqueMotorInput

# Register Signals_TorqueMotorInput in _DriveTrainSwig:
_DriveTrainSwig.Signals_TorqueMotorInput_swigregister(Signals_TorqueMotorInput)

class TorqueLimitedSlipDifferential(Differential):
    r"""Proxy of C++ Brick::DriveTrain::TorqueLimitedSlipDifferential class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(TorqueLimitedSlipDifferential self) -> TorqueLimitedSlipDifferential"""
        _DriveTrainSwig.TorqueLimitedSlipDifferential_swiginit(self, _DriveTrainSwig.new_TorqueLimitedSlipDifferential())

    def breakaway_torque(self):
        r"""breakaway_torque(TorqueLimitedSlipDifferential self) -> double"""
        return _DriveTrainSwig.TorqueLimitedSlipDifferential_breakaway_torque(self)

    def setDynamic(self, key, value):
        r"""
        setDynamic(TorqueLimitedSlipDifferential self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _DriveTrainSwig.TorqueLimitedSlipDifferential_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(TorqueLimitedSlipDifferential self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _DriveTrainSwig.TorqueLimitedSlipDifferential_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(TorqueLimitedSlipDifferential self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _DriveTrainSwig.TorqueLimitedSlipDifferential_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(TorqueLimitedSlipDifferential self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _DriveTrainSwig.TorqueLimitedSlipDifferential_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(TorqueLimitedSlipDifferential self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _DriveTrainSwig.TorqueLimitedSlipDifferential_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(TorqueLimitedSlipDifferential self)"""
        return _DriveTrainSwig.TorqueLimitedSlipDifferential_triggerOnInit(self)
    __swig_destroy__ = _DriveTrainSwig.delete_TorqueLimitedSlipDifferential

# Register TorqueLimitedSlipDifferential in _DriveTrainSwig:
_DriveTrainSwig.TorqueLimitedSlipDifferential_swigregister(TorqueLimitedSlipDifferential)

class TorqueMotor(rebrick.Physics.Interactions_Interaction1DOF):
    r"""Proxy of C++ Brick::DriveTrain::TorqueMotor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(TorqueMotor self) -> TorqueMotor"""
        _DriveTrainSwig.TorqueMotor_swiginit(self, _DriveTrainSwig.new_TorqueMotor())

    def setDynamic(self, key, value):
        r"""
        setDynamic(TorqueMotor self, std::string const & key, Any value)

        Parameters
        ----------
        key: std::string const &
        value: Brick::Core::Any &&

        """
        return _DriveTrainSwig.TorqueMotor_setDynamic(self, key, value)

    def getDynamic(self, key):
        r"""
        getDynamic(TorqueMotor self, std::string const & key) -> Any

        Parameters
        ----------
        key: std::string const &

        """
        return _DriveTrainSwig.TorqueMotor_getDynamic(self, key)

    def callDynamic(self, key, args):
        r"""
        callDynamic(TorqueMotor self, std::string const & key, AnyVector args) -> Any

        Parameters
        ----------
        key: std::string const &
        args: std::vector< Brick::Core::Any,std::allocator< Brick::Core::Any > > const &

        """
        return _DriveTrainSwig.TorqueMotor_callDynamic(self, key, args)

    def extractObjectFieldsTo(self, output):
        r"""
        extractObjectFieldsTo(TorqueMotor self, ObjectVector output)

        Parameters
        ----------
        output: std::vector< std::shared_ptr< Brick::Core::Object >,std::allocator< std::shared_ptr< Brick::Core::Object > > > &

        """
        return _DriveTrainSwig.TorqueMotor_extractObjectFieldsTo(self, output)

    def extractEntriesTo(self, output):
        r"""
        extractEntriesTo(TorqueMotor self, std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > & output)

        Parameters
        ----------
        output: std::vector< std::pair< std::string,Brick::Core::Any >,std::allocator< std::pair< std::string,Brick::Core::Any > > > &

        """
        return _DriveTrainSwig.TorqueMotor_extractEntriesTo(self, output)

    def triggerOnInit(self):
        r"""triggerOnInit(TorqueMotor self)"""
        return _DriveTrainSwig.TorqueMotor_triggerOnInit(self)
    __swig_destroy__ = _DriveTrainSwig.delete_TorqueMotor

# Register TorqueMotor in _DriveTrainSwig:
_DriveTrainSwig.TorqueMotor_swigregister(TorqueMotor)



