from __future__ import annotations

from typing import TYPE_CHECKING

from pydantic.v1 import AnyUrl
from pydantic.v1 import Field

from pydantic2_schemaorg.Intangible import Intangible


class Service(Intangible):
    """A service provided by an organization, e.g. delivery service, print services, etc.

    See: https://schema.org/Service
    Model depth: 3
    """

    type_: str = Field(default="Service", alias="@type", const=True)
    produces: list[Thing | str] | Thing | str | None = Field(
        default=None,
        description="The tangible thing generated by the service, e.g. a passport, permit, etc.",
    )
    category: None | (
        list[
            (
                AnyUrl
                | URL
                | str
                | Text
                | CategoryCode
                | Thing
                | PhysicalActivityCategory
            )
        ]
        | AnyUrl
        | URL
        | str
        | Text
        | CategoryCode
        | Thing
        | PhysicalActivityCategory
    ) = Field(
        default=None,
        description="A category for the item. Greater signs or slashes can be used to informally indicate a"
        "category hierarchy.",
    )
    hasOfferCatalog: None | (list[OfferCatalog | str] | OfferCatalog | str) = Field(
        default=None,
        description="Indicates an OfferCatalog listing for this Organization, Person, or Service.",
    )
    offers: None | (list[Offer | Demand | str] | Offer | Demand | str) = Field(
        default=None,
        description="An offer to provide this item&#x2014;for example, an offer to sell a product, rent the"
        "DVD of a movie, perform a service, or give away tickets to an event. Use [[businessFunction]]"
        "to indicate the kind of transaction offered, i.e. sell, lease, etc. This property can"
        "also be used to describe a [[Demand]]. While this property is listed as expected on a number"
        "of common types, it can be used in others. In that case, using a second type, such as Product"
        "or a subtype of Product, can clarify the nature of the offer.",
    )
    audience: list[Audience | str] | Audience | str | None = Field(
        default=None,
        description="An intended audience, i.e. a group for whom something was created.",
    )
    serviceOutput: list[Thing | str] | Thing | str | None = Field(
        default=None,
        description="The tangible thing generated by the service, e.g. a passport, permit, etc.",
    )
    provider: None | (
        list[Organization | Person | str] | Organization | Person | str
    ) = Field(
        default=None,
        description="The service provider, service operator, or service performer; the goods producer."
        "Another party (a seller) may offer those services or goods on behalf of the provider."
        "A provider may also serve as the seller.",
    )
    brand: None | (
        list[Brand | Organization | str] | Brand | Organization | str
    ) = Field(
        default=None,
        description="The brand(s) associated with a product or service, or the brand(s) maintained by an organization"
        "or business person.",
    )
    isRelatedTo: None | (
        list[Product | Service | str] | Product | Service | str
    ) = Field(
        default=None,
        description="A pointer to another, somehow related product (or multiple products).",
    )
    aggregateRating: None | (
        list[AggregateRating | str] | AggregateRating | str
    ) = Field(
        default=None,
        description="The overall rating, based on a collection of reviews or ratings, of the item.",
    )
    serviceArea: None | (
        list[AdministrativeArea | GeoShape | Place | str]
        | AdministrativeArea
        | GeoShape
        | Place
        | str
    ) = Field(
        default=None,
        description="The geographic area where the service is provided.",
    )
    serviceType: None | (
        list[str | Text | GovernmentBenefitsType] | str | Text | GovernmentBenefitsType
    ) = Field(
        default=None,
        description="The type of service being offered, e.g. veterans' benefits, emergency relief, etc.",
    )
    providerMobility: list[str | Text] | str | Text | None = Field(
        default=None,
        description="Indicates the mobility of a provided service (e.g. 'static', 'dynamic').",
    )
    review: list[Review | str] | Review | str | None = Field(
        default=None,
        description="A review of the item.",
    )
    broker: None | (
        list[Organization | Person | str] | Organization | Person | str
    ) = Field(
        default=None,
        description="An entity that arranges for an exchange between a buyer and a seller. In most cases a broker"
        "never acquires or releases ownership of a product or service involved in an exchange."
        "If it is not clear whether an entity is a broker, seller, or buyer, the latter two terms"
        "are preferred.",
    )
    termsOfService: None | (
        list[AnyUrl | URL | str | Text] | AnyUrl | URL | str | Text
    ) = Field(
        default=None,
        description="Human-readable terms of service documentation.",
    )
    serviceAudience: None | (list[Audience | str] | Audience | str) = Field(
        default=None,
        description="The audience eligible for this service.",
    )
    hoursAvailable: None | (
        list[OpeningHoursSpecification | str] | OpeningHoursSpecification | str
    ) = Field(
        default=None,
        description="The hours during which this service or contact is available.",
    )
    areaServed: None | (
        list[str | Text | AdministrativeArea | GeoShape | Place]
        | str
        | Text
        | AdministrativeArea
        | GeoShape
        | Place
    ) = Field(
        default=None,
        description="The geographic area where a service or offered item is provided.",
    )
    availableChannel: None | (
        list[ServiceChannel | str] | ServiceChannel | str
    ) = Field(
        default=None,
        description="A means of accessing the service (e.g. a phone bank, a web site, a location, etc.).",
    )
    award: list[str | Text] | str | Text | None = Field(
        default=None,
        description="An award won by or for this item.",
    )
    slogan: list[str | Text] | str | Text | None = Field(
        default=None,
        description="A slogan or motto associated with the item.",
    )
    logo: None | (
        list[AnyUrl | URL | ImageObject | str] | AnyUrl | URL | ImageObject | str
    ) = Field(
        default=None,
        description="An associated logo.",
    )
    isSimilarTo: None | (
        list[Product | Service | str] | Product | Service | str
    ) = Field(
        default=None,
        description="A pointer to another, functionally similar product (or multiple products).",
    )


if TYPE_CHECKING:
    from pydantic2_schemaorg.Thing import Thing
    from pydantic2_schemaorg.URL import URL
    from pydantic2_schemaorg.Text import Text
    from pydantic2_schemaorg.CategoryCode import CategoryCode
    from pydantic2_schemaorg.PhysicalActivityCategory import PhysicalActivityCategory
    from pydantic2_schemaorg.OfferCatalog import OfferCatalog
    from pydantic2_schemaorg.Offer import Offer
    from pydantic2_schemaorg.Demand import Demand
    from pydantic2_schemaorg.Audience import Audience
    from pydantic2_schemaorg.Organization import Organization
    from pydantic2_schemaorg.Person import Person
    from pydantic2_schemaorg.Brand import Brand
    from pydantic2_schemaorg.Product import Product
    from pydantic2_schemaorg.AggregateRating import AggregateRating
    from pydantic2_schemaorg.AdministrativeArea import AdministrativeArea
    from pydantic2_schemaorg.GeoShape import GeoShape
    from pydantic2_schemaorg.Place import Place
    from pydantic2_schemaorg.GovernmentBenefitsType import GovernmentBenefitsType
    from pydantic2_schemaorg.Review import Review
    from pydantic2_schemaorg.OpeningHoursSpecification import OpeningHoursSpecification
    from pydantic2_schemaorg.ServiceChannel import ServiceChannel
    from pydantic2_schemaorg.ImageObject import ImageObject
