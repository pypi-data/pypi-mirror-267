# coding: utf-8

"""
    Battery Data API

    A standard API for accessing battery experiment datasets and metadata  # noqa: E501

    The version of the OpenAPI document: 2.1.25
    Contact: martin.robinson@cs.ox.ac.uk
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from galv import schemas  # noqa: F401


class ObservedFile(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "has_required_columns",
            "parquet_partitions",
            "first_sample_no",
            "last_observed_time",
            "columns",
            "uuid",
            "url",
            "harvester",
            "last_observed_size",
            "last_sample_no",
            "path",
            "parser",
            "extra_metadata",
            "permissions",
            "name",
            "num_rows",
            "upload_info",
            "state",
            "column_errors",
            "upload_errors",
        }
        
        class properties:
            url = schemas.StrSchema
            uuid = schemas.UUIDSchema
            harvester = schemas.StrSchema
            
            
            class name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'name':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            path = schemas.StrSchema
            
            
            class state(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "RETRY IMPORT": "RETRY_IMPORT",
                        "IMPORT FAILED": "IMPORT_FAILED",
                        "UNSTABLE": "UNSTABLE",
                        "GROWING": "GROWING",
                        "STABLE": "STABLE",
                        "IMPORTING": "IMPORTING",
                        "IMPORTED": "IMPORTED",
                    }
                
                @schemas.classproperty
                def RETRY_IMPORT(cls):
                    return cls("RETRY IMPORT")
                
                @schemas.classproperty
                def IMPORT_FAILED(cls):
                    return cls("IMPORT FAILED")
                
                @schemas.classproperty
                def UNSTABLE(cls):
                    return cls("UNSTABLE")
                
                @schemas.classproperty
                def GROWING(cls):
                    return cls("GROWING")
                
                @schemas.classproperty
                def STABLE(cls):
                    return cls("STABLE")
                
                @schemas.classproperty
                def IMPORTING(cls):
                    return cls("IMPORTING")
                
                @schemas.classproperty
                def IMPORTED(cls):
                    return cls("IMPORTED")
            
            
            class parser(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'parser':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class num_rows(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'num_rows':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class first_sample_no(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'first_sample_no':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class last_sample_no(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'last_sample_no':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class extra_metadata(
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.AnyTypeSchema
            
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                ) -> 'extra_metadata':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            has_required_columns = schemas.BoolSchema
            
            
            class last_observed_time(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'last_observed_time':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            last_observed_size = schemas.IntSchema
            
            
            class column_errors(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.AnyTypeSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'column_errors':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class upload_errors(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'upload_errors':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class parquet_partitions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'parquet_partitions':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class upload_info(
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.AnyTypeSchema
            
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                ) -> 'upload_info':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class columns(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'columns':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class permissions(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        read = schemas.BoolSchema
                        write = schemas.BoolSchema
                        create = schemas.BoolSchema
                        __annotations__ = {
                            "read": read,
                            "write": write,
                            "create": create,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["read"]) -> MetaOapg.properties.read: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["write"]) -> MetaOapg.properties.write: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["create"]) -> MetaOapg.properties.create: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["read", "write", "create", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["read"]) -> typing.Union[MetaOapg.properties.read, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["write"]) -> typing.Union[MetaOapg.properties.write, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["create"]) -> typing.Union[MetaOapg.properties.create, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["read", "write", "create", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    read: typing.Union[MetaOapg.properties.read, bool, schemas.Unset] = schemas.unset,
                    write: typing.Union[MetaOapg.properties.write, bool, schemas.Unset] = schemas.unset,
                    create: typing.Union[MetaOapg.properties.create, bool, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'permissions':
                    return super().__new__(
                        cls,
                        *_args,
                        read=read,
                        write=write,
                        create=create,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "url": url,
                "uuid": uuid,
                "harvester": harvester,
                "name": name,
                "path": path,
                "state": state,
                "parser": parser,
                "num_rows": num_rows,
                "first_sample_no": first_sample_no,
                "last_sample_no": last_sample_no,
                "extra_metadata": extra_metadata,
                "has_required_columns": has_required_columns,
                "last_observed_time": last_observed_time,
                "last_observed_size": last_observed_size,
                "column_errors": column_errors,
                "upload_errors": upload_errors,
                "parquet_partitions": parquet_partitions,
                "upload_info": upload_info,
                "columns": columns,
                "permissions": permissions,
            }
    
    has_required_columns: MetaOapg.properties.has_required_columns
    parquet_partitions: MetaOapg.properties.parquet_partitions
    first_sample_no: MetaOapg.properties.first_sample_no
    last_observed_time: MetaOapg.properties.last_observed_time
    columns: MetaOapg.properties.columns
    uuid: MetaOapg.properties.uuid
    url: MetaOapg.properties.url
    harvester: MetaOapg.properties.harvester
    last_observed_size: MetaOapg.properties.last_observed_size
    last_sample_no: MetaOapg.properties.last_sample_no
    path: MetaOapg.properties.path
    parser: MetaOapg.properties.parser
    extra_metadata: MetaOapg.properties.extra_metadata
    permissions: MetaOapg.properties.permissions
    name: MetaOapg.properties.name
    num_rows: MetaOapg.properties.num_rows
    upload_info: MetaOapg.properties.upload_info
    state: MetaOapg.properties.state
    column_errors: MetaOapg.properties.column_errors
    upload_errors: MetaOapg.properties.upload_errors
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uuid"]) -> MetaOapg.properties.uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["harvester"]) -> MetaOapg.properties.harvester: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["path"]) -> MetaOapg.properties.path: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parser"]) -> MetaOapg.properties.parser: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["num_rows"]) -> MetaOapg.properties.num_rows: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["first_sample_no"]) -> MetaOapg.properties.first_sample_no: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_sample_no"]) -> MetaOapg.properties.last_sample_no: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extra_metadata"]) -> MetaOapg.properties.extra_metadata: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_required_columns"]) -> MetaOapg.properties.has_required_columns: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_observed_time"]) -> MetaOapg.properties.last_observed_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_observed_size"]) -> MetaOapg.properties.last_observed_size: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["column_errors"]) -> MetaOapg.properties.column_errors: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["upload_errors"]) -> MetaOapg.properties.upload_errors: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parquet_partitions"]) -> MetaOapg.properties.parquet_partitions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["upload_info"]) -> MetaOapg.properties.upload_info: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["columns"]) -> MetaOapg.properties.columns: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["permissions"]) -> MetaOapg.properties.permissions: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["url", "uuid", "harvester", "name", "path", "state", "parser", "num_rows", "first_sample_no", "last_sample_no", "extra_metadata", "has_required_columns", "last_observed_time", "last_observed_size", "column_errors", "upload_errors", "parquet_partitions", "upload_info", "columns", "permissions", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uuid"]) -> MetaOapg.properties.uuid: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["harvester"]) -> MetaOapg.properties.harvester: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["path"]) -> MetaOapg.properties.path: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parser"]) -> MetaOapg.properties.parser: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["num_rows"]) -> MetaOapg.properties.num_rows: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["first_sample_no"]) -> MetaOapg.properties.first_sample_no: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_sample_no"]) -> MetaOapg.properties.last_sample_no: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extra_metadata"]) -> MetaOapg.properties.extra_metadata: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_required_columns"]) -> MetaOapg.properties.has_required_columns: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_observed_time"]) -> MetaOapg.properties.last_observed_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_observed_size"]) -> MetaOapg.properties.last_observed_size: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["column_errors"]) -> MetaOapg.properties.column_errors: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["upload_errors"]) -> MetaOapg.properties.upload_errors: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parquet_partitions"]) -> MetaOapg.properties.parquet_partitions: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["upload_info"]) -> MetaOapg.properties.upload_info: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["columns"]) -> MetaOapg.properties.columns: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["permissions"]) -> MetaOapg.properties.permissions: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["url", "uuid", "harvester", "name", "path", "state", "parser", "num_rows", "first_sample_no", "last_sample_no", "extra_metadata", "has_required_columns", "last_observed_time", "last_observed_size", "column_errors", "upload_errors", "parquet_partitions", "upload_info", "columns", "permissions", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        has_required_columns: typing.Union[MetaOapg.properties.has_required_columns, bool, ],
        parquet_partitions: typing.Union[MetaOapg.properties.parquet_partitions, list, tuple, ],
        first_sample_no: typing.Union[MetaOapg.properties.first_sample_no, None, decimal.Decimal, int, ],
        last_observed_time: typing.Union[MetaOapg.properties.last_observed_time, None, str, datetime, ],
        columns: typing.Union[MetaOapg.properties.columns, list, tuple, ],
        uuid: typing.Union[MetaOapg.properties.uuid, str, uuid.UUID, ],
        url: typing.Union[MetaOapg.properties.url, str, ],
        harvester: typing.Union[MetaOapg.properties.harvester, str, ],
        last_observed_size: typing.Union[MetaOapg.properties.last_observed_size, decimal.Decimal, int, ],
        last_sample_no: typing.Union[MetaOapg.properties.last_sample_no, None, decimal.Decimal, int, ],
        path: typing.Union[MetaOapg.properties.path, str, ],
        parser: typing.Union[MetaOapg.properties.parser, None, str, ],
        extra_metadata: typing.Union[MetaOapg.properties.extra_metadata, dict, frozendict.frozendict, None, ],
        permissions: typing.Union[MetaOapg.properties.permissions, dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, None, str, ],
        num_rows: typing.Union[MetaOapg.properties.num_rows, None, decimal.Decimal, int, ],
        upload_info: typing.Union[MetaOapg.properties.upload_info, dict, frozendict.frozendict, None, ],
        state: typing.Union[MetaOapg.properties.state, str, ],
        column_errors: typing.Union[MetaOapg.properties.column_errors, list, tuple, ],
        upload_errors: typing.Union[MetaOapg.properties.upload_errors, list, tuple, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ObservedFile':
        return super().__new__(
            cls,
            *_args,
            has_required_columns=has_required_columns,
            parquet_partitions=parquet_partitions,
            first_sample_no=first_sample_no,
            last_observed_time=last_observed_time,
            columns=columns,
            uuid=uuid,
            url=url,
            harvester=harvester,
            last_observed_size=last_observed_size,
            last_sample_no=last_sample_no,
            path=path,
            parser=parser,
            extra_metadata=extra_metadata,
            permissions=permissions,
            name=name,
            num_rows=num_rows,
            upload_info=upload_info,
            state=state,
            column_errors=column_errors,
            upload_errors=upload_errors,
            _configuration=_configuration,
            **kwargs,
        )
