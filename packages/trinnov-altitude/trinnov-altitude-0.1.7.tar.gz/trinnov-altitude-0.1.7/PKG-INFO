Metadata-Version: 2.1
Name: trinnov-altitude
Version: 0.1.7
Summary: "Python client for interfacing with the Trinnov Altitude processor."
Home-page: https://github.com/binarylogic/py-trinnov-altitude
Author: Ben Johnson
Author-email: ben@binarylogic.com
Classifier: Intended Audience :: Developers
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Operating System :: OS Independent
Classifier: Topic :: Software Development :: Libraries
Classifier: Topic :: Home Automation
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: wakeonlan>=3.1

# Trinnov Altitude Python Library

A Python library for interacting with the [Trinnov Altitude processor](https://www.trinnov.com/en/products/altitude32/) via the
[TCP/IP automation protocol](docs/Alititude%20Protocol.pdf) provided by the Trinnov Altitude.

## Overview

The Trinnov Altitude processor is an audio/video processor that exposes an
automation protocol over TCP/IP for remote control.

The interface is a two-way communication protocol. At any time the processor
can broadcast messages to all connected clients reflecting the current
processor state. For example, the user could turn the volume knob on the
processor itself, which would broadcase volume change messages to all connected
clients.

Therefore, it's important to architect usage of this library to handle state
changes asynchronously. You should not be polling the processor for state
changes. Instead, you should register a callback that fires when changes are
received.

## Installation

`pip install trinnov-altitude`

## Setup

### Power on

Powers the processor on via Wake on Lan. The process must be powered on
before you can connect.

```python
from trinnov_altitude.trinnov_altitude import TrinnovAltitude

altitude = TrinnovAltitude(host = "192.168.1.90", mac = "c8:7f:54:2d:ce:f2")
await altitude.power_on()
```

### Connect

Connect to the processor via TCP/IP. Note that you must power on the device
before connecting. The Trinnov Altitude does not have a standby mode that will
accept connections.

```python
from trinnov_altitude.trinnov_altitude import TrinnovAltitude

altitude = TrinnovAltitude(host = "192.168.1.90")

try:
    await altitude.connect()
finally:
    # Always disconnect and cleanup
    await altitude.disconnect()
```

### Listen for updates

The processor will broadcast state changes to all connected clients. You must
explicitly start listening to receive the messages and sync the internal state
of your object.

```python
from trinnov_altitude.trinnov_altitude import TrinnovAltitude

altitude = TrinnovAltitude(host = "192.168.1.90")

# Optionally define a callback to be fired on each individual update
def callback(message):
    # react to the change here
    pass

# Start listening for updates in an async.io Task
altitude.start_listening(callback: callback)
```

## Commands

All commands assume you have [setup](#setup) your Trinnov Altitude client.

### Change the volume

```python
# Get the current volume level
altitude.volume

# Change the processor's volume
await altitude.set_volume(-45)

# See the new volume level. Once sent, the processor
altitude.volume
```
