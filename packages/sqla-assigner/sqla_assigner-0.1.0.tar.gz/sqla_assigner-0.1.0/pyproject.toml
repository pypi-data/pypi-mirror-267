[project]
authors = [
    { name = "Nikitosio Noskovinni", email = "nik.noskov08@gmail.com" },
]
dependencies = [
    "sqlalchemy>=2.0.29",
]
description = "A simple type safety helper for assigning values to attributes of SQLAlchemy models"
name = "sqla-assigner"
readme = "README.md"
requires-python = ">=3.11"
version = "0.1.0"

[project.license]
text = "MIT"

[project.urls]
GitHub = "https://github.com/barbarrista/sqla-assigner"
GitLab = "https://gitlab.com/n.one.k/opensource/sqla-assigner"

[tool.pdm]
distribution = true

[tool.pdm.dev-dependencies]
dev = [
    "commitizen>=3.21.3",
]
lint = [
    "black>=24.3.0",
    "deptry>=0.16.0",
    "isort>=5.13.2",
    "ruff>=0.3.5",
    "pyright>=1.1.357",
    "mypy>=1.9.0",
]
tests = [
    "coverage>=7.4.4",
    "pytest>=8.1.1",
    "typeguard>=4.2.1",
]

[tool.pdm.scripts.lint]
composite = [
    "ruff check . --fix --show-fixes",
    "black .",
    "ruff check . --fix --show-fixes",
    "mypy .",
    "pyright .",
    "deptry ./sqla_assigner",
]

[tool.pdm.scripts.test]
composite = [
    "coverage run",
    "coverage report",
]

[tool.pytest.ini_options]
pythonpath = "sqla_assigner"

[tool.deptry.per_rule_ignores]
DEP002 = [
    "commitizen",
]

[tool.coverage.run]
branch = true
command_line = "-m pytest -v"
concurrency = [
    "greenlet",
    "thread",
]
omit = []
source = [
    "sqla_assigner",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "raise NotImplementedError",
    "raise ValueError",
    "if TYPE_CHECKING:",
    "case _ as never:",
    "assert_never(never)",
]
fail_under = 100
precision = 2
show_missing = true
skip_covered = true
skip_empty = true

[tool.mypy]
exclude = ""
plugins = []
follow_imports = "silent"
ignore_missing_imports = true
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_calls = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_ignores = true
strict_equality = true
strict_optional = true

[tool.isort]
profile = "black"

[tool.ruff]
exclude = []
src = [
    "sqla_assigner",
    "tests",
]

[tool.ruff.lint]
fixable = [
    "F",
    "E",
    "W",
    "I",
    "COM",
    "UP",
    "RUF",
]
ignore = [
    "E501",
    "A003",
    "ANN101",
    "ANN102",
    "D",
    "PD",
    "INP",
    "TCH001",
    "TCH002",
    "TCH003",
    "EXE",
    "RUF001",
    "RUF002",
    "RUF003",
]
select = [
    "ALL",
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "S101",
    "S311",
]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false

[tool.ruff.lint.mccabe]
max-complexity = 6

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = []

[tool.ruff.lint.pep8-naming]
classmethod-decorators = [
    "classmethod",
    "pydantic.validator",
    "pydantic.root_validator",
]
staticmethod-decorators = [
    "staticmethod",
]

[tool.ruff.lint.flake8-self]
ignore-names = [
    "_t",
]

[tool.pyright]
reportMissingTypeStubs = false
reportUnknownMemberType = false
reportUnusedImport = false
typeCheckingMode = "strict"

[tool.commitizen]
name = "cz_conventional_commits"
version = "0.1.5"
version_files = [
    "sqla_assigner/__init__.py",
    "pyproject.toml:version",
]

[build-system]
build-backend = "pdm.backend"
requires = [
    "pdm-backend",
]
