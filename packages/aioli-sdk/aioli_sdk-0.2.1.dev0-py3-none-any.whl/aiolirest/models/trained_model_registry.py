# coding: utf-8

"""
    HPE Machine Learning Inference Software (MLIS/Aioli)

    HPE MLIS is *Aioli* -- The AI On-line Inference Platform that enables easy deployment, tracking, and serving of your packaged models regardless of your preferred AI framework.

    The version of the OpenAPI document: 0.2.1-dev0
    Contact: community@determined-ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr, field_validator
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class TrainedModelRegistry(BaseModel):
    """
    Provides the metadata that describes how to access a named model registry to enable download of a trained model for deployment.
    """ # noqa: E501
    access_key: Optional[StrictStr] = Field(default=None, description="For an `s3` registry, the value is the access key/username.", alias="accessKey")
    bucket: Optional[StrictStr] = Field(default=None, description="For an `s3` registry, the value is the S3 bucket name.")
    endpoint_url: Optional[StrictStr] = Field(default=None, description="For an `s3` registry, the S3 registry endpoint.", alias="endpointUrl")
    id: Optional[StrictStr] = Field(default=None, description="The ID of the model registry. This is a read-only field and is automatically assigned on creation.")
    modified_at: Optional[StrictStr] = Field(default=None, description="Date-time of last modification of the registry. This is a read-only field and is automatically updated.", alias="modifiedAt")
    name: StrictStr = Field(description="The name of the registry.  Must begin with a letter, but may contain letters, numbers, underscore, and hyphen.")
    secret_key: StrictStr = Field(description="The secret key is the password, secret key, or access token for the registry.  * For an `s3` registry, the `secretKey` provides a secret key for the S3 bucket. * For an `openllm` registry, the`secretKey` is the access token for huggingface.co and is supplied to the launched container via the `HF_TOKEN`  environment variable.bucket.", alias="secretKey")
    type: StrictStr = Field(description="The type of this model registry. * `s3` - Configuration to enable access to an s3 bucket. * `openllm` - Configuration to enable direct download of openllm models from huggingface.co.   Provide your access token in the `secretKey` field. * `ngc` - Not yet supported. Configuration to enable direct download from the NGC: AI Development Catalog. * `http` - Not yet supported.  Configuration to enable model download from a protected http endpoint that requires login.")
    __properties: ClassVar[List[str]] = ["accessKey", "bucket", "endpointUrl", "id", "modifiedAt", "name", "secretKey", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('s3', 'openllm', 'ngc', 'http'):
            raise ValueError("must be one of enum values ('s3', 'openllm', 'ngc', 'http')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of TrainedModelRegistry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of TrainedModelRegistry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessKey": obj.get("accessKey"),
            "bucket": obj.get("bucket"),
            "endpointUrl": obj.get("endpointUrl"),
            "id": obj.get("id"),
            "modifiedAt": obj.get("modifiedAt"),
            "name": obj.get("name"),
            "secretKey": obj.get("secretKey"),
            "type": obj.get("type")
        })
        return _obj


