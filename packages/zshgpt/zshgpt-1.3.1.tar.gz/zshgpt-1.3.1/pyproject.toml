[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "zshgpt"
dynamic = ["version"]
description = 'Level up z shell with GPT'
readme = "README.md"
requires-python = ">=3.8"
license = "MIT"
keywords = []
authors = [{ name = "Anders Steen", email = "asteennilsen@gmail.com" }]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
  "License :: OSI Approved :: MIT License",
  "Framework :: Hatch",
  "Topic :: Utilities",
]
dependencies = ["click", "openai~=1.2.4", "pydantic-settings"]

[project.urls]
Documentation = "https://github.com/AndersSteenNilsen/zshgpt#readme"
Issues = "https://github.com/AndersSteenNilsen/zshgpt/issues"
Source = "https://github.com/AndersSteenNilsen/zshgpt"

[project.scripts]
zshgpt = "zshgpt.cli:zshgpt"

[tool.hatch.envs.default]
dependencies = ["coverage[toml]>=6.5", "pytest", "pre-commit", "pytest-env"]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = ["- coverage combine", "coverage report"]
cov = ["test-cov", "cov-report"]
cli_test = "pytest {args:tests} -m \"not need_OPENAI_API_KEY\""

[[tool.hatch.envs.all.matrix]]
python = ["3.8", "3.9", "3.10", "3.11", "3.12"]


[tool.hatch.version]
# path = "src/zshgpt/__about__.py"
source = "vcs"

[tool.hatch.build.hooks.vcs]
version-file = "src/zshgpt/__about__.py"

[tool.hatch.build.targets.app]

[tool.hatch.envs.lint]
detached = true
dependencies = [
  "mypy>=1.0.0",
  "ruff>=0.2.2",
]
[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/zshgpt tests}"
style = [
  "ruff {args:.}",
]
fmt = [
  "ruff check --fix {args:.}",
  "ruff format {args:.}",
  "style",
]
all = [
  "style",
  "typing",
]

[tool.pytest.ini_options]
markers = [
  "need_OPENAI_API_KEY: Test needs an OPENAI_API_KEY to work, do not run in CI/CD."
]
env = [
  "OPENAI_API_KEY=WrongKey",
]

[tool.ruff]
target-version = "py38"
line-length = 120

[tool.ruff.format]
quote-style = "single"

[tool.ruff.lint]
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  #"ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105",
  "S106",
  "S107",
  # Ignore complexity
  "C901",
  "PLR0911",
  "PLR0912",
  "PLR0913",
  "PLR0915",
]
unfixable = [
  # Don't touch unused imports
  # "F401",
]
isort.known-first-party = ["zshgpt"]
flake8-tidy-imports.ban-relative-imports = "all"
flake8-quotes.inline-quotes = "single"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]
"src/zshgpt/settings.py" = ["ARG", "FBT001"]

[tool.coverage.run]
source_pkgs = ["zshgpt", "tests"]
branch = true
parallel = true
omit = ["src/zshgpt/__about__.py"]

[tool.coverage.paths]
zshgpt = ["src/zshgpt", "*/zshgpt/src/zshgpt"]
tests = ["tests", "*/zshgpt/tests"]

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]
